// CAUTION: Generated by yy - DO NOT EDIT.

// Copyright 2016 The Plot Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package plot

import (
	"go/token"

	"github.com/cznic/xc"
)

// AST represents data reduced by production:
//
//	AST:
//	        StatementList
type AST struct {
	StatementList *StatementList
}

func (n *AST) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *AST) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *AST) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.StatementList.Pos()
}

// AngleUnit represents data reduced by productions:
//
//	AngleUnit:
//	        "deg"
//	|       "d"    // Case 1
//	|       "pi"   // Case 2
type AngleUnit struct {
	Case  int
	Token xc.Token
}

func (n *AngleUnit) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *AngleUnit) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *AngleUnit) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// ArrowStyleList represents data reduced by productions:
//
//	ArrowStyleList:
//	        ArrowStyleListItem
//	|       ArrowStyleList ArrowStyleListItem  // Case 1
type ArrowStyleList struct {
	ArrowStyleList     *ArrowStyleList
	ArrowStyleListItem *ArrowStyleListItem
	Case               int
}

func (n *ArrowStyleList) reverse() *ArrowStyleList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.ArrowStyleList
	for nb != nil {
		nc := nb.ArrowStyleList
		nb.ArrowStyleList = na
		na = nb
		nb = nc
	}
	n.ArrowStyleList = nil
	return na
}

func (n *ArrowStyleList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *ArrowStyleList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *ArrowStyleList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.ArrowStyleList.Pos()
	case 0:
		return n.ArrowStyleListItem.Pos()
	default:
		panic("internal error")
	}
}

// ArrowStyleListItem represents data reduced by productions:
//
//	ArrowStyleListItem:
//	        "head"
//	|       "nohead"                 // Case 1
//	|       "heads"                  // Case 2
//	|       "size" Position          // Case 3
//	|       "size" Position "fixed"  // Case 4
//	|       "filled"                 // Case 5
//	|       "empty"                  // Case 6
//	|       "nofilled"               // Case 7
//	|       "noborder"               // Case 8
//	|       "front"                  // Case 9
//	|       LineStyleListItem        // Case 10
type ArrowStyleListItem struct {
	Case              int
	LineStyleListItem *LineStyleListItem
	Position          *Position
	Token             xc.Token
	Token2            xc.Token
}

func (n *ArrowStyleListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *ArrowStyleListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *ArrowStyleListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 10:
		return n.LineStyleListItem.Pos()
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// BinaryList represents data reduced by productions:
//
//	BinaryList:
//	        BinaryListItem
//	|       BinaryList BinaryListItem  // Case 1
type BinaryList struct {
	BinaryList     *BinaryList
	BinaryListItem *BinaryListItem
	Case           int
}

func (n *BinaryList) reverse() *BinaryList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.BinaryList
	for nb != nil {
		nc := nb.BinaryList
		nb.BinaryList = na
		na = nb
		nb = nc
	}
	n.BinaryList = nil
	return na
}

func (n *BinaryList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *BinaryList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *BinaryList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.BinaryList.Pos()
	case 0:
		return n.BinaryListItem.Pos()
	default:
		panic("internal error")
	}
}

// BinaryListItem represents data reduced by productions:
//
//	BinaryListItem:
//	        "array" '=' '(' ExpressionList ')'
//	|       "array" '=' ColonExpressionList             // Case 1
//	|       "center" '=' '(' ExpressionList ')'         // Case 2
//	|       "dx" '=' Expression                         // Case 3
//	|       "dy" '=' Expression                         // Case 4
//	|       "dz" '=' Expression                         // Case 5
//	|       "endian" '=' Endianess                      // Case 6
//	|       "filetype" '=' "auto"                       // Case 7
//	|       "filetype" '=' "avs"                        // Case 8
//	|       "filetype" '=' "edf"                        // Case 9
//	|       "filetype" '=' "png"                        // Case 10
//	|       "flip" '=' "x"                              // Case 11
//	|       "flip" '=' "y"                              // Case 12
//	|       "flip" '=' "z"                              // Case 13
//	|       "flipx"                                     // Case 14
//	|       "flipy"                                     // Case 15
//	|       "flipz"                                     // Case 16
//	|       "format" '=' Expression                     // Case 17
//	|       "general"                                   // Case 18
//	|       "origin" '=' OriginList                     // Case 19
//	|       "perpendicular" '=' '(' ExpressionList ')'  // Case 20
//	|       "record" '=' '(' ExpressionList ')'         // Case 21
//	|       "record" '=' ColonExpressionList            // Case 22
//	|       "rot" '=' Expression                        // Case 23
//	|       "rot" '=' Expression AngleUnit              // Case 24
//	|       "rotate" '=' Expression                     // Case 25
//	|       "rotate" '=' Expression AngleUnit           // Case 26
//	|       "rotation" '=' Expression                   // Case 27
//	|       "rotation" '=' Expression AngleUnit         // Case 28
//	|       "scan" '=' "xy"                             // Case 29
//	|       "scan" '=' "xyz"                            // Case 30
//	|       "scan" '=' "xzy"                            // Case 31
//	|       "scan" '=' "yx"                             // Case 32
//	|       "scan" '=' "yxz"                            // Case 33
//	|       "scan" '=' "yzx"                            // Case 34
//	|       "scan" '=' "zxy"                            // Case 35
//	|       "scan" '=' "zyx"                            // Case 36
//	|       "transpose"                                 // Case 37
//	|       SKIPEQ '=' ColonExpressionList              // Case 38
//	|       DTEQ '=' Expression                         // Case 39
type BinaryListItem struct {
	AngleUnit           *AngleUnit
	Case                int
	ColonExpressionList *ColonExpressionList
	Endianess           *Endianess
	Expression          *Expression
	ExpressionList      *ExpressionList
	OriginList          *OriginList
	Token               xc.Token
	Token2              xc.Token
	Token3              xc.Token
	Token4              xc.Token
}

func (n *BinaryListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *BinaryListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *BinaryListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// BinaryListOpt represents data reduced by productions:
//
//	BinaryListOpt:
//	        /* empty */
//	|       BinaryList   // Case 1
type BinaryListOpt struct {
	BinaryList *BinaryList
}

func (n *BinaryListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *BinaryListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *BinaryListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.BinaryList.Pos()
}

// Bind represents data reduced by productions:
//
//	Bind:
//	        "bind" Expression SimpleExpression
//	|       "bind" "a" Expression SimpleExpression           // Case 1
//	|       "bind" "all" Expression SimpleExpression         // Case 2
//	|       "bind" "allwindows" Expression SimpleExpression  // Case 3
type Bind struct {
	Case             int
	Expression       *Expression
	SimpleExpression *SimpleExpression
	Token            xc.Token
	Token2           xc.Token
}

func (n *Bind) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Bind) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Bind) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Call represents data reduced by production:
//
//	Call:
//	        "call" SimpleExpressionList
type Call struct {
	SimpleExpressionList *SimpleExpressionList
	Token                xc.Token
}

func (n *Call) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Call) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Call) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Cd represents data reduced by production:
//
//	Cd:
//	        "cd" Expression
type Cd struct {
	Expression *Expression
	Token      xc.Token
}

func (n *Cd) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Cd) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Cd) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Clear represents data reduced by production:
//
//	Clear:
//	        "clear"
type Clear struct {
	Token xc.Token
}

func (n *Clear) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Clear) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Clear) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// ColonExpressionList represents data reduced by productions:
//
//	ColonExpressionList:
//	        NonParenthesizedExpression
//	|       ColonExpressionList ':' NonParenthesizedExpression  // Case 1
type ColonExpressionList struct {
	Case                       int
	ColonExpressionList        *ColonExpressionList
	NonParenthesizedExpression *NonParenthesizedExpression
	Token                      xc.Token
}

func (n *ColonExpressionList) reverse() *ColonExpressionList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.ColonExpressionList
	for nb != nil {
		nc := nb.ColonExpressionList
		nb.ColonExpressionList = na
		na = nb
		nb = nc
	}
	n.ColonExpressionList = nil
	return na
}

func (n *ColonExpressionList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *ColonExpressionList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *ColonExpressionList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.ColonExpressionList.Pos()
	case 0:
		return n.NonParenthesizedExpression.Pos()
	default:
		panic("internal error")
	}
}

// ColonExpressionOptList represents data reduced by productions:
//
//	ColonExpressionOptList:
//	        /* empty */
//	|       NonParenthesizedExpression                             // Case 1
//	|       ColonExpressionOptList ':'                             // Case 2
//	|       ColonExpressionOptList ':' NonParenthesizedExpression  // Case 3
type ColonExpressionOptList struct {
	Case                       int
	ColonExpressionOptList     *ColonExpressionOptList
	NonParenthesizedExpression *NonParenthesizedExpression
	Token                      xc.Token
}

func (n *ColonExpressionOptList) reverse() *ColonExpressionOptList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.ColonExpressionOptList
	for nb != nil {
		nc := nb.ColonExpressionOptList
		nb.ColonExpressionOptList = na
		na = nb
		nb = nc
	}
	n.ColonExpressionOptList = nil
	return na
}

func (n *ColonExpressionOptList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *ColonExpressionOptList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *ColonExpressionOptList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 2, 3:
		if p := n.ColonExpressionOptList.Pos(); p != 0 {
			return p
		}

		return n.Token.Pos()
	case 1:
		return n.NonParenthesizedExpression.Pos()
	default:
		panic("internal error")
	}
}

// ColorSpec represents data reduced by productions:
//
//	ColorSpec:
//	        "bgnd"
//	|       "black"                         // Case 1
//	|       "pal"                           // Case 2
//	|       "pal" "cbrange" Expression      // Case 3
//	|       "pal" "frac" Expression         // Case 4
//	|       "pal" "z"                       // Case 5
//	|       "palette"                       // Case 6
//	|       "palette" "cbrange" Expression  // Case 7
//	|       "palette" "frac" Expression     // Case 8
//	|       "palette" "z"                   // Case 9
//	|       "rgb" "var"                     // Case 10
//	|       "rgb" "variable"                // Case 11
//	|       "rgb" Expression                // Case 12
//	|       "rgbcolor" "var"                // Case 13
//	|       "rgbcolor" "variable"           // Case 14
//	|       "rgbcolor" Expression           // Case 15
//	|       "variable"                      // Case 16
//	|       Expression                      // Case 17
type ColorSpec struct {
	Case       int
	Expression *Expression
	Token      xc.Token
	Token2     xc.Token
}

func (n *ColorSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *ColorSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *ColorSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 17:
		return n.Expression.Pos()
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// ComplexNumber represents data reduced by production:
//
//	ComplexNumber:
//	        '{' Expression ',' Expression '}'
type ComplexNumber struct {
	Expression  *Expression
	Expression2 *Expression
	Token       xc.Token
	Token2      xc.Token
	Token3      xc.Token
}

func (n *ComplexNumber) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *ComplexNumber) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *ComplexNumber) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// CoordinateSystemOpt represents data reduced by productions:
//
//	CoordinateSystemOpt:
//	        /* empty */
//	|       "first"      // Case 1
//	|       "second"     // Case 2
//	|       "graph"      // Case 3
//	|       "screen"     // Case 4
//	|       "char"       // Case 5
//	|       "character"  // Case 6
type CoordinateSystemOpt struct {
	Case  int
	Token xc.Token
}

func (n *CoordinateSystemOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *CoordinateSystemOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *CoordinateSystemOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1, 2, 3, 4, 5, 6:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// DashTypeSpec represents data reduced by productions:
//
//	DashTypeSpec:
//	        "solid"
//	|       Expression  // Case 1
type DashTypeSpec struct {
	Case       int
	Expression *Expression
	Token      xc.Token
}

func (n *DashTypeSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *DashTypeSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *DashTypeSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.Expression.Pos()
	case 0:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// DatafileModifiersList represents data reduced by productions:
//
//	DatafileModifiersList:
//	        DatafileModifiersListItem
//	|       DatafileModifiersList DatafileModifiersListItem  // Case 1
type DatafileModifiersList struct {
	Case                      int
	DatafileModifiersList     *DatafileModifiersList
	DatafileModifiersListItem *DatafileModifiersListItem
}

func (n *DatafileModifiersList) reverse() *DatafileModifiersList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.DatafileModifiersList
	for nb != nil {
		nc := nb.DatafileModifiersList
		nb.DatafileModifiersList = na
		na = nb
		nb = nc
	}
	n.DatafileModifiersList = nil
	return na
}

func (n *DatafileModifiersList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *DatafileModifiersList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *DatafileModifiersList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.DatafileModifiersList.Pos()
	case 0:
		return n.DatafileModifiersListItem.Pos()
	default:
		panic("internal error")
	}
}

// DatafileModifiersListItem represents data reduced by productions:
//
//	DatafileModifiersListItem:
//	        "binary" BinaryListOpt
//	|       "matrix"                            // Case 1
//	|       "nonuniform" "matrix"               // Case 2
//	|       "in" ColonExpressionList            // Case 3
//	|       "index" ColonExpressionList         // Case 4
//	|       "every" ColonExpressionOptList      // Case 5
//	|       "skip" Expression                   // Case 6
//	|       "u" UsingList                       // Case 7
//	|       "u" UsingList SimpleExpression      // Case 8
//	|       "using" UsingList                   // Case 9
//	|       "using" UsingList SimpleExpression  // Case 10
//	|       "sm" Smoothing                      // Case 11
//	|       "smooth" Smoothing                  // Case 12
//	|       "volatile"                          // Case 13
//	|       "noautoscale"                       // Case 14
//	|       "columnheaders"                     // Case 15
//	|       "rowheaders"                        // Case 16
type DatafileModifiersListItem struct {
	BinaryListOpt          *BinaryListOpt
	Case                   int
	ColonExpressionList    *ColonExpressionList
	ColonExpressionOptList *ColonExpressionOptList
	Expression             *Expression
	SimpleExpression       *SimpleExpression
	Smoothing              *Smoothing
	Token                  xc.Token
	Token2                 xc.Token
	UsingList              *UsingList
}

func (n *DatafileModifiersListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *DatafileModifiersListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *DatafileModifiersListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// DatafileModifiersListOpt represents data reduced by productions:
//
//	DatafileModifiersListOpt:
//	        /* empty */
//	|       DatafileModifiersList  // Case 1
type DatafileModifiersListOpt struct {
	DatafileModifiersList *DatafileModifiersList
}

func (n *DatafileModifiersListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *DatafileModifiersListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *DatafileModifiersListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.DatafileModifiersList.Pos()
}

// Do represents data reduced by production:
//
//	Do:
//	        "do" IterationSpecifier '{' StatementList '}'
type Do struct {
	IterationSpecifier *IterationSpecifier
	StatementList      *StatementList
	Token              xc.Token
	Token2             xc.Token
	Token3             xc.Token
}

func (n *Do) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Do) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Do) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Else represents data reduced by production:
//
//	Else:
//	        "else" Statement
type Else struct {
	Statement *Statement
	Token     xc.Token
}

func (n *Else) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Else) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Else) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// EndConditionList represents data reduced by productions:
//
//	EndConditionList:
//	        EndConditionListItem
//	|       EndConditionList ',' EndConditionListItem  // Case 1
type EndConditionList struct {
	Case                 int
	EndConditionList     *EndConditionList
	EndConditionListItem *EndConditionListItem
	Token                xc.Token
}

func (n *EndConditionList) reverse() *EndConditionList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.EndConditionList
	for nb != nil {
		nc := nb.EndConditionList
		nb.EndConditionList = na
		na = nb
		nb = nc
	}
	n.EndConditionList = nil
	return na
}

func (n *EndConditionList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *EndConditionList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *EndConditionList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.EndConditionList.Pos()
	case 0:
		return n.EndConditionListItem.Pos()
	default:
		panic("internal error")
	}
}

// EndConditionListItem represents data reduced by productions:
//
//	EndConditionListItem:
//	        "any"
//	|       "button1"   // Case 1
//	|       "button2"   // Case 2
//	|       "button3"   // Case 3
//	|       "close"     // Case 4
//	|       "keypress"  // Case 5
//	|       "key"       // Case 6
type EndConditionListItem struct {
	Case  int
	Token xc.Token
}

func (n *EndConditionListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *EndConditionListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *EndConditionListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Endianess represents data reduced by productions:
//
//	Endianess:
//	        "big"
//	|       "default"  // Case 1
//	|       "little"   // Case 2
//	|       "middle"   // Case 3
//	|       "swap"     // Case 4
type Endianess struct {
	Case  int
	Token xc.Token
}

func (n *Endianess) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Endianess) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Endianess) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Eval represents data reduced by production:
//
//	Eval:
//	        "eval" Expression
type Eval struct {
	Expression *Expression
	Token      xc.Token
}

func (n *Eval) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Eval) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Eval) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Exit represents data reduced by productions:
//
//	Exit:
//	        "exit"
//	|       "exit" "error" Expression  // Case 1
//	|       "exit" "gnuplot"           // Case 2
type Exit struct {
	Case       int
	Expression *Expression
	Token      xc.Token
	Token2     xc.Token
}

func (n *Exit) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Exit) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Exit) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Expression represents data reduced by productions:
//
//	Expression:
//	        Expression "!=" Expression
//	|       Expression "&&" Expression                // Case 1
//	|       Expression "**" Expression                // Case 2
//	|       Expression "<<" Expression                // Case 3
//	|       Expression "<=" Expression                // Case 4
//	|       Expression "==" Expression                // Case 5
//	|       Expression ">=" Expression                // Case 6
//	|       Expression ">>" Expression                // Case 7
//	|       Expression "eq" Expression                // Case 8
//	|       Expression "ne" Expression                // Case 9
//	|       Expression "||" Expression                // Case 10
//	|       Expression '%' Expression                 // Case 11
//	|       Expression '&' Expression                 // Case 12
//	|       Expression '*' Expression                 // Case 13
//	|       Expression '+' Expression                 // Case 14
//	|       Expression '-' Expression                 // Case 15
//	|       Expression '.' Expression                 // Case 16
//	|       Expression '/' Expression                 // Case 17
//	|       Expression '<' Expression                 // Case 18
//	|       Expression '=' Expression                 // Case 19
//	|       Expression '>' Expression                 // Case 20
//	|       Expression '?' Expression ':' Expression  // Case 21
//	|       Expression '^' Expression                 // Case 22
//	|       Expression '|' Expression                 // Case 23
//	|       UnaryExpression                           // Case 24
type Expression struct {
	Case            int
	Expression      *Expression
	Expression2     *Expression
	Expression3     *Expression
	Token           xc.Token
	Token2          xc.Token
	UnaryExpression *UnaryExpression
}

func (n *Expression) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Expression) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Expression) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23:
		return n.Expression.Pos()
	case 24:
		return n.UnaryExpression.Pos()
	default:
		panic("internal error")
	}
}

// ExpressionList represents data reduced by productions:
//
//	ExpressionList:
//	        Expression
//	|       ExpressionList ',' Expression  // Case 1
type ExpressionList struct {
	Case           int
	Expression     *Expression
	ExpressionList *ExpressionList
	Token          xc.Token
}

func (n *ExpressionList) reverse() *ExpressionList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.ExpressionList
	for nb != nil {
		nc := nb.ExpressionList
		nb.ExpressionList = na
		na = nb
		nb = nc
	}
	n.ExpressionList = nil
	return na
}

func (n *ExpressionList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *ExpressionList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *ExpressionList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.Expression.Pos()
	case 1:
		return n.ExpressionList.Pos()
	default:
		panic("internal error")
	}
}

// ExpressionOpt represents data reduced by productions:
//
//	ExpressionOpt:
//	        /* empty */
//	|       Expression   // Case 1
type ExpressionOpt struct {
	Expression *Expression
}

func (n *ExpressionOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *ExpressionOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *ExpressionOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Expression.Pos()
}

// ExpressionOptList represents data reduced by productions:
//
//	ExpressionOptList:
//	        /* empty */
//	|       Expression                        // Case 1
//	|       ExpressionOptList ','             // Case 2
//	|       ExpressionOptList ',' Expression  // Case 3
type ExpressionOptList struct {
	Case              int
	Expression        *Expression
	ExpressionOptList *ExpressionOptList
	Token             xc.Token
}

func (n *ExpressionOptList) reverse() *ExpressionOptList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.ExpressionOptList
	for nb != nil {
		nc := nb.ExpressionOptList
		nb.ExpressionOptList = na
		na = nb
		nb = nc
	}
	n.ExpressionOptList = nil
	return na
}

func (n *ExpressionOptList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *ExpressionOptList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *ExpressionOptList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1:
		return n.Expression.Pos()
	case 2, 3:
		if p := n.ExpressionOptList.Pos(); p != 0 {
			return p
		}

		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// ExpressionUnitList represents data reduced by productions:
//
//	ExpressionUnitList:
//	        Expression
//	|       Expression Unit                         // Case 1
//	|       ExpressionUnitList ',' Expression       // Case 2
//	|       ExpressionUnitList ',' Expression Unit  // Case 3
type ExpressionUnitList struct {
	Case               int
	Expression         *Expression
	ExpressionUnitList *ExpressionUnitList
	Token              xc.Token
	Unit               *Unit
}

func (n *ExpressionUnitList) reverse() *ExpressionUnitList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.ExpressionUnitList
	for nb != nil {
		nc := nb.ExpressionUnitList
		nb.ExpressionUnitList = na
		na = nb
		nb = nc
	}
	n.ExpressionUnitList = nil
	return na
}

func (n *ExpressionUnitList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *ExpressionUnitList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *ExpressionUnitList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0, 1:
		return n.Expression.Pos()
	case 2, 3:
		return n.ExpressionUnitList.Pos()
	default:
		panic("internal error")
	}
}

// Fit represents data reduced by production:
//
//	Fit:
//	        "fit" RangesOpt Expression SimpleExpression DatafileModifiersListOpt FitOptionsListOpt "via" ExpressionList
type Fit struct {
	DatafileModifiersListOpt *DatafileModifiersListOpt
	Expression               *Expression
	ExpressionList           *ExpressionList
	FitOptionsListOpt        *FitOptionsListOpt
	RangesOpt                *RangesOpt
	SimpleExpression         *SimpleExpression
	Token                    xc.Token
	Token2                   xc.Token
}

func (n *Fit) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Fit) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Fit) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// FitOptionsList represents data reduced by productions:
//
//	FitOptionsList:
//	        FitOptionsListItem
//	|       FitOptionsList FitOptionsListItem  // Case 1
type FitOptionsList struct {
	Case               int
	FitOptionsList     *FitOptionsList
	FitOptionsListItem *FitOptionsListItem
}

func (n *FitOptionsList) reverse() *FitOptionsList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.FitOptionsList
	for nb != nil {
		nc := nb.FitOptionsList
		nb.FitOptionsList = na
		na = nb
		nb = nc
	}
	n.FitOptionsList = nil
	return na
}

func (n *FitOptionsList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *FitOptionsList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *FitOptionsList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.FitOptionsList.Pos()
	case 0:
		return n.FitOptionsListItem.Pos()
	default:
		panic("internal error")
	}
}

// FitOptionsListItem represents data reduced by productions:
//
//	FitOptionsListItem:
//	        "unitweights"
//	|       "xerror"                 // Case 1
//	|       "xyerror"                // Case 2
//	|       "yerror"                 // Case 3
//	|       "errors" IdentifierList  // Case 4
type FitOptionsListItem struct {
	Case           int
	IdentifierList *IdentifierList
	Token          xc.Token
}

func (n *FitOptionsListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *FitOptionsListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *FitOptionsListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// FitOptionsListOpt represents data reduced by productions:
//
//	FitOptionsListOpt:
//	        /* empty */
//	|       FitOptionsList  // Case 1
type FitOptionsListOpt struct {
	FitOptionsList *FitOptionsList
}

func (n *FitOptionsListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *FitOptionsListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *FitOptionsListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.FitOptionsList.Pos()
}

// FunctionDefinition represents data reduced by production:
//
//	FunctionDefinition:
//	        IDENTIFIER '(' IdentifierList ')' '=' Expression
type FunctionDefinition struct {
	Expression     *Expression
	IdentifierList *IdentifierList
	Token          xc.Token
	Token2         xc.Token
	Token3         xc.Token
	Token4         xc.Token
}

func (n *FunctionDefinition) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *FunctionDefinition) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *FunctionDefinition) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// IdentifierList represents data reduced by productions:
//
//	IdentifierList:
//	        IDENTIFIER
//	|       IdentifierList ',' IDENTIFIER  // Case 1
type IdentifierList struct {
	Case           int
	IdentifierList *IdentifierList
	Token          xc.Token
	Token2         xc.Token
}

func (n *IdentifierList) reverse() *IdentifierList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.IdentifierList
	for nb != nil {
		nc := nb.IdentifierList
		nb.IdentifierList = na
		na = nb
		nb = nc
	}
	n.IdentifierList = nil
	return na
}

func (n *IdentifierList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *IdentifierList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *IdentifierList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.IdentifierList.Pos()
	case 0:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// IdentifierOptList represents data reduced by productions:
//
//	IdentifierOptList:
//	        /* empty */
//	|       IDENTIFIER                        // Case 1
//	|       IdentifierOptList ','             // Case 2
//	|       IdentifierOptList ',' IDENTIFIER  // Case 3
type IdentifierOptList struct {
	Case              int
	IdentifierOptList *IdentifierOptList
	Token             xc.Token
	Token2            xc.Token
}

func (n *IdentifierOptList) reverse() *IdentifierOptList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.IdentifierOptList
	for nb != nil {
		nc := nb.IdentifierOptList
		nb.IdentifierOptList = na
		na = nb
		nb = nc
	}
	n.IdentifierOptList = nil
	return na
}

func (n *IdentifierOptList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *IdentifierOptList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *IdentifierOptList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 2, 3:
		if p := n.IdentifierOptList.Pos(); p != 0 {
			return p
		}

		return n.Token.Pos()
	case 1:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// If represents data reduced by productions:
//
//	If:
//	        IfHeader
//	|       IfHeader "else" '{' StatementList '}'  // Case 1
//	|       "if" '(' Expression ')' Statement      // Case 2
type If struct {
	Case          int
	Expression    *Expression
	IfHeader      *IfHeader
	Statement     *Statement
	StatementList *StatementList
	Token         xc.Token
	Token2        xc.Token
	Token3        xc.Token
}

func (n *If) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *If) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *If) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0, 1:
		return n.IfHeader.Pos()
	case 2:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// IfHeader represents data reduced by production:
//
//	IfHeader:
//	        "if" '(' Expression ')' '{' StatementList '}'
type IfHeader struct {
	Expression    *Expression
	StatementList *StatementList
	Token         xc.Token
	Token2        xc.Token
	Token3        xc.Token
	Token4        xc.Token
	Token5        xc.Token
}

func (n *IfHeader) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *IfHeader) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *IfHeader) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Import represents data reduced by production:
//
//	Import:
//	        "import" IDENTIFIER '(' IdentifierList ')' "from" Expression
type Import struct {
	Expression     *Expression
	IdentifierList *IdentifierList
	Token          xc.Token
	Token2         xc.Token
	Token3         xc.Token
	Token4         xc.Token
	Token5         xc.Token
}

func (n *Import) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Import) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Import) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// IterationSpecifier represents data reduced by productions:
//
//	IterationSpecifier:
//	        "for" '[' Expression ':' Expression ':' Expression ']'
//	|       "for" '[' Expression ':' Expression ']'                 // Case 1
//	|       "for" '[' Expression ':' '*' ']'                        // Case 2
//	|       "for" '[' Expression "in" Expression ']'                // Case 3
type IterationSpecifier struct {
	Case        int
	Expression  *Expression
	Expression2 *Expression
	Expression3 *Expression
	Token       xc.Token
	Token2      xc.Token
	Token3      xc.Token
	Token4      xc.Token
	Token5      xc.Token
}

func (n *IterationSpecifier) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *IterationSpecifier) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *IterationSpecifier) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// IterationSpecifierOpt represents data reduced by productions:
//
//	IterationSpecifierOpt:
//	        /* empty */
//	|       IterationSpecifier  // Case 1
type IterationSpecifierOpt struct {
	IterationSpecifier *IterationSpecifier
}

func (n *IterationSpecifierOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *IterationSpecifierOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *IterationSpecifierOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.IterationSpecifier.Pos()
}

// LineStyleList represents data reduced by productions:
//
//	LineStyleList:
//	        LineStyleListItem
//	|       LineStyleList LineStyleListItem  // Case 1
type LineStyleList struct {
	Case              int
	LineStyleList     *LineStyleList
	LineStyleListItem *LineStyleListItem
}

func (n *LineStyleList) reverse() *LineStyleList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.LineStyleList
	for nb != nil {
		nc := nb.LineStyleList
		nb.LineStyleList = na
		na = nb
		nb = nc
	}
	n.LineStyleList = nil
	return na
}

func (n *LineStyleList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *LineStyleList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *LineStyleList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.LineStyleList.Pos()
	case 0:
		return n.LineStyleListItem.Pos()
	default:
		panic("internal error")
	}
}

// LineStyleListItem represents data reduced by productions:
//
//	LineStyleListItem:
//	        "linestyle" Expression
//	|       "ls" Expression              // Case 1
//	|       "linetype" ColorSpec         // Case 2
//	|       "lt" ColorSpec               // Case 3
//	|       "linewidth" Expression       // Case 4
//	|       "lw" Expression              // Case 5
//	|       "linecolor" ColorSpec        // Case 6
//	|       "lc" ColorSpec               // Case 7
//	|       "pointtype" Expression       // Case 8
//	|       "pt" Expression              // Case 9
//	|       "pointsize" Expression       // Case 10
//	|       "ps" Expression              // Case 11
//	|       "fill" SetStyleFillSpecList  // Case 12
//	|       "fs" SetStyleFillSpecList    // Case 13
//	|       "nohidden3d"                 // Case 14
//	|       "nocontours"                 // Case 15
//	|       "nosurface"                  // Case 16
//	|       "palette"                    // Case 17
//	|       "dashtype" DashTypeSpec      // Case 18
//	|       "dt" DashTypeSpec            // Case 19
//	|       "pi" Expression              // Case 20
//	|       "pointinterval" Expression   // Case 21
//	|       "tc" ColorSpec               // Case 22
type LineStyleListItem struct {
	Case                 int
	ColorSpec            *ColorSpec
	DashTypeSpec         *DashTypeSpec
	Expression           *Expression
	SetStyleFillSpecList *SetStyleFillSpecList
	Token                xc.Token
}

func (n *LineStyleListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *LineStyleListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *LineStyleListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Load represents data reduced by production:
//
//	Load:
//	        "load" Expression
type Load struct {
	Expression *Expression
	Token      xc.Token
}

func (n *Load) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Load) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Load) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Lower represents data reduced by productions:
//
//	Lower:
//	        "lower"
//	|       "lower" PlotWindow  // Case 1
type Lower struct {
	Case       int
	PlotWindow *PlotWindow
	Token      xc.Token
}

func (n *Lower) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Lower) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Lower) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// NamedDataBlock represents data reduced by production:
//
//	NamedDataBlock:
//	        IDENTIFIER "<<" IDENTIFIER
type NamedDataBlock struct {
	Data   []byte // The content of the named data block.
	Token  xc.Token
	Token2 xc.Token
	Token3 xc.Token
}

func (n *NamedDataBlock) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *NamedDataBlock) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *NamedDataBlock) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// NonParenthesizedExpression represents data reduced by productions:
//
//	NonParenthesizedExpression:
//	        NonParenthesizedExpression "!=" NonParenthesizedExpression
//	|       NonParenthesizedExpression "&&" NonParenthesizedExpression                                // Case 1
//	|       NonParenthesizedExpression "**" NonParenthesizedExpression                                // Case 2
//	|       NonParenthesizedExpression "<<" NonParenthesizedExpression                                // Case 3
//	|       NonParenthesizedExpression "<=" NonParenthesizedExpression                                // Case 4
//	|       NonParenthesizedExpression "==" NonParenthesizedExpression                                // Case 5
//	|       NonParenthesizedExpression ">=" NonParenthesizedExpression                                // Case 6
//	|       NonParenthesizedExpression ">>" NonParenthesizedExpression                                // Case 7
//	|       NonParenthesizedExpression "eq" NonParenthesizedExpression                                // Case 8
//	|       NonParenthesizedExpression "ne" NonParenthesizedExpression                                // Case 9
//	|       NonParenthesizedExpression "||" NonParenthesizedExpression                                // Case 10
//	|       NonParenthesizedExpression '%' NonParenthesizedExpression                                 // Case 11
//	|       NonParenthesizedExpression '&' NonParenthesizedExpression                                 // Case 12
//	|       NonParenthesizedExpression '*' NonParenthesizedExpression                                 // Case 13
//	|       NonParenthesizedExpression '+' NonParenthesizedExpression                                 // Case 14
//	|       NonParenthesizedExpression '-' NonParenthesizedExpression                                 // Case 15
//	|       NonParenthesizedExpression '.' NonParenthesizedExpression                                 // Case 16
//	|       NonParenthesizedExpression '/' NonParenthesizedExpression                                 // Case 17
//	|       NonParenthesizedExpression '<' NonParenthesizedExpression                                 // Case 18
//	|       NonParenthesizedExpression '=' NonParenthesizedExpression                                 // Case 19
//	|       NonParenthesizedExpression '>' NonParenthesizedExpression                                 // Case 20
//	|       NonParenthesizedExpression '?' NonParenthesizedExpression ':' NonParenthesizedExpression  // Case 21
//	|       NonParenthesizedExpression '^' NonParenthesizedExpression                                 // Case 22
//	|       NonParenthesizedExpression '|' NonParenthesizedExpression                                 // Case 23
//	|       UnaryNonParenthesizedExpression                                                           // Case 24
type NonParenthesizedExpression struct {
	Case                            int
	NonParenthesizedExpression      *NonParenthesizedExpression
	NonParenthesizedExpression2     *NonParenthesizedExpression
	NonParenthesizedExpression3     *NonParenthesizedExpression
	Token                           xc.Token
	Token2                          xc.Token
	UnaryNonParenthesizedExpression *UnaryNonParenthesizedExpression
}

func (n *NonParenthesizedExpression) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *NonParenthesizedExpression) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *NonParenthesizedExpression) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23:
		return n.NonParenthesizedExpression.Pos()
	case 24:
		return n.UnaryNonParenthesizedExpression.Pos()
	default:
		panic("internal error")
	}
}

// NonParenthesizedOperand represents data reduced by productions:
//
//	NonParenthesizedOperand:
//	        IDENTIFIER
//	|       NUM_LIT                                           // Case 1
//	|       STRING_LIT                                        // Case 2
//	|       ComplexNumber                                     // Case 3
//	|       SUM '[' Expression ':' Expression ']' Expression  // Case 4
type NonParenthesizedOperand struct {
	Case          int
	ComplexNumber *ComplexNumber
	Expression    *Expression
	Expression2   *Expression
	Expression3   *Expression
	Token         xc.Token
	Token2        xc.Token
	Token3        xc.Token
	Token4        xc.Token
}

func (n *NonParenthesizedOperand) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *NonParenthesizedOperand) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *NonParenthesizedOperand) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 3:
		return n.ComplexNumber.Pos()
	case 0, 1, 2, 4:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// NonStringExpression represents data reduced by productions:
//
//	NonStringExpression:
//	        NonStringExpression "!=" NonStringExpression
//	|       NonStringExpression "&&" NonStringExpression                         // Case 1
//	|       NonStringExpression "**" NonStringExpression                         // Case 2
//	|       NonStringExpression "<<" NonStringExpression                         // Case 3
//	|       NonStringExpression "<=" NonStringExpression                         // Case 4
//	|       NonStringExpression "==" NonStringExpression                         // Case 5
//	|       NonStringExpression ">=" NonStringExpression                         // Case 6
//	|       NonStringExpression ">>" NonStringExpression                         // Case 7
//	|       NonStringExpression "eq" NonStringExpression                         // Case 8
//	|       NonStringExpression "ne" NonStringExpression                         // Case 9
//	|       NonStringExpression "||" NonStringExpression                         // Case 10
//	|       NonStringExpression '%' NonStringExpression                          // Case 11
//	|       NonStringExpression '&' NonStringExpression                          // Case 12
//	|       NonStringExpression '*' NonStringExpression                          // Case 13
//	|       NonStringExpression '+' NonStringExpression                          // Case 14
//	|       NonStringExpression '-' NonStringExpression                          // Case 15
//	|       NonStringExpression '.' NonStringExpression                          // Case 16
//	|       NonStringExpression '/' NonStringExpression                          // Case 17
//	|       NonStringExpression '<' NonStringExpression                          // Case 18
//	|       NonStringExpression '=' NonStringExpression                          // Case 19
//	|       NonStringExpression '>' NonStringExpression                          // Case 20
//	|       NonStringExpression '?' NonStringExpression ':' NonStringExpression  // Case 21
//	|       NonStringExpression '^' NonStringExpression                          // Case 22
//	|       NonStringExpression '|' NonStringExpression                          // Case 23
//	|       UnaryNonStringExpression                                             // Case 24
type NonStringExpression struct {
	Case                     int
	NonStringExpression      *NonStringExpression
	NonStringExpression2     *NonStringExpression
	NonStringExpression3     *NonStringExpression
	Token                    xc.Token
	Token2                   xc.Token
	UnaryNonStringExpression *UnaryNonStringExpression
}

func (n *NonStringExpression) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *NonStringExpression) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *NonStringExpression) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23:
		return n.NonStringExpression.Pos()
	case 24:
		return n.UnaryNonStringExpression.Pos()
	default:
		panic("internal error")
	}
}

// NonStringOperand represents data reduced by productions:
//
//	NonStringOperand:
//	        '(' Expression ')'
//	|       IDENTIFIER          // Case 1
//	|       NUM_LIT             // Case 2
//	|       ComplexNumber       // Case 3
type NonStringOperand struct {
	Case          int
	ComplexNumber *ComplexNumber
	Expression    *Expression
	Token         xc.Token
	Token2        xc.Token
}

func (n *NonStringOperand) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *NonStringOperand) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *NonStringOperand) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 3:
		return n.ComplexNumber.Pos()
	case 0, 1, 2:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// Operand represents data reduced by productions:
//
//	Operand:
//	        '(' ExpressionList ')'
//	|       IDENTIFIER                                        // Case 1
//	|       NUM_LIT                                           // Case 2
//	|       STRING_LIT                                        // Case 3
//	|       ComplexNumber                                     // Case 4
//	|       SUM '[' Expression ':' Expression ']' Expression  // Case 5
type Operand struct {
	scope          *Bindings
	Case           int
	ComplexNumber  *ComplexNumber
	Expression     *Expression
	Expression2    *Expression
	Expression3    *Expression
	ExpressionList *ExpressionList
	Token          xc.Token
	Token2         xc.Token
	Token3         xc.Token
	Token4         xc.Token
}

func (n *Operand) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Operand) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Operand) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 4:
		return n.ComplexNumber.Pos()
	case 0, 1, 2, 3, 5:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// OriginList represents data reduced by productions:
//
//	OriginList:
//	        '(' ExpressionList ')'
//	|       OriginList ':' '(' ExpressionList ')'  // Case 1
type OriginList struct {
	Case           int
	ExpressionList *ExpressionList
	OriginList     *OriginList
	Token          xc.Token
	Token2         xc.Token
	Token3         xc.Token
}

func (n *OriginList) reverse() *OriginList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.OriginList
	for nb != nil {
		nc := nb.OriginList
		nb.OriginList = na
		na = nb
		nb = nc
	}
	n.OriginList = nil
	return na
}

func (n *OriginList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *OriginList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *OriginList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.OriginList.Pos()
	case 0:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// Pause represents data reduced by productions:
//
//	Pause:
//	        "pause" "mouse" EndConditionList
//	|       "pause" "mouse" EndConditionList Expression  // Case 1
//	|       "pause" "mouse" Expression                   // Case 2
//	|       "pause" Expression                           // Case 3
//	|       "pause" Expression SimpleExpression          // Case 4
type Pause struct {
	Case             int
	EndConditionList *EndConditionList
	Expression       *Expression
	SimpleExpression *SimpleExpression
	Token            xc.Token
	Token2           xc.Token
}

func (n *Pause) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Pause) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Pause) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Plot represents data reduced by production:
//
//	Plot:
//	        "plot" PlotElementList
type Plot struct {
	Data            [][]byte // Content of the inline data block(s).
	PlotElementList *PlotElementList
	Token           xc.Token
}

func (n *Plot) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Plot) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Plot) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// PlotElementAxes represents data reduced by productions:
//
//	PlotElementAxes:
//	        "axes" "x1y1"
//	|       "axes" "x1y2"  // Case 1
//	|       "axes" "x2y1"  // Case 2
//	|       "axes" "x2y2"  // Case 3
type PlotElementAxes struct {
	Case   int
	Token  xc.Token
	Token2 xc.Token
}

func (n *PlotElementAxes) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotElementAxes) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementAxes) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// PlotElementList represents data reduced by productions:
//
//	PlotElementList:
//	        PlotElementListItem
//	|       PlotElementList ',' PlotElementListItem  // Case 1
type PlotElementList struct {
	Case                int
	PlotElementList     *PlotElementList
	PlotElementListItem *PlotElementListItem
	Token               xc.Token
}

func (n *PlotElementList) reverse() *PlotElementList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.PlotElementList
	for nb != nil {
		nc := nb.PlotElementList
		nb.PlotElementList = na
		na = nb
		nb = nc
	}
	n.PlotElementList = nil
	return na
}

func (n *PlotElementList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *PlotElementList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.PlotElementList.Pos()
	case 0:
		return n.PlotElementListItem.Pos()
	default:
		panic("internal error")
	}
}

// PlotElementListItem represents data reduced by productions:
//
//	PlotElementListItem:
//	        "newhistogram" PlotNewhistogramSpecListOpt
//	|       IterationSpecifierOpt RangesOpt Expression PlotElementModifiersListOpt                  // Case 1
//	|       IterationSpecifierOpt RangesOpt "sample" Ranges Expression PlotElementModifiersListOpt  // Case 2
type PlotElementListItem struct {
	Case                        int
	Expression                  *Expression
	IterationSpecifierOpt       *IterationSpecifierOpt
	PlotElementModifiersListOpt *PlotElementModifiersListOpt
	PlotNewhistogramSpecListOpt *PlotNewhistogramSpecListOpt
	Ranges                      *Ranges
	RangesOpt                   *RangesOpt
	Token                       xc.Token
}

func (n *PlotElementListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotElementListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		if p := n.IterationSpecifierOpt.Pos(); p != 0 {
			return p
		}

		if p := n.RangesOpt.Pos(); p != 0 {
			return p
		}

		return n.Expression.Pos()
	case 2:
		if p := n.IterationSpecifierOpt.Pos(); p != 0 {
			return p
		}

		if p := n.RangesOpt.Pos(); p != 0 {
			return p
		}

		return n.Token.Pos()
	case 0:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// PlotElementModifiersList represents data reduced by productions:
//
//	PlotElementModifiersList:
//	        PlotElementModifiersListItem
//	|       PlotElementModifiersList PlotElementModifiersListItem  // Case 1
type PlotElementModifiersList struct {
	isBinary                     bool
	Case                         int
	PlotElementModifiersList     *PlotElementModifiersList
	PlotElementModifiersListItem *PlotElementModifiersListItem
}

func (n *PlotElementModifiersList) reverse() *PlotElementModifiersList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.PlotElementModifiersList
	for nb != nil {
		nc := nb.PlotElementModifiersList
		nb.PlotElementModifiersList = na
		na = nb
		nb = nc
	}
	n.PlotElementModifiersList = nil
	return na
}

func (n *PlotElementModifiersList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *PlotElementModifiersList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementModifiersList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.PlotElementModifiersList.Pos()
	case 0:
		return n.PlotElementModifiersListItem.Pos()
	default:
		panic("internal error")
	}
}

// PlotElementModifiersListItem represents data reduced by productions:
//
//	PlotElementModifiersListItem:
//	        PlotElementAxes
//	|       PlotElementTitle           // Case 1
//	|       "w" PlotElementStyle       // Case 2
//	|       "with" PlotElementStyle    // Case 3
//	|       LineStyleListItem          // Case 4
//	|       "whiskerbars"              // Case 5
//	|       DatafileModifiersListItem  // Case 6
type PlotElementModifiersListItem struct {
	isBinary                  bool
	Case                      int
	DatafileModifiersListItem *DatafileModifiersListItem
	LineStyleListItem         *LineStyleListItem
	PlotElementAxes           *PlotElementAxes
	PlotElementStyle          *PlotElementStyle
	PlotElementTitle          *PlotElementTitle
	Token                     xc.Token
}

func (n *PlotElementModifiersListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotElementModifiersListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementModifiersListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 6:
		return n.DatafileModifiersListItem.Pos()
	case 4:
		return n.LineStyleListItem.Pos()
	case 0:
		return n.PlotElementAxes.Pos()
	case 1:
		return n.PlotElementTitle.Pos()
	case 2, 3, 5:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// PlotElementModifiersListOpt represents data reduced by productions:
//
//	PlotElementModifiersListOpt:
//	        /* empty */
//	|       PlotElementModifiersList  // Case 1
type PlotElementModifiersListOpt struct {
	PlotElementModifiersList *PlotElementModifiersList
}

func (n *PlotElementModifiersListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotElementModifiersListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementModifiersListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.PlotElementModifiersList.Pos()
}

// PlotElementStyle represents data reduced by productions:
//
//	PlotElementStyle:
//	        "boxerrorbars"
//	|       "boxes"                                                 // Case 1
//	|       "boxplot"                                               // Case 2
//	|       "boxxyerrorbars"                                        // Case 3
//	|       "candlesticks"                                          // Case 4
//	|       "circles"                                               // Case 5
//	|       "dots"                                                  // Case 6
//	|       "ellipses" UnitsOpt                                     // Case 7
//	|       "e"                                                     // Case 8
//	|       "errorbars"                                             // Case 9
//	|       "errorlines"                                            // Case 10
//	|       "filledcurves" PlotElementStyleFilledcurvesSpecListOpt  // Case 11
//	|       "financebars"                                           // Case 12
//	|       "fsteps"                                                // Case 13
//	|       "histeps"                                               // Case 14
//	|       "his" PlotElementStyleHistogramsListOpt                 // Case 15
//	|       "histogram" PlotElementStyleHistogramsListOpt           // Case 16
//	|       "histograms" PlotElementStyleHistogramsListOpt          // Case 17
//	|       "image"                                                 // Case 18
//	|       "image" "pixels"                                        // Case 19
//	|       "impulses"                                              // Case 20
//	|       "labels"                                                // Case 21
//	|       "labels" PlotElementStyleLabelsSpecList                 // Case 22
//	|       "l"                                                     // Case 23
//	|       "line"                                                  // Case 24
//	|       "lines"                                                 // Case 25
//	|       "lp"                                                    // Case 26
//	|       "linespoints"                                           // Case 27
//	|       "parallel"                                              // Case 28
//	|       "parallelaxes"                                          // Case 29
//	|       "pm3d"                                                  // Case 30
//	|       "points"                                                // Case 31
//	|       "rgbalpha"                                              // Case 32
//	|       "rgbimage"                                              // Case 33
//	|       "steps"                                                 // Case 34
//	|       "surface"                                               // Case 35
//	|       "vectors" PlotElementStyleVectorsSpecOpt                // Case 36
//	|       "xerr"                                                  // Case 37
//	|       "xerrorbar"                                             // Case 38
//	|       "xerrorlines"                                           // Case 39
//	|       "xyerr"                                                 // Case 40
//	|       "xyerrorbars"                                           // Case 41
//	|       "xyerrorlines"                                          // Case 42
//	|       "yerr"                                                  // Case 43
//	|       "yerrorbars"                                            // Case 44
//	|       "yerrorlines"                                           // Case 45
type PlotElementStyle struct {
	Case                                    int
	PlotElementStyleFilledcurvesSpecListOpt *PlotElementStyleFilledcurvesSpecListOpt
	PlotElementStyleHistogramsListOpt       *PlotElementStyleHistogramsListOpt
	PlotElementStyleLabelsSpecList          *PlotElementStyleLabelsSpecList
	PlotElementStyleVectorsSpecOpt          *PlotElementStyleVectorsSpecOpt
	Token                                   xc.Token
	Token2                                  xc.Token
	UnitsOpt                                *UnitsOpt
}

func (n *PlotElementStyle) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotElementStyle) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementStyle) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// PlotElementStyleFilledcurvesSpecList represents data reduced by productions:
//
//	PlotElementStyleFilledcurvesSpecList:
//	        PlotElementStyleFilledcurvesSpecListItem
//	|       PlotElementStyleFilledcurvesSpecList PlotElementStyleFilledcurvesSpecListItem  // Case 1
type PlotElementStyleFilledcurvesSpecList struct {
	Case                                     int
	PlotElementStyleFilledcurvesSpecList     *PlotElementStyleFilledcurvesSpecList
	PlotElementStyleFilledcurvesSpecListItem *PlotElementStyleFilledcurvesSpecListItem
}

func (n *PlotElementStyleFilledcurvesSpecList) reverse() *PlotElementStyleFilledcurvesSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.PlotElementStyleFilledcurvesSpecList
	for nb != nil {
		nc := nb.PlotElementStyleFilledcurvesSpecList
		nb.PlotElementStyleFilledcurvesSpecList = na
		na = nb
		nb = nc
	}
	n.PlotElementStyleFilledcurvesSpecList = nil
	return na
}

func (n *PlotElementStyleFilledcurvesSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *PlotElementStyleFilledcurvesSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementStyleFilledcurvesSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.PlotElementStyleFilledcurvesSpecList.Pos()
	case 0:
		return n.PlotElementStyleFilledcurvesSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// PlotElementStyleFilledcurvesSpecListItem represents data reduced by productions:
//
//	PlotElementStyleFilledcurvesSpecListItem:
//	        "closed"
//	|       "above"                             // Case 1
//	|       "below"                             // Case 2
//	|       "x1"                                // Case 3
//	|       "x2"                                // Case 4
//	|       "y"                                 // Case 5
//	|       "y1"                                // Case 6
//	|       "y2"                                // Case 7
//	|       "r"                                 // Case 8
//	|       "x1" '=' Expression                 // Case 9
//	|       "x2" '=' Expression                 // Case 10
//	|       "y" '=' Expression                  // Case 11
//	|       "y1" '=' Expression                 // Case 12
//	|       "y2" '=' Expression                 // Case 13
//	|       "r" '=' Expression                  // Case 14
//	|       "xy" '=' Expression ',' Expression  // Case 15
type PlotElementStyleFilledcurvesSpecListItem struct {
	Case        int
	Expression  *Expression
	Expression2 *Expression
	Token       xc.Token
	Token2      xc.Token
	Token3      xc.Token
}

func (n *PlotElementStyleFilledcurvesSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotElementStyleFilledcurvesSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementStyleFilledcurvesSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// PlotElementStyleFilledcurvesSpecListOpt represents data reduced by productions:
//
//	PlotElementStyleFilledcurvesSpecListOpt:
//	        /* empty */
//	|       PlotElementStyleFilledcurvesSpecList  // Case 1
type PlotElementStyleFilledcurvesSpecListOpt struct {
	PlotElementStyleFilledcurvesSpecList *PlotElementStyleFilledcurvesSpecList
}

func (n *PlotElementStyleFilledcurvesSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotElementStyleFilledcurvesSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementStyleFilledcurvesSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.PlotElementStyleFilledcurvesSpecList.Pos()
}

// PlotElementStyleHistogramsList represents data reduced by productions:
//
//	PlotElementStyleHistogramsList:
//	        PlotElementStyleHistogramsListItem
//	|       PlotElementStyleHistogramsList PlotElementStyleHistogramsListItem  // Case 1
type PlotElementStyleHistogramsList struct {
	Case                               int
	PlotElementStyleHistogramsList     *PlotElementStyleHistogramsList
	PlotElementStyleHistogramsListItem *PlotElementStyleHistogramsListItem
}

func (n *PlotElementStyleHistogramsList) reverse() *PlotElementStyleHistogramsList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.PlotElementStyleHistogramsList
	for nb != nil {
		nc := nb.PlotElementStyleHistogramsList
		nb.PlotElementStyleHistogramsList = na
		na = nb
		nb = nc
	}
	n.PlotElementStyleHistogramsList = nil
	return na
}

func (n *PlotElementStyleHistogramsList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *PlotElementStyleHistogramsList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementStyleHistogramsList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.PlotElementStyleHistogramsList.Pos()
	case 0:
		return n.PlotElementStyleHistogramsListItem.Pos()
	default:
		panic("internal error")
	}
}

// PlotElementStyleHistogramsListItem represents data reduced by productions:
//
//	PlotElementStyleHistogramsListItem:
//	        "cluster"
//	|       "clustered"                        // Case 1
//	|       "gap" Expression                   // Case 2
//	|       "gap" Expression SimpleExpression  // Case 3
//	|       "errorbars"                        // Case 4
//	|       "rows"                             // Case 5
//	|       "rowstacked"                       // Case 6
//	|       "columns"                          // Case 7
//	|       "columnstacked"                    // Case 8
//	|       "title"                            // Case 9
//	|       "font" Expression                  // Case 10
//	|       "tc" ColorSpec                     // Case 11
//	|       "textcolor" ColorSpec              // Case 12
//	|       "offset" Position                  // Case 13
//	|       "boxed"                            // Case 14
type PlotElementStyleHistogramsListItem struct {
	Case             int
	ColorSpec        *ColorSpec
	Expression       *Expression
	Position         *Position
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *PlotElementStyleHistogramsListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotElementStyleHistogramsListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementStyleHistogramsListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// PlotElementStyleHistogramsListOpt represents data reduced by productions:
//
//	PlotElementStyleHistogramsListOpt:
//	        /* empty */
//	|       PlotElementStyleHistogramsList  // Case 1
type PlotElementStyleHistogramsListOpt struct {
	PlotElementStyleHistogramsList *PlotElementStyleHistogramsList
}

func (n *PlotElementStyleHistogramsListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotElementStyleHistogramsListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementStyleHistogramsListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.PlotElementStyleHistogramsList.Pos()
}

// PlotElementStyleLabelsSpecList represents data reduced by productions:
//
//	PlotElementStyleLabelsSpecList:
//	        PlotElementStyleLabelsSpecListItem
//	|       PlotElementStyleLabelsSpecList PlotElementStyleLabelsSpecListItem  // Case 1
type PlotElementStyleLabelsSpecList struct {
	Case                               int
	PlotElementStyleLabelsSpecList     *PlotElementStyleLabelsSpecList
	PlotElementStyleLabelsSpecListItem *PlotElementStyleLabelsSpecListItem
}

func (n *PlotElementStyleLabelsSpecList) reverse() *PlotElementStyleLabelsSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.PlotElementStyleLabelsSpecList
	for nb != nil {
		nc := nb.PlotElementStyleLabelsSpecList
		nb.PlotElementStyleLabelsSpecList = na
		na = nb
		nb = nc
	}
	n.PlotElementStyleLabelsSpecList = nil
	return na
}

func (n *PlotElementStyleLabelsSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *PlotElementStyleLabelsSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementStyleLabelsSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.PlotElementStyleLabelsSpecList.Pos()
	case 0:
		return n.PlotElementStyleLabelsSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// PlotElementStyleLabelsSpecListItem represents data reduced by productions:
//
//	PlotElementStyleLabelsSpecListItem:
//	        "at" Position
//	|       "left"                              // Case 1
//	|       "center"                            // Case 2
//	|       "right"                             // Case 3
//	|       "norotate"                          // Case 4
//	|       "rotate"                            // Case 5
//	|       "rotate" "by" Expression            // Case 6
//	|       "font" Expression                   // Case 7
//	|       "noenhanced"                        // Case 8
//	|       "front"                             // Case 9
//	|       "back"                              // Case 10
//	|       "textcolor" ColorSpec               // Case 11
//	|       "point"                             // Case 12
//	|       "nopoint"                           // Case 13
//	|       "offset" Expression                 // Case 14
//	|       "offset" Expression ',' Expression  // Case 15
//	|       "boxed"                             // Case 16
//	|       "hypertext"                         // Case 17
//	|       LineStyleListItem                   // Case 18
//	|       "notitle" ExpressionOpt             // Case 19
type PlotElementStyleLabelsSpecListItem struct {
	Case              int
	ColorSpec         *ColorSpec
	Expression        *Expression
	Expression2       *Expression
	ExpressionOpt     *ExpressionOpt
	LineStyleListItem *LineStyleListItem
	Position          *Position
	Token             xc.Token
	Token2            xc.Token
}

func (n *PlotElementStyleLabelsSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotElementStyleLabelsSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementStyleLabelsSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 18:
		return n.LineStyleListItem.Pos()
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// PlotElementStyleVectorsSpecOpt represents data reduced by productions:
//
//	PlotElementStyleVectorsSpecOpt:
//	        /* empty */
//	|       "arrowstyle" "variable"  // Case 1
//	|       "arrowstyle" Expression  // Case 2
//	|       "as" "variable"          // Case 3
//	|       "as" Expression          // Case 4
//	|       ArrowStyleList           // Case 5
type PlotElementStyleVectorsSpecOpt struct {
	ArrowStyleList *ArrowStyleList
	Case           int
	Expression     *Expression
	Token          xc.Token
	Token2         xc.Token
}

func (n *PlotElementStyleVectorsSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotElementStyleVectorsSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementStyleVectorsSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 5:
		return n.ArrowStyleList.Pos()
	case 1, 2, 3, 4:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// PlotElementTitle represents data reduced by productions:
//
//	PlotElementTitle:
//	        "notitle" ExpressionOpt
//	|       "columnheader" PlotElementTitlePosOpt  // Case 1
//	|       "t" PlotElementTitleSpec               // Case 2
//	|       "ti" PlotElementTitleSpec              // Case 3
//	|       "title" PlotElementTitleSpec           // Case 4
type PlotElementTitle struct {
	Case                   int
	ExpressionOpt          *ExpressionOpt
	PlotElementTitlePosOpt *PlotElementTitlePosOpt
	PlotElementTitleSpec   *PlotElementTitleSpec
	Token                  xc.Token
}

func (n *PlotElementTitle) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotElementTitle) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementTitle) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// PlotElementTitlePosOpt represents data reduced by productions:
//
//	PlotElementTitlePosOpt:
//	        /* empty */
//	|       "at" "beginning"  // Case 1
//	|       "at" "end"        // Case 2
type PlotElementTitlePosOpt struct {
	Case   int
	Token  xc.Token
	Token2 xc.Token
}

func (n *PlotElementTitlePosOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotElementTitlePosOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementTitlePosOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1, 2:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// PlotElementTitleSpec represents data reduced by productions:
//
//	PlotElementTitleSpec:
//	        Expression PlotElementTitlePosOpt
//	|       "column" '(' Expression ')' PlotElementTitlePosOpt        // Case 1
//	|       "columnheader" '(' Expression ')' PlotElementTitlePosOpt  // Case 2
type PlotElementTitleSpec struct {
	Case                   int
	Expression             *Expression
	PlotElementTitlePosOpt *PlotElementTitlePosOpt
	Token                  xc.Token
	Token2                 xc.Token
	Token3                 xc.Token
}

func (n *PlotElementTitleSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotElementTitleSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotElementTitleSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.Expression.Pos()
	case 1, 2:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// PlotNewhistogramSpecList represents data reduced by productions:
//
//	PlotNewhistogramSpecList:
//	        PlotNewhistogramSpecListItem
//	|       PlotNewhistogramSpecList PlotNewhistogramSpecListItem  // Case 1
type PlotNewhistogramSpecList struct {
	Case                         int
	PlotNewhistogramSpecList     *PlotNewhistogramSpecList
	PlotNewhistogramSpecListItem *PlotNewhistogramSpecListItem
}

func (n *PlotNewhistogramSpecList) reverse() *PlotNewhistogramSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.PlotNewhistogramSpecList
	for nb != nil {
		nc := nb.PlotNewhistogramSpecList
		nb.PlotNewhistogramSpecList = na
		na = nb
		nb = nc
	}
	n.PlotNewhistogramSpecList = nil
	return na
}

func (n *PlotNewhistogramSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *PlotNewhistogramSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotNewhistogramSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.PlotNewhistogramSpecList.Pos()
	case 0:
		return n.PlotNewhistogramSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// PlotNewhistogramSpecListItem represents data reduced by productions:
//
//	PlotNewhistogramSpecListItem:
//	        SimpleExpression
//	|       "font" Expression                 // Case 1
//	|       "tc" ColorSpec                    // Case 2
//	|       "textcolor" ColorSpec             // Case 3
//	|       "lt" ColorSpec                    // Case 4
//	|       "linetype" ColorSpec              // Case 5
//	|       "fs" SetStyleFillSpecList         // Case 6
//	|       "fillstyle" SetStyleFillSpecList  // Case 7
//	|       "at" Position                     // Case 8
type PlotNewhistogramSpecListItem struct {
	Case                 int
	ColorSpec            *ColorSpec
	Expression           *Expression
	Position             *Position
	SetStyleFillSpecList *SetStyleFillSpecList
	SimpleExpression     *SimpleExpression
	Token                xc.Token
}

func (n *PlotNewhistogramSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotNewhistogramSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotNewhistogramSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.SimpleExpression.Pos()
	case 1, 2, 3, 4, 5, 6, 7, 8:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// PlotNewhistogramSpecListOpt represents data reduced by productions:
//
//	PlotNewhistogramSpecListOpt:
//	        /* empty */
//	|       PlotNewhistogramSpecList  // Case 1
type PlotNewhistogramSpecListOpt struct {
	PlotNewhistogramSpecList *PlotNewhistogramSpecList
}

func (n *PlotNewhistogramSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotNewhistogramSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotNewhistogramSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.PlotNewhistogramSpecList.Pos()
}

// PlotWindow represents data reduced by productions:
//
//	PlotWindow:
//	        "pm"
//	|       "win"  // Case 1
//	|       "wxt"  // Case 2
//	|       "x11"  // Case 3
type PlotWindow struct {
	Case  int
	Token xc.Token
}

func (n *PlotWindow) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PlotWindow) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PlotWindow) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Position represents data reduced by productions:
//
//	Position:
//	        CoordinateSystemOpt Expression
//	|       CoordinateSystemOpt Expression ',' CoordinateSystemOpt Expression                                                                        // Case 1
//	|       CoordinateSystemOpt Expression ',' CoordinateSystemOpt Expression ',' CoordinateSystemOpt Expression                                     // Case 2
//	|       CoordinateSystemOpt Expression ',' CoordinateSystemOpt Expression ',' CoordinateSystemOpt Expression ',' CoordinateSystemOpt Expression  // Case 3
type Position struct {
	Case                 int
	CoordinateSystemOpt  *CoordinateSystemOpt
	CoordinateSystemOpt2 *CoordinateSystemOpt
	CoordinateSystemOpt3 *CoordinateSystemOpt
	CoordinateSystemOpt4 *CoordinateSystemOpt
	Expression           *Expression
	Expression2          *Expression
	Expression3          *Expression
	Expression4          *Expression
	Token                xc.Token
	Token2               xc.Token
	Token3               xc.Token
}

func (n *Position) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Position) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Position) Pos() token.Pos {
	if n == nil {
		return 0
	}

	if p := n.CoordinateSystemOpt.Pos(); p != 0 {
		return p
	}

	return n.Expression.Pos()
}

// PrimaryExpression represents data reduced by productions:
//
//	PrimaryExpression:
//	        Operand
//	|       IDENTIFIER '(' ExpressionList ')'                          // Case 1
//	|       PrimaryExpression '[' SliceArgument ':' SliceArgument ']'  // Case 2
type PrimaryExpression struct {
	Case              int
	ExpressionList    *ExpressionList
	Operand           *Operand
	PrimaryExpression *PrimaryExpression
	SliceArgument     *SliceArgument
	SliceArgument2    *SliceArgument
	Token             xc.Token
	Token2            xc.Token
	Token3            xc.Token
}

func (n *PrimaryExpression) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PrimaryExpression) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PrimaryExpression) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.Operand.Pos()
	case 2:
		return n.PrimaryExpression.Pos()
	case 1:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// PrimaryNonParenthesizedExpression represents data reduced by productions:
//
//	PrimaryNonParenthesizedExpression:
//	        NonParenthesizedOperand
//	|       IDENTIFIER '(' ExpressionList ')'                                          // Case 1
//	|       PrimaryNonParenthesizedExpression '[' SliceArgument ':' SliceArgument ']'  // Case 2
type PrimaryNonParenthesizedExpression struct {
	Case                              int
	ExpressionList                    *ExpressionList
	NonParenthesizedOperand           *NonParenthesizedOperand
	PrimaryNonParenthesizedExpression *PrimaryNonParenthesizedExpression
	SliceArgument                     *SliceArgument
	SliceArgument2                    *SliceArgument
	Token                             xc.Token
	Token2                            xc.Token
	Token3                            xc.Token
}

func (n *PrimaryNonParenthesizedExpression) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PrimaryNonParenthesizedExpression) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PrimaryNonParenthesizedExpression) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.NonParenthesizedOperand.Pos()
	case 2:
		return n.PrimaryNonParenthesizedExpression.Pos()
	case 1:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// PrimaryNonStringExpression represents data reduced by productions:
//
//	PrimaryNonStringExpression:
//	        NonStringOperand
//	|       IDENTIFIER '(' ExpressionList ')'                                   // Case 1
//	|       PrimaryNonStringExpression '[' SliceArgument ':' SliceArgument ']'  // Case 2
type PrimaryNonStringExpression struct {
	Case                       int
	ExpressionList             *ExpressionList
	NonStringOperand           *NonStringOperand
	PrimaryNonStringExpression *PrimaryNonStringExpression
	SliceArgument              *SliceArgument
	SliceArgument2             *SliceArgument
	Token                      xc.Token
	Token2                     xc.Token
	Token3                     xc.Token
}

func (n *PrimaryNonStringExpression) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *PrimaryNonStringExpression) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *PrimaryNonStringExpression) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.NonStringOperand.Pos()
	case 2:
		return n.PrimaryNonStringExpression.Pos()
	case 1:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// Print represents data reduced by production:
//
//	Print:
//	        "print" ExpressionList
type Print struct {
	ExpressionList *ExpressionList
	Token          xc.Token
}

func (n *Print) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Print) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Print) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Range represents data reduced by productions:
//
//	Range:
//	        '[' ':' ']'
//	|       '[' ':' RangeExpression ']'                  // Case 1
//	|       '[' ']'                                      // Case 2
//	|       '[' RangeExpression ':' ']'                  // Case 3
//	|       '[' RangeExpression ':' RangeExpression ']'  // Case 4
type Range struct {
	Case             int
	RangeExpression  *RangeExpression
	RangeExpression2 *RangeExpression
	Token            xc.Token
	Token2           xc.Token
	Token3           xc.Token
}

func (n *Range) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Range) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Range) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// RangeExpression represents data reduced by productions:
//
//	RangeExpression:
//	        '*'
//	|       RangeExpression "!=" RangeExpression                     // Case 1
//	|       RangeExpression "&&" RangeExpression                     // Case 2
//	|       RangeExpression "**" RangeExpression                     // Case 3
//	|       RangeExpression "<<" RangeExpression                     // Case 4
//	|       RangeExpression "<=" RangeExpression                     // Case 5
//	|       RangeExpression "==" RangeExpression                     // Case 6
//	|       RangeExpression ">=" RangeExpression                     // Case 7
//	|       RangeExpression ">>" RangeExpression                     // Case 8
//	|       RangeExpression "eq" RangeExpression                     // Case 9
//	|       RangeExpression "ne" RangeExpression                     // Case 10
//	|       RangeExpression "||" RangeExpression                     // Case 11
//	|       RangeExpression '%' RangeExpression                      // Case 12
//	|       RangeExpression '&' RangeExpression                      // Case 13
//	|       RangeExpression '*' RangeExpression                      // Case 14
//	|       RangeExpression '+' RangeExpression                      // Case 15
//	|       RangeExpression '-' RangeExpression                      // Case 16
//	|       RangeExpression '.' RangeExpression                      // Case 17
//	|       RangeExpression '/' RangeExpression                      // Case 18
//	|       RangeExpression '<' RangeExpression                      // Case 19
//	|       RangeExpression '=' RangeExpression                      // Case 20
//	|       RangeExpression '>' RangeExpression                      // Case 21
//	|       RangeExpression '?' RangeExpression ':' RangeExpression  // Case 22
//	|       RangeExpression '^' RangeExpression                      // Case 23
//	|       RangeExpression '|' RangeExpression                      // Case 24
//	|       UnaryExpression                                          // Case 25
type RangeExpression struct {
	Case             int
	RangeExpression  *RangeExpression
	RangeExpression2 *RangeExpression
	RangeExpression3 *RangeExpression
	Token            xc.Token
	Token2           xc.Token
	UnaryExpression  *UnaryExpression
}

func (n *RangeExpression) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *RangeExpression) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *RangeExpression) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24:
		return n.RangeExpression.Pos()
	case 0:
		return n.Token.Pos()
	case 25:
		return n.UnaryExpression.Pos()
	default:
		panic("internal error")
	}
}

// Ranges represents data reduced by productions:
//
//	Ranges:
//	        Range
//	|       Ranges Range  // Case 1
type Ranges struct {
	Case   int
	Range  *Range
	Ranges *Ranges
}

func (n *Ranges) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Ranges) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Ranges) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.Range.Pos()
	case 1:
		return n.Ranges.Pos()
	default:
		panic("internal error")
	}
}

// RangesOpt represents data reduced by productions:
//
//	RangesOpt:
//	        /* empty */
//	|       Ranges       // Case 1
type RangesOpt struct {
	Ranges *Ranges
}

func (n *RangesOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *RangesOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *RangesOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Ranges.Pos()
}

// Replot represents data reduced by productions:
//
//	Replot:
//	        "rep"
//	|       "rep" PlotElementList     // Case 1
//	|       "replot"                  // Case 2
//	|       "replot" PlotElementList  // Case 3
type Replot struct {
	Case            int
	PlotElementList *PlotElementList
	Token           xc.Token
}

func (n *Replot) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Replot) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Replot) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Reread represents data reduced by production:
//
//	Reread:
//	        "reread"
type Reread struct {
	Token xc.Token
}

func (n *Reread) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Reread) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Reread) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Reset represents data reduced by productions:
//
//	Reset:
//	        "reset"
//	|       "reset" "bind"     // Case 1
//	|       "reset" "errors"   // Case 2
//	|       "reset" "session"  // Case 3
type Reset struct {
	Case   int
	Token  xc.Token
	Token2 xc.Token
}

func (n *Reset) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Reset) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Reset) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Set represents data reduced by production:
//
//	Set:
//	        "set" IterationSpecifierOpt SetSpec
type Set struct {
	IterationSpecifierOpt *IterationSpecifierOpt
	SetSpec               *SetSpec
	Token                 xc.Token
}

func (n *Set) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Set) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Set) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetAnglesSpec represents data reduced by productions:
//
//	SetAnglesSpec:
//	        "degrees"
//	|       "radians"  // Case 1
//	|       "rad"      // Case 2
type SetAnglesSpec struct {
	Case  int
	Token xc.Token
}

func (n *SetAnglesSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetAnglesSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetAnglesSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetArrowSpec represents data reduced by production:
//
//	SetArrowSpec:
//	        ExpressionOpt SetArrowSpecList
type SetArrowSpec struct {
	ExpressionOpt    *ExpressionOpt
	SetArrowSpecList *SetArrowSpecList
}

func (n *SetArrowSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetArrowSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetArrowSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	if p := n.ExpressionOpt.Pos(); p != 0 {
		return p
	}

	return n.SetArrowSpecList.Pos()
}

// SetArrowSpecList represents data reduced by productions:
//
//	SetArrowSpecList:
//	        SetArrowSpecListItem
//	|       SetArrowSpecList SetArrowSpecListItem  // Case 1
type SetArrowSpecList struct {
	Case                 int
	SetArrowSpecList     *SetArrowSpecList
	SetArrowSpecListItem *SetArrowSpecListItem
}

func (n *SetArrowSpecList) reverse() *SetArrowSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetArrowSpecList
	for nb != nil {
		nc := nb.SetArrowSpecList
		nb.SetArrowSpecList = na
		na = nb
		nb = nc
	}
	n.SetArrowSpecList = nil
	return na
}

func (n *SetArrowSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetArrowSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetArrowSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetArrowSpecList.Pos()
	case 0:
		return n.SetArrowSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetArrowSpecListItem represents data reduced by productions:
//
//	SetArrowSpecListItem:
//	        "head"
//	|       "nohead"                                            // Case 1
//	|       "backhead"                                          // Case 2
//	|       "heads"                                             // Case 3
//	|       "size" Expression ',' Expression                    // Case 4
//	|       "size" Expression ',' Expression ',' Expression     // Case 5
//	|       "fill"                                              // Case 6
//	|       "filled"                                            // Case 7
//	|       "nofilled"                                          // Case 8
//	|       "empty"                                             // Case 9
//	|       "noborder"                                          // Case 10
//	|       "front"                                             // Case 11
//	|       "back"                                              // Case 12
//	|       LineStyleListItem                                   // Case 13
//	|       "from" Position "to" Position                       // Case 14
//	|       "from" Position "rto" Position                      // Case 15
//	|       "from" Position "length" Position "angle" Position  // Case 16
//	|       "arrowstyle"                                        // Case 17
//	|       "as" Expression                                     // Case 18
type SetArrowSpecListItem struct {
	Case              int
	Expression        *Expression
	Expression2       *Expression
	Expression3       *Expression
	LineStyleListItem *LineStyleListItem
	Position          *Position
	Position2         *Position
	Position3         *Position
	Token             xc.Token
	Token2            xc.Token
	Token3            xc.Token
}

func (n *SetArrowSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetArrowSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetArrowSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 13:
		return n.LineStyleListItem.Pos()
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetAutoscaleAxes represents data reduced by productions:
//
//	SetAutoscaleAxes:
//	        "cb"
//	|       "cbfix"     // Case 1
//	|       "cbfixmax"  // Case 2
//	|       "cbfixmin"  // Case 3
//	|       "cbmax"     // Case 4
//	|       "cbmin"     // Case 5
//	|       "x"         // Case 6
//	|       "x2"        // Case 7
//	|       "x2fix"     // Case 8
//	|       "x2fixmax"  // Case 9
//	|       "x2fixmin"  // Case 10
//	|       "x2max"     // Case 11
//	|       "x2min"     // Case 12
//	|       "xfix"      // Case 13
//	|       "xfixmax"   // Case 14
//	|       "xfixmin"   // Case 15
//	|       "xmax"      // Case 16
//	|       "xmin"      // Case 17
//	|       "xy"        // Case 18
//	|       "xyfix"     // Case 19
//	|       "xyfixmax"  // Case 20
//	|       "xyfixmin"  // Case 21
//	|       "y"         // Case 22
//	|       "y2"        // Case 23
//	|       "y2fix"     // Case 24
//	|       "y2fixmax"  // Case 25
//	|       "y2fixmin"  // Case 26
//	|       "y2max"     // Case 27
//	|       "y2min"     // Case 28
//	|       "yfix"      // Case 29
//	|       "yfixmax"   // Case 30
//	|       "yfixmin"   // Case 31
//	|       "ymax"      // Case 32
//	|       "ymin"      // Case 33
//	|       "z"         // Case 34
//	|       "zfix"      // Case 35
//	|       "zfixmax"   // Case 36
//	|       "zfixmin"   // Case 37
//	|       "zmax"      // Case 38
type SetAutoscaleAxes struct {
	Case  int
	Token xc.Token
}

func (n *SetAutoscaleAxes) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetAutoscaleAxes) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetAutoscaleAxes) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetAutoscaleSpecList represents data reduced by productions:
//
//	SetAutoscaleSpecList:
//	        SetAutoscaleSpecListItem
//	|       SetAutoscaleSpecList SetAutoscaleSpecListItem  // Case 1
type SetAutoscaleSpecList struct {
	Case                     int
	SetAutoscaleSpecList     *SetAutoscaleSpecList
	SetAutoscaleSpecListItem *SetAutoscaleSpecListItem
}

func (n *SetAutoscaleSpecList) reverse() *SetAutoscaleSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetAutoscaleSpecList
	for nb != nil {
		nc := nb.SetAutoscaleSpecList
		nb.SetAutoscaleSpecList = na
		na = nb
		nb = nc
	}
	n.SetAutoscaleSpecList = nil
	return na
}

func (n *SetAutoscaleSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetAutoscaleSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetAutoscaleSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetAutoscaleSpecList.Pos()
	case 0:
		return n.SetAutoscaleSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetAutoscaleSpecListItem represents data reduced by productions:
//
//	SetAutoscaleSpecListItem:
//	        "fix"
//	|       "keepfix"         // Case 1
//	|       "noextend"        // Case 2
//	|       SetAutoscaleAxes  // Case 3
type SetAutoscaleSpecListItem struct {
	Case             int
	SetAutoscaleAxes *SetAutoscaleAxes
	Token            xc.Token
}

func (n *SetAutoscaleSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetAutoscaleSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetAutoscaleSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 3:
		return n.SetAutoscaleAxes.Pos()
	case 0, 1, 2:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetAutoscaleSpecListOpt represents data reduced by productions:
//
//	SetAutoscaleSpecListOpt:
//	        /* empty */
//	|       SetAutoscaleSpecList  // Case 1
type SetAutoscaleSpecListOpt struct {
	SetAutoscaleSpecList *SetAutoscaleSpecList
}

func (n *SetAutoscaleSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetAutoscaleSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetAutoscaleSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetAutoscaleSpecList.Pos()
}

// SetBarsSpecList represents data reduced by productions:
//
//	SetBarsSpecList:
//	        SetBarsSpecListItem
//	|       SetBarsSpecList SetBarsSpecListItem  // Case 1
type SetBarsSpecList struct {
	Case                int
	SetBarsSpecList     *SetBarsSpecList
	SetBarsSpecListItem *SetBarsSpecListItem
}

func (n *SetBarsSpecList) reverse() *SetBarsSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetBarsSpecList
	for nb != nil {
		nc := nb.SetBarsSpecList
		nb.SetBarsSpecList = na
		na = nb
		nb = nc
	}
	n.SetBarsSpecList = nil
	return na
}

func (n *SetBarsSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetBarsSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetBarsSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetBarsSpecList.Pos()
	case 0:
		return n.SetBarsSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetBarsSpecListItem represents data reduced by productions:
//
//	SetBarsSpecListItem:
//	        "small"
//	|       "large"           // Case 1
//	|       "fullwidth"       // Case 2
//	|       SimpleExpression  // Case 3
//	|       "front"           // Case 4
//	|       "back"            // Case 5
type SetBarsSpecListItem struct {
	Case             int
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetBarsSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetBarsSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetBarsSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 3:
		return n.SimpleExpression.Pos()
	case 0, 1, 2, 4, 5:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetBarsSpecListOpt represents data reduced by productions:
//
//	SetBarsSpecListOpt:
//	        /* empty */
//	|       SetBarsSpecList  // Case 1
type SetBarsSpecListOpt struct {
	SetBarsSpecList *SetBarsSpecList
}

func (n *SetBarsSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetBarsSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetBarsSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetBarsSpecList.Pos()
}

// SetBmarginSpecOpt represents data reduced by productions:
//
//	SetBmarginSpecOpt:
//	        /* empty */
//	|       "at" "screen" Expression  // Case 1
//	|       Expression                // Case 2
type SetBmarginSpecOpt struct {
	Case       int
	Expression *Expression
	Token      xc.Token
	Token2     xc.Token
}

func (n *SetBmarginSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetBmarginSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetBmarginSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 2:
		return n.Expression.Pos()
	case 1:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetBorderSpec represents data reduced by production:
//
//	SetBorderSpec:
//	        ExpressionOpt SetBorderSpecListOpt
type SetBorderSpec struct {
	ExpressionOpt        *ExpressionOpt
	SetBorderSpecListOpt *SetBorderSpecListOpt
}

func (n *SetBorderSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetBorderSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetBorderSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	if p := n.ExpressionOpt.Pos(); p != 0 {
		return p
	}

	return n.SetBorderSpecListOpt.Pos()
}

// SetBorderSpecList represents data reduced by productions:
//
//	SetBorderSpecList:
//	        SetBorderSpecListItem
//	|       SetBorderSpecList SetBorderSpecListItem  // Case 1
type SetBorderSpecList struct {
	Case                  int
	SetBorderSpecList     *SetBorderSpecList
	SetBorderSpecListItem *SetBorderSpecListItem
}

func (n *SetBorderSpecList) reverse() *SetBorderSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetBorderSpecList
	for nb != nil {
		nc := nb.SetBorderSpecList
		nb.SetBorderSpecList = na
		na = nb
		nb = nc
	}
	n.SetBorderSpecList = nil
	return na
}

func (n *SetBorderSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetBorderSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetBorderSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetBorderSpecList.Pos()
	case 0:
		return n.SetBorderSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetBorderSpecListItem represents data reduced by productions:
//
//	SetBorderSpecListItem:
//	        "front"
//	|       "back"             // Case 1
//	|       "behind"           // Case 2
//	|       LineStyleListItem  // Case 3
type SetBorderSpecListItem struct {
	Case              int
	LineStyleListItem *LineStyleListItem
	Token             xc.Token
}

func (n *SetBorderSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetBorderSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetBorderSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 3:
		return n.LineStyleListItem.Pos()
	case 0, 1, 2:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetBorderSpecListOpt represents data reduced by productions:
//
//	SetBorderSpecListOpt:
//	        /* empty */
//	|       SetBorderSpecList  // Case 1
type SetBorderSpecListOpt struct {
	SetBorderSpecList *SetBorderSpecList
}

func (n *SetBorderSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetBorderSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetBorderSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetBorderSpecList.Pos()
}

// SetBoxwidthSpec represents data reduced by productions:
//
//	SetBoxwidthSpec:
//	        Expression
//	|       Expression "absolute"  // Case 1
//	|       Expression "relative"  // Case 2
type SetBoxwidthSpec struct {
	Case       int
	Expression *Expression
	Token      xc.Token
}

func (n *SetBoxwidthSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetBoxwidthSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetBoxwidthSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Expression.Pos()
}

// SetClipSpecOpt represents data reduced by productions:
//
//	SetClipSpecOpt:
//	        /* empty */
//	|       "points"     // Case 1
//	|       "one"        // Case 2
//	|       "two"        // Case 3
type SetClipSpecOpt struct {
	Case  int
	Token xc.Token
}

func (n *SetClipSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetClipSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetClipSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1, 2, 3:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetCntrlabelSpecList represents data reduced by productions:
//
//	SetCntrlabelSpecList:
//	        SetCntrlabelSpecListItem
//	|       SetCntrlabelSpecList SetCntrlabelSpecListItem  // Case 1
type SetCntrlabelSpecList struct {
	Case                     int
	SetCntrlabelSpecList     *SetCntrlabelSpecList
	SetCntrlabelSpecListItem *SetCntrlabelSpecListItem
}

func (n *SetCntrlabelSpecList) reverse() *SetCntrlabelSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetCntrlabelSpecList
	for nb != nil {
		nc := nb.SetCntrlabelSpecList
		nb.SetCntrlabelSpecList = na
		na = nb
		nb = nc
	}
	n.SetCntrlabelSpecList = nil
	return na
}

func (n *SetCntrlabelSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetCntrlabelSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetCntrlabelSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetCntrlabelSpecList.Pos()
	case 0:
		return n.SetCntrlabelSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetCntrlabelSpecListItem represents data reduced by productions:
//
//	SetCntrlabelSpecListItem:
//	        "format" Expression
//	|       "font" Expression      // Case 1
//	|       "start" Expression     // Case 2
//	|       "interval" Expression  // Case 3
//	|       "onecolor"             // Case 4
type SetCntrlabelSpecListItem struct {
	Case       int
	Expression *Expression
	Token      xc.Token
}

func (n *SetCntrlabelSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetCntrlabelSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetCntrlabelSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetCntrparamSpecList represents data reduced by productions:
//
//	SetCntrparamSpecList:
//	        SetCntrparamSpecListItem
//	|       SetCntrparamSpecList SetCntrparamSpecListItem  // Case 1
type SetCntrparamSpecList struct {
	Case                     int
	SetCntrparamSpecList     *SetCntrparamSpecList
	SetCntrparamSpecListItem *SetCntrparamSpecListItem
}

func (n *SetCntrparamSpecList) reverse() *SetCntrparamSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetCntrparamSpecList
	for nb != nil {
		nc := nb.SetCntrparamSpecList
		nb.SetCntrparamSpecList = na
		na = nb
		nb = nc
	}
	n.SetCntrparamSpecList = nil
	return na
}

func (n *SetCntrparamSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetCntrparamSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetCntrparamSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetCntrparamSpecList.Pos()
	case 0:
		return n.SetCntrparamSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetCntrparamSpecListItem represents data reduced by productions:
//
//	SetCntrparamSpecListItem:
//	        "linear"
//	|       "cubicspline"                          // Case 1
//	|       "bspline"                              // Case 2
//	|       "points" Expression                    // Case 3
//	|       "order" Expression                     // Case 4
//	|       "level" "auto" Expression              // Case 5
//	|       "level" Expression                     // Case 6
//	|       "level" "discrete" ExpressionList      // Case 7
//	|       "level" "incr" ExpressionList          // Case 8
//	|       "level" "incremental" ExpressionList   // Case 9
//	|       "levels" "auto" Expression             // Case 10
//	|       "levels" Expression                    // Case 11
//	|       "levels" "discrete" ExpressionList     // Case 12
//	|       "levels" "incr" ExpressionList         // Case 13
//	|       "levels" "incremental" ExpressionList  // Case 14
type SetCntrparamSpecListItem struct {
	Case           int
	Expression     *Expression
	ExpressionList *ExpressionList
	Token          xc.Token
	Token2         xc.Token
}

func (n *SetCntrparamSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetCntrparamSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetCntrparamSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetColorboxSpecList represents data reduced by productions:
//
//	SetColorboxSpecList:
//	        SetColorboxSpecListItem
//	|       SetColorboxSpecList SetColorboxSpecListItem  // Case 1
type SetColorboxSpecList struct {
	Case                    int
	SetColorboxSpecList     *SetColorboxSpecList
	SetColorboxSpecListItem *SetColorboxSpecListItem
}

func (n *SetColorboxSpecList) reverse() *SetColorboxSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetColorboxSpecList
	for nb != nil {
		nc := nb.SetColorboxSpecList
		nb.SetColorboxSpecList = na
		na = nb
		nb = nc
	}
	n.SetColorboxSpecList = nil
	return na
}

func (n *SetColorboxSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetColorboxSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetColorboxSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetColorboxSpecList.Pos()
	case 0:
		return n.SetColorboxSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetColorboxSpecListItem represents data reduced by productions:
//
//	SetColorboxSpecListItem:
//	        "vertical"
//	|       "horizontal"                        // Case 1
//	|       "default"                           // Case 2
//	|       "user"                              // Case 3
//	|       "origin" Expression ',' Expression  // Case 4
//	|       "size" Expression ',' Expression    // Case 5
//	|       "front"                             // Case 6
//	|       "back"                              // Case 7
//	|       "noborder"                          // Case 8
//	|       "bdefault"                          // Case 9
//	|       "border" LineStyleList              // Case 10
type SetColorboxSpecListItem struct {
	Case          int
	Expression    *Expression
	Expression2   *Expression
	LineStyleList *LineStyleList
	Token         xc.Token
	Token2        xc.Token
}

func (n *SetColorboxSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetColorboxSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetColorboxSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetColorboxSpecListOpt represents data reduced by productions:
//
//	SetColorboxSpecListOpt:
//	        /* empty */
//	|       SetColorboxSpecList  // Case 1
type SetColorboxSpecListOpt struct {
	SetColorboxSpecList *SetColorboxSpecList
}

func (n *SetColorboxSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetColorboxSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetColorboxSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetColorboxSpecList.Pos()
}

// SetColorsequenceSpecOpt represents data reduced by productions:
//
//	SetColorsequenceSpecOpt:
//	        /* empty */
//	|       "default"    // Case 1
//	|       "classic"    // Case 2
//	|       "podo"       // Case 3
type SetColorsequenceSpecOpt struct {
	Case  int
	Token xc.Token
}

func (n *SetColorsequenceSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetColorsequenceSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetColorsequenceSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1, 2, 3:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetContourSpec represents data reduced by productions:
//
//	SetContourSpec:
//	        /* empty */
//	|       "base"       // Case 1
//	|       "surface"    // Case 2
//	|       "both"       // Case 3
type SetContourSpec struct {
	Case  int
	Token xc.Token
}

func (n *SetContourSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetContourSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetContourSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1, 2, 3:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetDatafileSeperatorSpecOpt represents data reduced by productions:
//
//	SetDatafileSeperatorSpecOpt:
//	        /* empty */
//	|       "whitespace"  // Case 1
//	|       "tab"         // Case 2
//	|       "comma"       // Case 3
//	|       Expression    // Case 4
type SetDatafileSeperatorSpecOpt struct {
	Case       int
	Expression *Expression
	Token      xc.Token
}

func (n *SetDatafileSeperatorSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetDatafileSeperatorSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetDatafileSeperatorSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 4:
		return n.Expression.Pos()
	case 1, 2, 3:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetDatafileSpec represents data reduced by productions:
//
//	SetDatafileSpec:
//	        "fortran"
//	|       "nofpe" "trap"                           // Case 1
//	|       "missing" Expression                     // Case 2
//	|       "sep" SetDatafileSeperatorSpecOpt        // Case 3
//	|       "separator" SetDatafileSeperatorSpecOpt  // Case 4
//	|       "commentschars"                          // Case 5
//	|       "commentschars" Expression               // Case 6
//	|       "binary"                                 // Case 7
//	|       "binary" BinaryList                      // Case 8
type SetDatafileSpec struct {
	BinaryList                  *BinaryList
	Case                        int
	Expression                  *Expression
	SetDatafileSeperatorSpecOpt *SetDatafileSeperatorSpecOpt
	Token                       xc.Token
	Token2                      xc.Token
}

func (n *SetDatafileSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetDatafileSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetDatafileSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetDecimalsignSpecOpt represents data reduced by productions:
//
//	SetDecimalsignSpecOpt:
//	        /* empty */
//	|       Expression           // Case 1
//	|       "locale"             // Case 2
//	|       "locale" Expression  // Case 3
type SetDecimalsignSpecOpt struct {
	Case       int
	Expression *Expression
	Token      xc.Token
}

func (n *SetDecimalsignSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetDecimalsignSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetDecimalsignSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1:
		return n.Expression.Pos()
	case 2, 3:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetDgrid3dSpecList represents data reduced by productions:
//
//	SetDgrid3dSpecList:
//	        SetDgrid3dSpecListItem
//	|       SetDgrid3dSpecList SetDgrid3dSpecListItem  // Case 1
type SetDgrid3dSpecList struct {
	Case                   int
	SetDgrid3dSpecList     *SetDgrid3dSpecList
	SetDgrid3dSpecListItem *SetDgrid3dSpecListItem
}

func (n *SetDgrid3dSpecList) reverse() *SetDgrid3dSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetDgrid3dSpecList
	for nb != nil {
		nc := nb.SetDgrid3dSpecList
		nb.SetDgrid3dSpecList = na
		na = nb
		nb = nc
	}
	n.SetDgrid3dSpecList = nil
	return na
}

func (n *SetDgrid3dSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetDgrid3dSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetDgrid3dSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetDgrid3dSpecList.Pos()
	case 0:
		return n.SetDgrid3dSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetDgrid3dSpecListItem represents data reduced by productions:
//
//	SetDgrid3dSpecListItem:
//	        Expression
//	|       ','         // Case 1
//	|       "splines"   // Case 2
//	|       "qnorm"     // Case 3
//	|       "gauss"     // Case 4
//	|       "cauchy"    // Case 5
//	|       "exp"       // Case 6
//	|       "box"       // Case 7
//	|       "hann"      // Case 8
//	|       "kdensity"  // Case 9
type SetDgrid3dSpecListItem struct {
	Case       int
	Expression *Expression
	Token      xc.Token
}

func (n *SetDgrid3dSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetDgrid3dSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetDgrid3dSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.Expression.Pos()
	case 1, 2, 3, 4, 5, 6, 7, 8, 9:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetDgrid3dSpecListOpt represents data reduced by productions:
//
//	SetDgrid3dSpecListOpt:
//	        /* empty */
//	|       SetDgrid3dSpecList  // Case 1
type SetDgrid3dSpecListOpt struct {
	SetDgrid3dSpecList *SetDgrid3dSpecList
}

func (n *SetDgrid3dSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetDgrid3dSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetDgrid3dSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetDgrid3dSpecList.Pos()
}

// SetEncodingSpec represents data reduced by productions:
//
//	SetEncodingSpec:
//	        "cp1250"
//	|       "cp1251"       // Case 1
//	|       "cp1252"       // Case 2
//	|       "cp1254"       // Case 3
//	|       "cp437"        // Case 4
//	|       "cp850"        // Case 5
//	|       "cp852"        // Case 6
//	|       "cp950"        // Case 7
//	|       "default"      // Case 8
//	|       "iso_8859_1"   // Case 9
//	|       "iso_8859_15"  // Case 10
//	|       "iso_8859_2"   // Case 11
//	|       "iso_8859_9"   // Case 12
//	|       "koi8r"        // Case 13
//	|       "koi8u"        // Case 14
//	|       "locale"       // Case 15
//	|       "sjis"         // Case 16
//	|       "utf8"         // Case 17
//	|       Expression     // Case 18
type SetEncodingSpec struct {
	Case       int
	Expression *Expression
	Token      xc.Token
}

func (n *SetEncodingSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetEncodingSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetEncodingSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 18:
		return n.Expression.Pos()
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetFitSpecList represents data reduced by productions:
//
//	SetFitSpecList:
//	        SetFitSpecListItem
//	|       SetFitSpecList SetFitSpecListItem  // Case 1
type SetFitSpecList struct {
	Case               int
	SetFitSpecList     *SetFitSpecList
	SetFitSpecListItem *SetFitSpecListItem
}

func (n *SetFitSpecList) reverse() *SetFitSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetFitSpecList
	for nb != nil {
		nc := nb.SetFitSpecList
		nb.SetFitSpecList = na
		na = nb
		nb = nc
	}
	n.SetFitSpecList = nil
	return na
}

func (n *SetFitSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetFitSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetFitSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetFitSpecList.Pos()
	case 0:
		return n.SetFitSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetFitSpecListItem represents data reduced by productions:
//
//	SetFitSpecListItem:
//	        "nolog"
//	|       "logfile" Expression        // Case 1
//	|       "logfile" "default"         // Case 2
//	|       "quiet"                     // Case 3
//	|       "noquiet"                   // Case 4
//	|       "results"                   // Case 5
//	|       "brief"                     // Case 6
//	|       "verbose"                   // Case 7
//	|       "errorvariables"            // Case 8
//	|       "noerrorvariables"          // Case 9
//	|       "covariancevariables"       // Case 10
//	|       "nocovariancevariables"     // Case 11
//	|       "errorscaling"              // Case 12
//	|       "noerrorscaling"            // Case 13
//	|       "prescale"                  // Case 14
//	|       "noprescale"                // Case 15
//	|       "maxiter" Expression        // Case 16
//	|       "maxiter" "default"         // Case 17
//	|       "limit" Expression          // Case 18
//	|       "limit" "default"           // Case 19
//	|       "limit_abs" Expression      // Case 20
//	|       "start_lambda" Expression   // Case 21
//	|       "start_lambda" "default"    // Case 22
//	|       "lambda_factor" Expression  // Case 23
//	|       "lambda_factor" "default"   // Case 24
//	|       "script" Expression         // Case 25
//	|       "script" "default"          // Case 26
//	|       "v4"                        // Case 27
//	|       "v5"                        // Case 28
type SetFitSpecListItem struct {
	Case       int
	Expression *Expression
	Token      xc.Token
	Token2     xc.Token
}

func (n *SetFitSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetFitSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetFitSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetFontPathSpecOpt represents data reduced by productions:
//
//	SetFontPathSpecOpt:
//	        /* empty */
//	|       Expression                       // Case 1
//	|       Expression SimpleExpressionList  // Case 2
type SetFontPathSpecOpt struct {
	Case                 int
	Expression           *Expression
	SimpleExpressionList *SimpleExpressionList
}

func (n *SetFontPathSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetFontPathSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetFontPathSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1, 2:
		return n.Expression.Pos()
	default:
		panic("internal error")
	}
}

// SetFormatAxesOpt represents data reduced by productions:
//
//	SetFormatAxesOpt:
//	        /* empty */
//	|       "cb"         // Case 1
//	|       "x"          // Case 2
//	|       "x2"         // Case 3
//	|       "xy"         // Case 4
//	|       "y"          // Case 5
//	|       "y2"         // Case 6
//	|       "z"          // Case 7
type SetFormatAxesOpt struct {
	Case  int
	Token xc.Token
}

func (n *SetFormatAxesOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetFormatAxesOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetFormatAxesOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1, 2, 3, 4, 5, 6, 7:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetFormatModifierOpt represents data reduced by productions:
//
//	SetFormatModifierOpt:
//	        /* empty */
//	|       "numeric"     // Case 1
//	|       "timedate"    // Case 2
//	|       "geographic"  // Case 3
type SetFormatModifierOpt struct {
	Case  int
	Token xc.Token
}

func (n *SetFormatModifierOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetFormatModifierOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetFormatModifierOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1, 2, 3:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetFormatSpec represents data reduced by production:
//
//	SetFormatSpec:
//	        SetFormatAxesOpt ExpressionOpt SetFormatModifierOpt
type SetFormatSpec struct {
	ExpressionOpt        *ExpressionOpt
	SetFormatAxesOpt     *SetFormatAxesOpt
	SetFormatModifierOpt *SetFormatModifierOpt
}

func (n *SetFormatSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetFormatSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetFormatSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	if p := n.SetFormatAxesOpt.Pos(); p != 0 {
		return p
	}

	if p := n.ExpressionOpt.Pos(); p != 0 {
		return p
	}

	return n.SetFormatModifierOpt.Pos()
}

// SetGridSpecList represents data reduced by productions:
//
//	SetGridSpecList:
//	        SetGridSpecListItem
//	|       SetGridSpecList SetGridSpecListItem  // Case 1
type SetGridSpecList struct {
	Case                int
	SetGridSpecList     *SetGridSpecList
	SetGridSpecListItem *SetGridSpecListItem
}

func (n *SetGridSpecList) reverse() *SetGridSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetGridSpecList
	for nb != nil {
		nc := nb.SetGridSpecList
		nb.SetGridSpecList = na
		na = nb
		nb = nc
	}
	n.SetGridSpecList = nil
	return na
}

func (n *SetGridSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetGridSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetGridSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetGridSpecList.Pos()
	case 0:
		return n.SetGridSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetGridSpecListItem represents data reduced by productions:
//
//	SetGridSpecListItem:
//	        "back"
//	|       "cbtics"                                 // Case 1
//	|       "front"                                  // Case 2
//	|       "layerdefault"                           // Case 3
//	|       "mcb"                                    // Case 4
//	|       "mcbtics"                                // Case 5
//	|       "mx"                                     // Case 6
//	|       "mx2"                                    // Case 7
//	|       "mx2tics"                                // Case 8
//	|       "mxtics"                                 // Case 9
//	|       "my"                                     // Case 10
//	|       "my2"                                    // Case 11
//	|       "my2tics"                                // Case 12
//	|       "mytics"                                 // Case 13
//	|       "mz"                                     // Case 14
//	|       "mztics"                                 // Case 15
//	|       "nocbtics"                               // Case 16
//	|       "nomcbtics"                              // Case 17
//	|       "nomx2tics"                              // Case 18
//	|       "nomxtics"                               // Case 19
//	|       "nomy2tics"                              // Case 20
//	|       "nomytics"                               // Case 21
//	|       "nomztics"                               // Case 22
//	|       "nox2tics"                               // Case 23
//	|       "noxtics"                                // Case 24
//	|       "noy2tics"                               // Case 25
//	|       "noytics"                                // Case 26
//	|       "noztics"                                // Case 27
//	|       "polar"                                  // Case 28
//	|       "polar" Expression                       // Case 29
//	|       "x2tics"                                 // Case 30
//	|       "xtics"                                  // Case 31
//	|       "y2tics"                                 // Case 32
//	|       "ytics"                                  // Case 33
//	|       "ztics"                                  // Case 34
//	|       LineStyleListItem                        // Case 35
//	|       LineStyleListItem ',' LineStyleListItem  // Case 36
//	|       SetLogscaleAxesListItem                  // Case 37
type SetGridSpecListItem struct {
	Case                    int
	Expression              *Expression
	LineStyleListItem       *LineStyleListItem
	LineStyleListItem2      *LineStyleListItem
	SetLogscaleAxesListItem *SetLogscaleAxesListItem
	Token                   xc.Token
}

func (n *SetGridSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetGridSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetGridSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 35, 36:
		return n.LineStyleListItem.Pos()
	case 37:
		return n.SetLogscaleAxesListItem.Pos()
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetGridSpecListOpt represents data reduced by productions:
//
//	SetGridSpecListOpt:
//	        /* empty */
//	|       SetGridSpecList  // Case 1
type SetGridSpecListOpt struct {
	SetGridSpecList *SetGridSpecList
}

func (n *SetGridSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetGridSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetGridSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetGridSpecList.Pos()
}

// SetHidden3dSpecList represents data reduced by productions:
//
//	SetHidden3dSpecList:
//	        SetHidden3dSpecListItem
//	|       SetHidden3dSpecList SetHidden3dSpecListItem  // Case 1
type SetHidden3dSpecList struct {
	Case                    int
	SetHidden3dSpecList     *SetHidden3dSpecList
	SetHidden3dSpecListItem *SetHidden3dSpecListItem
}

func (n *SetHidden3dSpecList) reverse() *SetHidden3dSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetHidden3dSpecList
	for nb != nil {
		nc := nb.SetHidden3dSpecList
		nb.SetHidden3dSpecList = na
		na = nb
		nb = nc
	}
	n.SetHidden3dSpecList = nil
	return na
}

func (n *SetHidden3dSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetHidden3dSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetHidden3dSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetHidden3dSpecList.Pos()
	case 0:
		return n.SetHidden3dSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetHidden3dSpecListItem represents data reduced by productions:
//
//	SetHidden3dSpecListItem:
//	        "defaults"
//	|       "front"                       // Case 1
//	|       "back"                        // Case 2
//	|       "offset" Expression           // Case 3
//	|       "nooffset"                    // Case 4
//	|       "trianglepattern" Expression  // Case 5
//	|       "undefined" Expression        // Case 6
//	|       "noundefined"                 // Case 7
//	|       "altdiagonal"                 // Case 8
//	|       "noaltdiagonal"               // Case 9
//	|       "bentover"                    // Case 10
//	|       "nobentover"                  // Case 11
type SetHidden3dSpecListItem struct {
	Case       int
	Expression *Expression
	Token      xc.Token
}

func (n *SetHidden3dSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetHidden3dSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetHidden3dSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetHidden3dSpecListOpt represents data reduced by productions:
//
//	SetHidden3dSpecListOpt:
//	        /* empty */
//	|       SetHidden3dSpecList  // Case 1
type SetHidden3dSpecListOpt struct {
	SetHidden3dSpecList *SetHidden3dSpecList
}

func (n *SetHidden3dSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetHidden3dSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetHidden3dSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetHidden3dSpecList.Pos()
}

// SetHistorySpecList represents data reduced by productions:
//
//	SetHistorySpecList:
//	        SetHistorySpecListItem
//	|       SetHistorySpecList SetHistorySpecListItem  // Case 1
type SetHistorySpecList struct {
	Case                   int
	SetHistorySpecList     *SetHistorySpecList
	SetHistorySpecListItem *SetHistorySpecListItem
}

func (n *SetHistorySpecList) reverse() *SetHistorySpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetHistorySpecList
	for nb != nil {
		nc := nb.SetHistorySpecList
		nb.SetHistorySpecList = na
		na = nb
		nb = nc
	}
	n.SetHistorySpecList = nil
	return na
}

func (n *SetHistorySpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetHistorySpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetHistorySpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetHistorySpecList.Pos()
	case 0:
		return n.SetHistorySpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetHistorySpecListItem represents data reduced by productions:
//
//	SetHistorySpecListItem:
//	        "size" Expression
//	|       "quiet"            // Case 1
//	|       "numbers"          // Case 2
//	|       "full"             // Case 3
//	|       "trim"             // Case 4
//	|       "default"          // Case 5
type SetHistorySpecListItem struct {
	Case       int
	Expression *Expression
	Token      xc.Token
}

func (n *SetHistorySpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetHistorySpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetHistorySpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetHistorySpecListOpt represents data reduced by productions:
//
//	SetHistorySpecListOpt:
//	        /* empty */
//	|       SetHistorySpecList  // Case 1
type SetHistorySpecListOpt struct {
	SetHistorySpecList *SetHistorySpecList
}

func (n *SetHistorySpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetHistorySpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetHistorySpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetHistorySpecList.Pos()
}

// SetKeySpecList represents data reduced by productions:
//
//	SetKeySpecList:
//	        SetKeySpecListItem
//	|       SetKeySpecList SetKeySpecListItem  // Case 1
type SetKeySpecList struct {
	Case               int
	SetKeySpecList     *SetKeySpecList
	SetKeySpecListItem *SetKeySpecListItem
}

func (n *SetKeySpecList) reverse() *SetKeySpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetKeySpecList
	for nb != nil {
		nc := nb.SetKeySpecList
		nb.SetKeySpecList = na
		na = nb
		nb = nc
	}
	n.SetKeySpecList = nil
	return na
}

func (n *SetKeySpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetKeySpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetKeySpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetKeySpecList.Pos()
	case 0:
		return n.SetKeySpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetKeySpecListItem represents data reduced by productions:
//
//	SetKeySpecListItem:
//	        "on"
//	|       "off"                  // Case 1
//	|       "default"              // Case 2
//	|       "inside"               // Case 3
//	|       "out"                  // Case 4
//	|       "outside"              // Case 5
//	|       "above"                // Case 6
//	|       "below"                // Case 7
//	|       "under"                // Case 8
//	|       "lmargin"              // Case 9
//	|       "rmargin"              // Case 10
//	|       "tmargin"              // Case 11
//	|       "bmargin"              // Case 12
//	|       "at" Position          // Case 13
//	|       "left"                 // Case 14
//	|       "right"                // Case 15
//	|       "center"               // Case 16
//	|       "top"                  // Case 17
//	|       "bot"                  // Case 18
//	|       "bottom"               // Case 19
//	|       "vertical"             // Case 20
//	|       "horizontal"           // Case 21
//	|       "Left"                 // Case 22
//	|       "Right"                // Case 23
//	|       "opaque"               // Case 24
//	|       "noopaque"             // Case 25
//	|       "reverse"              // Case 26
//	|       "noreverse"            // Case 27
//	|       "invert"               // Case 28
//	|       "noinvert"             // Case 29
//	|       "sample" Expression    // Case 30
//	|       "samplen" Expression   // Case 31
//	|       "spacing" Expression   // Case 32
//	|       "width" Expression     // Case 33
//	|       "height" Expression    // Case 34
//	|       "autotitle"            // Case 35
//	|       "column"               // Case 36
//	|       "columnhead"           // Case 37
//	|       "columnheader"         // Case 38
//	|       "noautotitle"          // Case 39
//	|       "title" Expression     // Case 40
//	|       "enhanced"             // Case 41
//	|       "noenhanced"           // Case 42
//	|       "font" Expression      // Case 43
//	|       "textcolor" ColorSpec  // Case 44
//	|       "box"                  // Case 45
//	|       "nobox"                // Case 46
//	|       LineStyleListItem      // Case 47
//	|       "maxcols" Expression   // Case 48
//	|       "maxcols" "auto"       // Case 49
//	|       "maxrows" Expression   // Case 50
//	|       "maxrows" "auto"       // Case 51
type SetKeySpecListItem struct {
	Case              int
	ColorSpec         *ColorSpec
	Expression        *Expression
	LineStyleListItem *LineStyleListItem
	Position          *Position
	Token             xc.Token
	Token2            xc.Token
}

func (n *SetKeySpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetKeySpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetKeySpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 47:
		return n.LineStyleListItem.Pos()
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetKeySpecListOpt represents data reduced by productions:
//
//	SetKeySpecListOpt:
//	        /* empty */
//	|       SetKeySpecList  // Case 1
type SetKeySpecListOpt struct {
	SetKeySpecList *SetKeySpecList
}

func (n *SetKeySpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetKeySpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetKeySpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetKeySpecList.Pos()
}

// SetLabelSpec represents data reduced by production:
//
//	SetLabelSpec:
//	        ExpressionOpt SetLabelSpecList
type SetLabelSpec struct {
	ExpressionOpt    *ExpressionOpt
	SetLabelSpecList *SetLabelSpecList
}

func (n *SetLabelSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetLabelSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetLabelSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	if p := n.ExpressionOpt.Pos(); p != 0 {
		return p
	}

	return n.SetLabelSpecList.Pos()
}

// SetLabelSpecList represents data reduced by productions:
//
//	SetLabelSpecList:
//	        SetLabelSpecListItem
//	|       SetLabelSpecList SetLabelSpecListItem  // Case 1
type SetLabelSpecList struct {
	Case                 int
	SetLabelSpecList     *SetLabelSpecList
	SetLabelSpecListItem *SetLabelSpecListItem
}

func (n *SetLabelSpecList) reverse() *SetLabelSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetLabelSpecList
	for nb != nil {
		nc := nb.SetLabelSpecList
		nb.SetLabelSpecList = na
		na = nb
		nb = nc
	}
	n.SetLabelSpecList = nil
	return na
}

func (n *SetLabelSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetLabelSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetLabelSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetLabelSpecList.Pos()
	case 0:
		return n.SetLabelSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetLabelSpecListItem represents data reduced by productions:
//
//	SetLabelSpecListItem:
//	        SimpleExpression
//	|       "at" Position                       // Case 1
//	|       "left"                              // Case 2
//	|       "center"                            // Case 3
//	|       "right"                             // Case 4
//	|       "norotate"                          // Case 5
//	|       "rotate"                            // Case 6
//	|       "rotate" "by" Expression            // Case 7
//	|       "font" Expression                   // Case 8
//	|       "noenhanced"                        // Case 9
//	|       "front"                             // Case 10
//	|       "back"                              // Case 11
//	|       "textcolor" ColorSpec               // Case 12
//	|       "point"                             // Case 13
//	|       "nopoint"                           // Case 14
//	|       "offset" Expression                 // Case 15
//	|       "offset" Expression ',' Expression  // Case 16
//	|       "boxed"                             // Case 17
//	|       "hypertext"                         // Case 18
//	|       LineStyleListItem                   // Case 19
type SetLabelSpecListItem struct {
	Case              int
	ColorSpec         *ColorSpec
	Expression        *Expression
	Expression2       *Expression
	LineStyleListItem *LineStyleListItem
	Position          *Position
	SimpleExpression  *SimpleExpression
	Token             xc.Token
	Token2            xc.Token
}

func (n *SetLabelSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetLabelSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetLabelSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 19:
		return n.LineStyleListItem.Pos()
	case 0:
		return n.SimpleExpression.Pos()
	case 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetLinkSpecList represents data reduced by productions:
//
//	SetLinkSpecList:
//	        SetLinkSpecListItem
//	|       SetLinkSpecList SetLinkSpecListItem  // Case 1
type SetLinkSpecList struct {
	Case                int
	SetLinkSpecList     *SetLinkSpecList
	SetLinkSpecListItem *SetLinkSpecListItem
}

func (n *SetLinkSpecList) reverse() *SetLinkSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetLinkSpecList
	for nb != nil {
		nc := nb.SetLinkSpecList
		nb.SetLinkSpecList = na
		na = nb
		nb = nc
	}
	n.SetLinkSpecList = nil
	return na
}

func (n *SetLinkSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetLinkSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetLinkSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetLinkSpecList.Pos()
	case 0:
		return n.SetLinkSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetLinkSpecListItem represents data reduced by productions:
//
//	SetLinkSpecListItem:
//	        "x"
//	|       "y"                                    // Case 1
//	|       "x2"                                   // Case 2
//	|       "y2"                                   // Case 3
//	|       "via" Expression "inverse" Expression  // Case 4
type SetLinkSpecListItem struct {
	Case        int
	Expression  *Expression
	Expression2 *Expression
	Token       xc.Token
	Token2      xc.Token
}

func (n *SetLinkSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetLinkSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetLinkSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetLinkSpecListOpt represents data reduced by productions:
//
//	SetLinkSpecListOpt:
//	        /* empty */
//	|       SetLinkSpecList  // Case 1
type SetLinkSpecListOpt struct {
	SetLinkSpecList *SetLinkSpecList
}

func (n *SetLinkSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetLinkSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetLinkSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetLinkSpecList.Pos()
}

// SetLogscaleAxesList represents data reduced by productions:
//
//	SetLogscaleAxesList:
//	        SetLogscaleAxesListItem
//	|       SetLogscaleAxesList SetLogscaleAxesListItem  // Case 1
type SetLogscaleAxesList struct {
	Case                    int
	SetLogscaleAxesList     *SetLogscaleAxesList
	SetLogscaleAxesListItem *SetLogscaleAxesListItem
}

func (n *SetLogscaleAxesList) reverse() *SetLogscaleAxesList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetLogscaleAxesList
	for nb != nil {
		nc := nb.SetLogscaleAxesList
		nb.SetLogscaleAxesList = na
		na = nb
		nb = nc
	}
	n.SetLogscaleAxesList = nil
	return na
}

func (n *SetLogscaleAxesList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetLogscaleAxesList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetLogscaleAxesList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetLogscaleAxesList.Pos()
	case 0:
		return n.SetLogscaleAxesListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetLogscaleAxesListItem represents data reduced by productions:
//
//	SetLogscaleAxesListItem:
//	        "x"
//	|       "x2"  // Case 1
//	|       "y"   // Case 2
//	|       "y2"  // Case 3
//	|       "z"   // Case 4
//	|       "cb"  // Case 5
//	|       "r"   // Case 6
type SetLogscaleAxesListItem struct {
	Case  int
	Token xc.Token
}

func (n *SetLogscaleAxesListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetLogscaleAxesListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetLogscaleAxesListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetLogscaleAxesListOpt represents data reduced by productions:
//
//	SetLogscaleAxesListOpt:
//	        /* empty */
//	|       SetLogscaleAxesList  // Case 1
type SetLogscaleAxesListOpt struct {
	SetLogscaleAxesList *SetLogscaleAxesList
}

func (n *SetLogscaleAxesListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetLogscaleAxesListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetLogscaleAxesListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetLogscaleAxesList.Pos()
}

// SetLogscaleSpec represents data reduced by production:
//
//	SetLogscaleSpec:
//	        SetLogscaleAxesListOpt ExpressionOpt
type SetLogscaleSpec struct {
	ExpressionOpt          *ExpressionOpt
	SetLogscaleAxesListOpt *SetLogscaleAxesListOpt
}

func (n *SetLogscaleSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetLogscaleSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetLogscaleSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	if p := n.SetLogscaleAxesListOpt.Pos(); p != 0 {
		return p
	}

	return n.ExpressionOpt.Pos()
}

// SetMappingSpec represents data reduced by productions:
//
//	SetMappingSpec:
//	        "cartesian"
//	|       "spherical"    // Case 1
//	|       "cylindrical"  // Case 2
type SetMappingSpec struct {
	Case  int
	Token xc.Token
}

func (n *SetMappingSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetMappingSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetMappingSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetMonochromeSpecOpt represents data reduced by productions:
//
//	SetMonochromeSpecOpt:
//	        /* empty */
//	|       "linetype" Expression LineStyleList  // Case 1
type SetMonochromeSpecOpt struct {
	Expression    *Expression
	LineStyleList *LineStyleList
	Token         xc.Token
}

func (n *SetMonochromeSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetMonochromeSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetMonochromeSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetMouseSpecList represents data reduced by productions:
//
//	SetMouseSpecList:
//	        SetMouseSpecListItem
//	|       SetMouseSpecList SetMouseSpecListItem  // Case 1
type SetMouseSpecList struct {
	Case                 int
	SetMouseSpecList     *SetMouseSpecList
	SetMouseSpecListItem *SetMouseSpecListItem
}

func (n *SetMouseSpecList) reverse() *SetMouseSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetMouseSpecList
	for nb != nil {
		nc := nb.SetMouseSpecList
		nb.SetMouseSpecList = na
		na = nb
		nb = nc
	}
	n.SetMouseSpecList = nil
	return na
}

func (n *SetMouseSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetMouseSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetMouseSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetMouseSpecList.Pos()
	case 0:
		return n.SetMouseSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetMouseSpecListItem represents data reduced by productions:
//
//	SetMouseSpecListItem:
//	        "doubleclick" Expression
//	|       "nodoubleclick"                          // Case 1
//	|       "zoomcoordinates"                        // Case 2
//	|       "nozoomcoordinates"                      // Case 3
//	|       "zoomfactors" Expression ',' Expression  // Case 4
//	|       "noruler"                                // Case 5
//	|       "ruler" "at" Expression ',' Expression   // Case 6
//	|       "polardistancedeg"                       // Case 7
//	|       "polardistancetan"                       // Case 8
//	|       "nopolardistance"                        // Case 9
//	|       "format" Expression                      // Case 10
//	|       "mouseformat" Expression                 // Case 11
//	|       "labels"                                 // Case 12
//	|       "labels" Expression                      // Case 13
//	|       "nolabels"                               // Case 14
//	|       "nolabels" Expression                    // Case 15
//	|       "zoomjump"                               // Case 16
//	|       "nozoomjump"                             // Case 17
//	|       "verbose"                                // Case 18
//	|       "noverbose"                              // Case 19
type SetMouseSpecListItem struct {
	Case        int
	Expression  *Expression
	Expression2 *Expression
	Token       xc.Token
	Token2      xc.Token
	Token3      xc.Token
}

func (n *SetMouseSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetMouseSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetMouseSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetMouseSpecListOpt represents data reduced by productions:
//
//	SetMouseSpecListOpt:
//	        /* empty */
//	|       SetMouseSpecList  // Case 1
type SetMouseSpecListOpt struct {
	SetMouseSpecList *SetMouseSpecList
}

func (n *SetMouseSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetMouseSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetMouseSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetMouseSpecList.Pos()
}

// SetMultiplotSpecList represents data reduced by productions:
//
//	SetMultiplotSpecList:
//	        SetMultiplotSpecListItem
//	|       SetMultiplotSpecList SetMultiplotSpecListItem  // Case 1
type SetMultiplotSpecList struct {
	Case                     int
	SetMultiplotSpecList     *SetMultiplotSpecList
	SetMultiplotSpecListItem *SetMultiplotSpecListItem
}

func (n *SetMultiplotSpecList) reverse() *SetMultiplotSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetMultiplotSpecList
	for nb != nil {
		nc := nb.SetMultiplotSpecList
		nb.SetMultiplotSpecList = na
		na = nb
		nb = nc
	}
	n.SetMultiplotSpecList = nil
	return na
}

func (n *SetMultiplotSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetMultiplotSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetMultiplotSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetMultiplotSpecList.Pos()
	case 0:
		return n.SetMultiplotSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetMultiplotSpecListItem represents data reduced by productions:
//
//	SetMultiplotSpecListItem:
//	        "title" Expression
//	|       "font" Expression                   // Case 1
//	|       "enhanced"                          // Case 2
//	|       "noenhanced"                        // Case 3
//	|       "layout" Expression ',' Expression  // Case 4
//	|       "rowsfirst"                         // Case 5
//	|       "columnsfirst"                      // Case 6
//	|       "downwards"                         // Case 7
//	|       "upwards"                           // Case 8
//	|       "scale" Position                    // Case 9
//	|       "offset" Position                   // Case 10
//	|       "margins" Position                  // Case 11
//	|       "spacing" Position                  // Case 12
//	|       "next"                              // Case 13
//	|       "previous"                          // Case 14
type SetMultiplotSpecListItem struct {
	Case        int
	Expression  *Expression
	Expression2 *Expression
	Position    *Position
	Token       xc.Token
	Token2      xc.Token
}

func (n *SetMultiplotSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetMultiplotSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetMultiplotSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetMultiplotSpecListOpt represents data reduced by productions:
//
//	SetMultiplotSpecListOpt:
//	        /* empty */
//	|       SetMultiplotSpecList  // Case 1
type SetMultiplotSpecListOpt struct {
	SetMultiplotSpecList *SetMultiplotSpecList
}

func (n *SetMultiplotSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetMultiplotSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetMultiplotSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetMultiplotSpecList.Pos()
}

// SetMxticsSpecOpt represents data reduced by productions:
//
//	SetMxticsSpecOpt:
//	        /* empty */
//	|       "default"    // Case 1
//	|       Expression   // Case 2
type SetMxticsSpecOpt struct {
	Case       int
	Expression *Expression
	Token      xc.Token
}

func (n *SetMxticsSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetMxticsSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetMxticsSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 2:
		return n.Expression.Pos()
	case 1:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetObjectSpecList represents data reduced by productions:
//
//	SetObjectSpecList:
//	        SetObjectSpecListItem
//	|       SetObjectSpecList SetObjectSpecListItem  // Case 1
type SetObjectSpecList struct {
	Case                  int
	SetObjectSpecList     *SetObjectSpecList
	SetObjectSpecListItem *SetObjectSpecListItem
}

func (n *SetObjectSpecList) reverse() *SetObjectSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetObjectSpecList
	for nb != nil {
		nc := nb.SetObjectSpecList
		nb.SetObjectSpecList = na
		na = nb
		nb = nc
	}
	n.SetObjectSpecList = nil
	return na
}

func (n *SetObjectSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetObjectSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetObjectSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetObjectSpecList.Pos()
	case 0:
		return n.SetObjectSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetObjectSpecListItem represents data reduced by productions:
//
//	SetObjectSpecListItem:
//	        "front"
//	|       "back"                                   // Case 1
//	|       "behind"                                 // Case 2
//	|       "clip"                                   // Case 3
//	|       "noclip"                                 // Case 4
//	|       "fc" ColorSpec                           // Case 5
//	|       "fc" "lt" ColorSpec                      // Case 6
//	|       "fillcolor" ColorSpec                    // Case 7
//	|       "fillcolor" "lt" ColorSpec               // Case 8
//	|       "fs" SetStyleFillSpecList                // Case 9
//	|       "fillstyle" SetStyleFillSpecList         // Case 10
//	|       "default"                                // Case 11
//	|       "lw" Expression                          // Case 12
//	|       "linewidth" Expression                   // Case 13
//	|       "dt" DashTypeSpec                        // Case 14
//	|       "dashtype" DashTypeSpec                  // Case 15
//	|       "rectangle"                              // Case 16
//	|       "from" Position "to" Position            // Case 17
//	|       "from" Position "rto" Position           // Case 18
//	|       "center" Position "size" Position        // Case 19
//	|       "at" Position "size" Position            // Case 20
//	|       "at" Position "radius" Position          // Case 21
//	|       "ellipse"                                // Case 22
//	|       "angle" Expression                       // Case 23
//	|       "units" "xy"                             // Case 24
//	|       "units" "xx"                             // Case 25
//	|       "units" "yy"                             // Case 26
//	|       "circle"                                 // Case 27
//	|       "arc" '[' Expression ':' Expression ']'  // Case 28
//	|       "polygon"                                // Case 29
//	|       "to" Position                            // Case 30
//	|       "rto" Position                           // Case 31
type SetObjectSpecListItem struct {
	Case                 int
	ColorSpec            *ColorSpec
	DashTypeSpec         *DashTypeSpec
	Expression           *Expression
	Expression2          *Expression
	Position             *Position
	Position2            *Position
	SetStyleFillSpecList *SetStyleFillSpecList
	Token                xc.Token
	Token2               xc.Token
	Token3               xc.Token
	Token4               xc.Token
}

func (n *SetObjectSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetObjectSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetObjectSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetOffsetsSpecOpt represents data reduced by productions:
//
//	SetOffsetsSpecOpt:
//	        /* empty */
//	|       Expression ',' Expression                                // Case 1
//	|       Expression ',' Expression ',' Expression ',' Expression  // Case 2
type SetOffsetsSpecOpt struct {
	Case        int
	Expression  *Expression
	Expression2 *Expression
	Expression3 *Expression
	Expression4 *Expression
	Token       xc.Token
	Token2      xc.Token
	Token3      xc.Token
}

func (n *SetOffsetsSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetOffsetsSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetOffsetsSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1, 2:
		return n.Expression.Pos()
	default:
		panic("internal error")
	}
}

// SetPaletteSpecList represents data reduced by productions:
//
//	SetPaletteSpecList:
//	        SetPaletteSpecListItem
//	|       SetPaletteSpecList SetPaletteSpecListItem  // Case 1
type SetPaletteSpecList struct {
	Case                   int
	SetPaletteSpecList     *SetPaletteSpecList
	SetPaletteSpecListItem *SetPaletteSpecListItem
}

func (n *SetPaletteSpecList) reverse() *SetPaletteSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetPaletteSpecList
	for nb != nil {
		nc := nb.SetPaletteSpecList
		nb.SetPaletteSpecList = na
		na = nb
		nb = nc
	}
	n.SetPaletteSpecList = nil
	return na
}

func (n *SetPaletteSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetPaletteSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetPaletteSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetPaletteSpecList.Pos()
	case 0:
		return n.SetPaletteSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetPaletteSpecListItem represents data reduced by productions:
//
//	SetPaletteSpecListItem:
//	        "gray"
//	|       "color"                                                 // Case 1
//	|       "gamma" Expression                                      // Case 2
//	|       "rgb" Expression ',' Expression ',' Expression          // Case 3
//	|       "rgbformulae" Expression ',' Expression ',' Expression  // Case 4
//	|       "defined"                                               // Case 5
//	|       "defined" '(' SetPalleteDefinedColorList ')'            // Case 6
//	|       "file" Expression DatafileModifiersListOpt              // Case 7
//	|       "func" Expression ',' Expression ',' Expression         // Case 8
//	|       "functions" Expression ',' Expression ',' Expression    // Case 9
//	|       "cubehelix"                                             // Case 10
//	|       "start" Expression                                      // Case 11
//	|       "cycles" Expression                                     // Case 12
//	|       "saturation" Expression                                 // Case 13
//	|       "mode" "RGB"                                            // Case 14
//	|       "mode" "HSV"                                            // Case 15
//	|       "mode" "CMY"                                            // Case 16
//	|       "mode" "YIQ"                                            // Case 17
//	|       "mode" "XYZ"                                            // Case 18
//	|       "model" "RGB"                                           // Case 19
//	|       "model" "HSV"                                           // Case 20
//	|       "model" "CMY"                                           // Case 21
//	|       "model" "YIQ"                                           // Case 22
//	|       "model" "XYZ"                                           // Case 23
//	|       "positive"                                              // Case 24
//	|       "negative"                                              // Case 25
//	|       "nops_allcF"                                            // Case 26
//	|       "ps_allcF"                                              // Case 27
//	|       "maxcolors" Expression                                  // Case 28
type SetPaletteSpecListItem struct {
	Data                       []byte // Content of the inline data block.
	Case                       int
	DatafileModifiersListOpt   *DatafileModifiersListOpt
	Expression                 *Expression
	Expression2                *Expression
	Expression3                *Expression
	SetPalleteDefinedColorList *SetPalleteDefinedColorList
	Token                      xc.Token
	Token2                     xc.Token
	Token3                     xc.Token
}

func (n *SetPaletteSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetPaletteSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetPaletteSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetPaletteSpecListOpt represents data reduced by productions:
//
//	SetPaletteSpecListOpt:
//	        /* empty */
//	|       SetPaletteSpecList  // Case 1
type SetPaletteSpecListOpt struct {
	SetPaletteSpecList *SetPaletteSpecList
}

func (n *SetPaletteSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetPaletteSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetPaletteSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetPaletteSpecList.Pos()
}

// SetPalleteDefinedColorList represents data reduced by productions:
//
//	SetPalleteDefinedColorList:
//	        SetPalleteDefinedColorListItem
//	|       SetPalleteDefinedColorList ',' SetPalleteDefinedColorListItem  // Case 1
type SetPalleteDefinedColorList struct {
	Case                           int
	SetPalleteDefinedColorList     *SetPalleteDefinedColorList
	SetPalleteDefinedColorListItem *SetPalleteDefinedColorListItem
	Token                          xc.Token
}

func (n *SetPalleteDefinedColorList) reverse() *SetPalleteDefinedColorList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetPalleteDefinedColorList
	for nb != nil {
		nc := nb.SetPalleteDefinedColorList
		nb.SetPalleteDefinedColorList = na
		na = nb
		nb = nc
	}
	n.SetPalleteDefinedColorList = nil
	return na
}

func (n *SetPalleteDefinedColorList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetPalleteDefinedColorList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetPalleteDefinedColorList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetPalleteDefinedColorList.Pos()
	case 0:
		return n.SetPalleteDefinedColorListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetPalleteDefinedColorListItem represents data reduced by productions:
//
//	SetPalleteDefinedColorListItem:
//	        Expression SimpleExpression SimpleExpression SimpleExpression
//	|       Expression SimpleExpression                                    // Case 1
type SetPalleteDefinedColorListItem struct {
	Case              int
	Expression        *Expression
	SimpleExpression  *SimpleExpression
	SimpleExpression2 *SimpleExpression
	SimpleExpression3 *SimpleExpression
}

func (n *SetPalleteDefinedColorListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetPalleteDefinedColorListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetPalleteDefinedColorListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Expression.Pos()
}

// SetPaxisSpecList represents data reduced by productions:
//
//	SetPaxisSpecList:
//	        SetPaxisSpecListItem
//	|       SetPaxisSpecList SetPaxisSpecListItem  // Case 1
type SetPaxisSpecList struct {
	Case                 int
	SetPaxisSpecList     *SetPaxisSpecList
	SetPaxisSpecListItem *SetPaxisSpecListItem
}

func (n *SetPaxisSpecList) reverse() *SetPaxisSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetPaxisSpecList
	for nb != nil {
		nc := nb.SetPaxisSpecList
		nb.SetPaxisSpecList = na
		na = nb
		nb = nc
	}
	n.SetPaxisSpecList = nil
	return na
}

func (n *SetPaxisSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetPaxisSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetPaxisSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetPaxisSpecList.Pos()
	case 0:
		return n.SetPaxisSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetPaxisSpecListItem represents data reduced by productions:
//
//	SetPaxisSpecListItem:
//	        "range" SetRangeSpecList
//	|       "tics" SetXTicsSpecListOpt  // Case 1
type SetPaxisSpecListItem struct {
	Case                int
	SetRangeSpecList    *SetRangeSpecList
	SetXTicsSpecListOpt *SetXTicsSpecListOpt
	Token               xc.Token
}

func (n *SetPaxisSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetPaxisSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetPaxisSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetPaxisSpecListOpt represents data reduced by productions:
//
//	SetPaxisSpecListOpt:
//	        /* empty */
//	|       SetPaxisSpecList  // Case 1
type SetPaxisSpecListOpt struct {
	SetPaxisSpecList *SetPaxisSpecList
}

func (n *SetPaxisSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetPaxisSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetPaxisSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetPaxisSpecList.Pos()
}

// SetPm3dSpecList represents data reduced by productions:
//
//	SetPm3dSpecList:
//	        SetPm3dSpecListItem
//	|       SetPm3dSpecList SetPm3dSpecListItem  // Case 1
type SetPm3dSpecList struct {
	Case                int
	SetPm3dSpecList     *SetPm3dSpecList
	SetPm3dSpecListItem *SetPm3dSpecListItem
}

func (n *SetPm3dSpecList) reverse() *SetPm3dSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetPm3dSpecList
	for nb != nil {
		nc := nb.SetPm3dSpecList
		nb.SetPm3dSpecList = na
		na = nb
		nb = nc
	}
	n.SetPm3dSpecList = nil
	return na
}

func (n *SetPm3dSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetPm3dSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetPm3dSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetPm3dSpecList.Pos()
	case 0:
		return n.SetPm3dSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetPm3dSpecListItem represents data reduced by productions:
//
//	SetPm3dSpecListItem:
//	        "at" Position
//	|       "interpolate" Expression ',' Expression  // Case 1
//	|       "scansautomatic"                         // Case 2
//	|       "scansforward"                           // Case 3
//	|       "scansbackward"                          // Case 4
//	|       "depthorder"                             // Case 5
//	|       "flush"                                  // Case 6
//	|       "begin"                                  // Case 7
//	|       "center"                                 // Case 8
//	|       "end"                                    // Case 9
//	|       "ftriangles"                             // Case 10
//	|       "noftriangles"                           // Case 11
//	|       "clip1in"                                // Case 12
//	|       "clip4in"                                // Case 13
//	|       "corners2color"                          // Case 14
//	|       "mean"                                   // Case 15
//	|       "geomean"                                // Case 16
//	|       "harmean"                                // Case 17
//	|       "rms"                                    // Case 18
//	|       "median"                                 // Case 19
//	|       "min"                                    // Case 20
//	|       "max"                                    // Case 21
//	|       "c1"                                     // Case 22
//	|       "c2"                                     // Case 23
//	|       "c3"                                     // Case 24
//	|       "c4"                                     // Case 25
//	|       "hidden3d"                               // Case 26
//	|       "hidden3d" Expression                    // Case 27
//	|       "implicit"                               // Case 28
//	|       "explicit"                               // Case 29
//	|       "map"                                    // Case 30
//	|       "border"                                 // Case 31
//	|       LineStyleListItem                        // Case 32
type SetPm3dSpecListItem struct {
	Case              int
	Expression        *Expression
	Expression2       *Expression
	LineStyleListItem *LineStyleListItem
	Position          *Position
	Token             xc.Token
	Token2            xc.Token
}

func (n *SetPm3dSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetPm3dSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetPm3dSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 32:
		return n.LineStyleListItem.Pos()
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetPm3dSpecListOpt represents data reduced by productions:
//
//	SetPm3dSpecListOpt:
//	        /* empty */
//	|       SetPm3dSpecList  // Case 1
type SetPm3dSpecListOpt struct {
	SetPm3dSpecList *SetPm3dSpecList
}

func (n *SetPm3dSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetPm3dSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetPm3dSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetPm3dSpecList.Pos()
}

// SetPrintSpecOpt represents data reduced by productions:
//
//	SetPrintSpecOpt:
//	        /* empty */
//	|       Expression           // Case 1
//	|       Expression "append"  // Case 2
type SetPrintSpecOpt struct {
	Case       int
	Expression *Expression
	Token      xc.Token
}

func (n *SetPrintSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetPrintSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetPrintSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1, 2:
		return n.Expression.Pos()
	default:
		panic("internal error")
	}
}

// SetRangeSpec represents data reduced by productions:
//
//	SetRangeSpec:
//	        Range SetRangeSpecListOpt
//	|       "restore"                  // Case 1
type SetRangeSpec struct {
	Case                int
	Range               *Range
	SetRangeSpecListOpt *SetRangeSpecListOpt
	Token               xc.Token
}

func (n *SetRangeSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetRangeSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetRangeSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.Range.Pos()
	case 1:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetRangeSpecList represents data reduced by productions:
//
//	SetRangeSpecList:
//	        SetRangeSpecListItem
//	|       SetRangeSpecList SetRangeSpecListItem  // Case 1
type SetRangeSpecList struct {
	Case                 int
	SetRangeSpecList     *SetRangeSpecList
	SetRangeSpecListItem *SetRangeSpecListItem
}

func (n *SetRangeSpecList) reverse() *SetRangeSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetRangeSpecList
	for nb != nil {
		nc := nb.SetRangeSpecList
		nb.SetRangeSpecList = na
		na = nb
		nb = nc
	}
	n.SetRangeSpecList = nil
	return na
}

func (n *SetRangeSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetRangeSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetRangeSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetRangeSpecList.Pos()
	case 0:
		return n.SetRangeSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetRangeSpecListItem represents data reduced by productions:
//
//	SetRangeSpecListItem:
//	        "reverse"
//	|       "noreverse"    // Case 1
//	|       "writeback"    // Case 2
//	|       "nowriteback"  // Case 3
//	|       "extend"       // Case 4
//	|       "noextend"     // Case 5
//	|       Range          // Case 6
type SetRangeSpecListItem struct {
	Case  int
	Range *Range
	Token xc.Token
}

func (n *SetRangeSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetRangeSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetRangeSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 6:
		return n.Range.Pos()
	case 0, 1, 2, 3, 4, 5:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetRangeSpecListOpt represents data reduced by productions:
//
//	SetRangeSpecListOpt:
//	        /* empty */
//	|       SetRangeSpecList  // Case 1
type SetRangeSpecListOpt struct {
	SetRangeSpecList *SetRangeSpecList
}

func (n *SetRangeSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetRangeSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetRangeSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetRangeSpecList.Pos()
}

// SetSizeSpecList represents data reduced by productions:
//
//	SetSizeSpecList:
//	        SetSizeSpecListItem
//	|       SetSizeSpecList SetSizeSpecListItem  // Case 1
type SetSizeSpecList struct {
	Case                int
	SetSizeSpecList     *SetSizeSpecList
	SetSizeSpecListItem *SetSizeSpecListItem
}

func (n *SetSizeSpecList) reverse() *SetSizeSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetSizeSpecList
	for nb != nil {
		nc := nb.SetSizeSpecList
		nb.SetSizeSpecList = na
		na = nb
		nb = nc
	}
	n.SetSizeSpecList = nil
	return na
}

func (n *SetSizeSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetSizeSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetSizeSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetSizeSpecList.Pos()
	case 0:
		return n.SetSizeSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetSizeSpecListItem represents data reduced by productions:
//
//	SetSizeSpecListItem:
//	        "square"
//	|       "nosquare"                       // Case 1
//	|       "ratio" Expression               // Case 2
//	|       "noratio"                        // Case 3
//	|       SimpleExpression ',' Expression  // Case 4
type SetSizeSpecListItem struct {
	Case             int
	Expression       *Expression
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetSizeSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetSizeSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetSizeSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 4:
		return n.SimpleExpression.Pos()
	case 0, 1, 2, 3:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetSpec represents data reduced by productions:
//
//	SetSpec:
//	        "angle" SetAnglesSpec
//	|       "angles" SetAnglesSpec                   // Case 1
//	|       "arrow" SetArrowSpec                     // Case 2
//	|       "auto" SetAutoscaleSpecListOpt           // Case 3
//	|       "autoscale" SetAutoscaleSpecListOpt      // Case 4
//	|       "bars" SetBarsSpecListOpt                // Case 5
//	|       "bmargin" SetBmarginSpecOpt              // Case 6
//	|       "border" SetBorderSpec                   // Case 7
//	|       "boxwidth" SetBoxwidthSpec               // Case 8
//	|       "cbdata" "time"                          // Case 9
//	|       "cbdtics"                                // Case 10
//	|       "cblabel" SetXLabelSpecOpt               // Case 11
//	|       "cbmtics"                                // Case 12
//	|       "cbrange" SetRangeSpec                   // Case 13
//	|       "cbtics" SetXTicsSpecListOpt             // Case 14
//	|       "clabel" Expression                      // Case 15
//	|       "clip" SetClipSpecOpt                    // Case 16
//	|       "cntrlabel" SetCntrlabelSpecList         // Case 17
//	|       "cntrp" SetCntrparamSpecList             // Case 18
//	|       "cntrparam" SetCntrparamSpecList         // Case 19
//	|       "colorbox" SetColorboxSpecListOpt        // Case 20
//	|       "colorsequence" SetColorsequenceSpecOpt  // Case 21
//	|       "contour" SetContourSpec                 // Case 22
//	|       "dashtype" DashTypeSpec                  // Case 23
//	|       "datafile" SetDatafileSpec               // Case 24
//	|       "decimalsign" SetDecimalsignSpecOpt      // Case 25
//	|       "dgrid3d" SetDgrid3dSpecListOpt          // Case 26
//	|       "dummy" IdentifierOptList                // Case 27
//	|       "encoding" SetEncodingSpec               // Case 28
//	|       "fit" SetFitSpecList                     // Case 29
//	|       "fontpath" SetFontPathSpecOpt            // Case 30
//	|       "format" SetFormatSpec                   // Case 31
//	|       "grid" SetGridSpecListOpt                // Case 32
//	|       "hidden3d" SetHidden3dSpecListOpt        // Case 33
//	|       "history" SetHistorySpecListOpt          // Case 34
//	|       "iso" ExpressionList                     // Case 35
//	|       "isosamples" ExpressionList              // Case 36
//	|       "key" SetKeySpecListOpt                  // Case 37
//	|       "label" SetLabelSpec                     // Case 38
//	|       "linetype" Expression LineStyleList      // Case 39
//	|       "link" SetLinkSpecListOpt                // Case 40
//	|       "lmargin" SetBmarginSpecOpt              // Case 41
//	|       "loadpath" SetFontPathSpecOpt            // Case 42
//	|       "locale"                                 // Case 43
//	|       "locale" Expression                      // Case 44
//	|       "log" SetLogscaleSpec                    // Case 45
//	|       "logscale" SetLogscaleSpec               // Case 46
//	|       "macros"                                 // Case 47
//	|       "mapping" SetMappingSpec                 // Case 48
//	|       "margins" ExpressionList                 // Case 49
//	|       "mcbtics" SetMxticsSpecOpt               // Case 50
//	|       "mono" SetMonochromeSpecOpt              // Case 51
//	|       "monochrome" SetMonochromeSpecOpt        // Case 52
//	|       "mouse" SetMouseSpecListOpt              // Case 53
//	|       "multiplot" SetMultiplotSpecListOpt      // Case 54
//	|       "mx2tics" SetMxticsSpecOpt               // Case 55
//	|       "mxtics" SetMxticsSpecOpt                // Case 56
//	|       "my2tics" SetMxticsSpecOpt               // Case 57
//	|       "mytics" SetMxticsSpecOpt                // Case 58
//	|       "mztics" SetMxticsSpecOpt                // Case 59
//	|       "noxtics"                                // Case 60
//	|       "noytics"                                // Case 61
//	|       "object" Expression SetObjectSpecList    // Case 62
//	|       "offset" SetOffsetsSpecOpt               // Case 63
//	|       "offsets" SetOffsetsSpecOpt              // Case 64
//	|       "origin" Expression ',' Expression       // Case 65
//	|       "output" ExpressionOpt                   // Case 66
//	|       "pal" SetPaletteSpecListOpt              // Case 67
//	|       "palette" SetPaletteSpecListOpt          // Case 68
//	|       "para"                                   // Case 69
//	|       "parametric"                             // Case 70
//	|       "paxis" Expression SetPaxisSpecListOpt   // Case 71
//	|       "pm3d" SetPm3dSpecListOpt                // Case 72
//	|       "pointintervalbox" Expression            // Case 73
//	|       "pointsize" Expression                   // Case 74
//	|       "polar"                                  // Case 75
//	|       "print" SetPrintSpecOpt                  // Case 76
//	|       "psdir" Expression                       // Case 77
//	|       "raxis"                                  // Case 78
//	|       "rmargin" SetBmarginSpecOpt              // Case 79
//	|       "rrange" SetRangeSpec                    // Case 80
//	|       "rtics" SetXTicsSpecListOpt              // Case 81
//	|       "sam" ExpressionList                     // Case 82
//	|       "sample" ExpressionList                  // Case 83
//	|       "samples" ExpressionList                 // Case 84
//	|       "size" SetSizeSpecList                   // Case 85
//	|       "style" SetStyleSpec                     // Case 86
//	|       "surface" SetSurfaceSpecOpt              // Case 87
//	|       "table" SetTableSpecOpt                  // Case 88
//	|       "term" SetTerminalSpec                   // Case 89
//	|       "terminal" SetTerminalSpec               // Case 90
//	|       "termoption" SetTermoptionSpec           // Case 91
//	|       "tic" SetXTicsSpecListOpt                // Case 92
//	|       "tics" SetXTicsSpecListOpt               // Case 93
//	|       "ticslevel" Expression                   // Case 94
//	|       "time"                                   // Case 95
//	|       "timefmt" Expression                     // Case 96
//	|       "timestamp" SetTimestampSpecListOpt      // Case 97
//	|       "title" SetTitleSpecOpt                  // Case 98
//	|       "tmargin" SetBmarginSpecOpt              // Case 99
//	|       "trange" SetRangeSpec                    // Case 100
//	|       "urange" SetRangeSpec                    // Case 101
//	|       "vi" SetViewSpec                         // Case 102
//	|       "view" SetViewSpec                       // Case 103
//	|       "vrange" SetRangeSpec                    // Case 104
//	|       "x2data" "time"                          // Case 105
//	|       "x2dtics"                                // Case 106
//	|       "x2label" SetXLabelSpecOpt               // Case 107
//	|       "x2mtics"                                // Case 108
//	|       "x2range" SetRangeSpec                   // Case 109
//	|       "x2tics" SetXTicsSpecListOpt             // Case 110
//	|       "x2zeroaxis" SetZeroaxisSpecListOpt      // Case 111
//	|       "xdata" "time"                           // Case 112
//	|       "xdtics"                                 // Case 113
//	|       "xlabel" SetXLabelSpecOpt                // Case 114
//	|       "xmtics"                                 // Case 115
//	|       "xrange" SetRangeSpec                    // Case 116
//	|       "xtics" SetXTicsSpecListOpt              // Case 117
//	|       "xyplane" SetXyplaneSpec                 // Case 118
//	|       "xzeroaxis" SetZeroaxisSpecListOpt       // Case 119
//	|       "y2data" "time"                          // Case 120
//	|       "y2dtics"                                // Case 121
//	|       "y2label" SetXLabelSpecOpt               // Case 122
//	|       "y2mtics"                                // Case 123
//	|       "y2range" SetRangeSpec                   // Case 124
//	|       "y2tics" SetXTicsSpecListOpt             // Case 125
//	|       "y2zeroaxis" SetZeroaxisSpecListOpt      // Case 126
//	|       "ydata" "time"                           // Case 127
//	|       "ydtics"                                 // Case 128
//	|       "ylabel" SetXLabelSpecOpt                // Case 129
//	|       "ymtics"                                 // Case 130
//	|       "yrange" SetRangeSpec                    // Case 131
//	|       "ytics" SetXTicsSpecListOpt              // Case 132
//	|       "yzeroaxis" SetZeroaxisSpecListOpt       // Case 133
//	|       "zdata" "time"                           // Case 134
//	|       "zdtics"                                 // Case 135
//	|       "zero" Expression                        // Case 136
//	|       "zeroaxis" SetZeroaxisSpecListOpt        // Case 137
//	|       "zlabel" SetXLabelSpecOpt                // Case 138
//	|       "zmtics"                                 // Case 139
//	|       "zrange" SetRangeSpec                    // Case 140
//	|       "ztics" SetXTicsSpecListOpt              // Case 141
//	|       "zzeroaxis" SetZeroaxisSpecListOpt       // Case 142
type SetSpec struct {
	Case                    int
	DashTypeSpec            *DashTypeSpec
	Expression              *Expression
	Expression2             *Expression
	ExpressionList          *ExpressionList
	ExpressionOpt           *ExpressionOpt
	IdentifierOptList       *IdentifierOptList
	LineStyleList           *LineStyleList
	SetAnglesSpec           *SetAnglesSpec
	SetArrowSpec            *SetArrowSpec
	SetAutoscaleSpecListOpt *SetAutoscaleSpecListOpt
	SetBarsSpecListOpt      *SetBarsSpecListOpt
	SetBmarginSpecOpt       *SetBmarginSpecOpt
	SetBorderSpec           *SetBorderSpec
	SetBoxwidthSpec         *SetBoxwidthSpec
	SetClipSpecOpt          *SetClipSpecOpt
	SetCntrlabelSpecList    *SetCntrlabelSpecList
	SetCntrparamSpecList    *SetCntrparamSpecList
	SetColorboxSpecListOpt  *SetColorboxSpecListOpt
	SetColorsequenceSpecOpt *SetColorsequenceSpecOpt
	SetContourSpec          *SetContourSpec
	SetDatafileSpec         *SetDatafileSpec
	SetDecimalsignSpecOpt   *SetDecimalsignSpecOpt
	SetDgrid3dSpecListOpt   *SetDgrid3dSpecListOpt
	SetEncodingSpec         *SetEncodingSpec
	SetFitSpecList          *SetFitSpecList
	SetFontPathSpecOpt      *SetFontPathSpecOpt
	SetFormatSpec           *SetFormatSpec
	SetGridSpecListOpt      *SetGridSpecListOpt
	SetHidden3dSpecListOpt  *SetHidden3dSpecListOpt
	SetHistorySpecListOpt   *SetHistorySpecListOpt
	SetKeySpecListOpt       *SetKeySpecListOpt
	SetLabelSpec            *SetLabelSpec
	SetLinkSpecListOpt      *SetLinkSpecListOpt
	SetLogscaleSpec         *SetLogscaleSpec
	SetMappingSpec          *SetMappingSpec
	SetMonochromeSpecOpt    *SetMonochromeSpecOpt
	SetMouseSpecListOpt     *SetMouseSpecListOpt
	SetMultiplotSpecListOpt *SetMultiplotSpecListOpt
	SetMxticsSpecOpt        *SetMxticsSpecOpt
	SetObjectSpecList       *SetObjectSpecList
	SetOffsetsSpecOpt       *SetOffsetsSpecOpt
	SetPaletteSpecListOpt   *SetPaletteSpecListOpt
	SetPaxisSpecListOpt     *SetPaxisSpecListOpt
	SetPm3dSpecListOpt      *SetPm3dSpecListOpt
	SetPrintSpecOpt         *SetPrintSpecOpt
	SetRangeSpec            *SetRangeSpec
	SetSizeSpecList         *SetSizeSpecList
	SetStyleSpec            *SetStyleSpec
	SetSurfaceSpecOpt       *SetSurfaceSpecOpt
	SetTableSpecOpt         *SetTableSpecOpt
	SetTerminalSpec         *SetTerminalSpec
	SetTermoptionSpec       *SetTermoptionSpec
	SetTimestampSpecListOpt *SetTimestampSpecListOpt
	SetTitleSpecOpt         *SetTitleSpecOpt
	SetViewSpec             *SetViewSpec
	SetXLabelSpecOpt        *SetXLabelSpecOpt
	SetXTicsSpecListOpt     *SetXTicsSpecListOpt
	SetXyplaneSpec          *SetXyplaneSpec
	SetZeroaxisSpecListOpt  *SetZeroaxisSpecListOpt
	Token                   xc.Token
	Token2                  xc.Token
}

func (n *SetSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetStyleBoxplotSpecList represents data reduced by productions:
//
//	SetStyleBoxplotSpecList:
//	        SetStyleBoxplotSpecListItem
//	|       SetStyleBoxplotSpecList SetStyleBoxplotSpecListItem  // Case 1
type SetStyleBoxplotSpecList struct {
	Case                        int
	SetStyleBoxplotSpecList     *SetStyleBoxplotSpecList
	SetStyleBoxplotSpecListItem *SetStyleBoxplotSpecListItem
}

func (n *SetStyleBoxplotSpecList) reverse() *SetStyleBoxplotSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetStyleBoxplotSpecList
	for nb != nil {
		nc := nb.SetStyleBoxplotSpecList
		nb.SetStyleBoxplotSpecList = na
		na = nb
		nb = nc
	}
	n.SetStyleBoxplotSpecList = nil
	return na
}

func (n *SetStyleBoxplotSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetStyleBoxplotSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleBoxplotSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetStyleBoxplotSpecList.Pos()
	case 0:
		return n.SetStyleBoxplotSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetStyleBoxplotSpecListItem represents data reduced by productions:
//
//	SetStyleBoxplotSpecListItem:
//	        "range" Expression
//	|       "fraction" Expression    // Case 1
//	|       "outliers"               // Case 2
//	|       "nooutliers"             // Case 3
//	|       "pointtype" Expression   // Case 4
//	|       "candlesticks"           // Case 5
//	|       "financebars"            // Case 6
//	|       "separation" Expression  // Case 7
//	|       "labels" "off"           // Case 8
//	|       "labels" "auto"          // Case 9
//	|       "labels" "x"             // Case 10
//	|       "labels" "x2"            // Case 11
//	|       "sorted"                 // Case 12
//	|       "unsorted"               // Case 13
type SetStyleBoxplotSpecListItem struct {
	Case       int
	Expression *Expression
	Token      xc.Token
	Token2     xc.Token
}

func (n *SetStyleBoxplotSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetStyleBoxplotSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleBoxplotSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetStyleCircleSpecList represents data reduced by productions:
//
//	SetStyleCircleSpecList:
//	        SetStyleCircleSpecListItem
//	|       SetStyleCircleSpecList SetStyleCircleSpecListItem  // Case 1
type SetStyleCircleSpecList struct {
	Case                       int
	SetStyleCircleSpecList     *SetStyleCircleSpecList
	SetStyleCircleSpecListItem *SetStyleCircleSpecListItem
}

func (n *SetStyleCircleSpecList) reverse() *SetStyleCircleSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetStyleCircleSpecList
	for nb != nil {
		nc := nb.SetStyleCircleSpecList
		nb.SetStyleCircleSpecList = na
		na = nb
		nb = nc
	}
	n.SetStyleCircleSpecList = nil
	return na
}

func (n *SetStyleCircleSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetStyleCircleSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleCircleSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetStyleCircleSpecList.Pos()
	case 0:
		return n.SetStyleCircleSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetStyleCircleSpecListItem represents data reduced by productions:
//
//	SetStyleCircleSpecListItem:
//	        "radius" Position
//	|       "wedge"            // Case 1
//	|       "nowedge"          // Case 2
//	|       "clip"             // Case 3
//	|       "noclip"           // Case 4
type SetStyleCircleSpecListItem struct {
	Case     int
	Position *Position
	Token    xc.Token
}

func (n *SetStyleCircleSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetStyleCircleSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleCircleSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetStyleCircleSpecListOpt represents data reduced by productions:
//
//	SetStyleCircleSpecListOpt:
//	        /* empty */
//	|       SetStyleCircleSpecList  // Case 1
type SetStyleCircleSpecListOpt struct {
	SetStyleCircleSpecList *SetStyleCircleSpecList
}

func (n *SetStyleCircleSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetStyleCircleSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleCircleSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetStyleCircleSpecList.Pos()
}

// SetStyleEllipseSpecList represents data reduced by productions:
//
//	SetStyleEllipseSpecList:
//	        SetStyleEllipseSpecListItem
//	|       SetStyleEllipseSpecList SetStyleEllipseSpecListItem  // Case 1
type SetStyleEllipseSpecList struct {
	Case                        int
	SetStyleEllipseSpecList     *SetStyleEllipseSpecList
	SetStyleEllipseSpecListItem *SetStyleEllipseSpecListItem
}

func (n *SetStyleEllipseSpecList) reverse() *SetStyleEllipseSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetStyleEllipseSpecList
	for nb != nil {
		nc := nb.SetStyleEllipseSpecList
		nb.SetStyleEllipseSpecList = na
		na = nb
		nb = nc
	}
	n.SetStyleEllipseSpecList = nil
	return na
}

func (n *SetStyleEllipseSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetStyleEllipseSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleEllipseSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetStyleEllipseSpecList.Pos()
	case 0:
		return n.SetStyleEllipseSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetStyleEllipseSpecListItem represents data reduced by productions:
//
//	SetStyleEllipseSpecListItem:
//	        "units" "xx"
//	|       "units" "xy"        // Case 1
//	|       "units" "yy"        // Case 2
//	|       "size" Position     // Case 3
//	|       "angle" Expression  // Case 4
//	|       "clip"              // Case 5
//	|       "noclip"            // Case 6
type SetStyleEllipseSpecListItem struct {
	Case       int
	Expression *Expression
	Position   *Position
	Token      xc.Token
	Token2     xc.Token
}

func (n *SetStyleEllipseSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetStyleEllipseSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleEllipseSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetStyleEllipseSpecListOpt represents data reduced by productions:
//
//	SetStyleEllipseSpecListOpt:
//	        /* empty */
//	|       SetStyleEllipseSpecList  // Case 1
type SetStyleEllipseSpecListOpt struct {
	SetStyleEllipseSpecList *SetStyleEllipseSpecList
}

func (n *SetStyleEllipseSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetStyleEllipseSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleEllipseSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetStyleEllipseSpecList.Pos()
}

// SetStyleFillSpecList represents data reduced by productions:
//
//	SetStyleFillSpecList:
//	        SetStyleFillSpecListItem
//	|       SetStyleFillSpecList SetStyleFillSpecListItem  // Case 1
type SetStyleFillSpecList struct {
	Case                     int
	SetStyleFillSpecList     *SetStyleFillSpecList
	SetStyleFillSpecListItem *SetStyleFillSpecListItem
}

func (n *SetStyleFillSpecList) reverse() *SetStyleFillSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetStyleFillSpecList
	for nb != nil {
		nc := nb.SetStyleFillSpecList
		nb.SetStyleFillSpecList = na
		na = nb
		nb = nc
	}
	n.SetStyleFillSpecList = nil
	return na
}

func (n *SetStyleFillSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetStyleFillSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleFillSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetStyleFillSpecList.Pos()
	case 0:
		return n.SetStyleFillSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetStyleFillSpecListItem represents data reduced by productions:
//
//	SetStyleFillSpecListItem:
//	        "empty"
//	|       "transparent"         // Case 1
//	|       "solid"               // Case 2
//	|       "solid" Expression    // Case 3
//	|       "pattern" Expression  // Case 4
//	|       "bo"                  // Case 5
//	|       "bo" ColorSpec        // Case 6
//	|       "border"              // Case 7
//	|       "border" ColorSpec    // Case 8
//	|       "lt" ColorSpec        // Case 9
//	|       "lc" ColorSpec        // Case 10
//	|       "noborder"            // Case 11
type SetStyleFillSpecListItem struct {
	Case       int
	ColorSpec  *ColorSpec
	Expression *Expression
	Token      xc.Token
}

func (n *SetStyleFillSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetStyleFillSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleFillSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetStyleRectangleSpecList represents data reduced by productions:
//
//	SetStyleRectangleSpecList:
//	        SetStyleRectangleSpecListItem
//	|       SetStyleRectangleSpecList SetStyleRectangleSpecListItem  // Case 1
type SetStyleRectangleSpecList struct {
	Case                          int
	SetStyleRectangleSpecList     *SetStyleRectangleSpecList
	SetStyleRectangleSpecListItem *SetStyleRectangleSpecListItem
}

func (n *SetStyleRectangleSpecList) reverse() *SetStyleRectangleSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetStyleRectangleSpecList
	for nb != nil {
		nc := nb.SetStyleRectangleSpecList
		nb.SetStyleRectangleSpecList = na
		na = nb
		nb = nc
	}
	n.SetStyleRectangleSpecList = nil
	return na
}

func (n *SetStyleRectangleSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetStyleRectangleSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleRectangleSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetStyleRectangleSpecList.Pos()
	case 0:
		return n.SetStyleRectangleSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetStyleRectangleSpecListItem represents data reduced by productions:
//
//	SetStyleRectangleSpecListItem:
//	        "front"
//	|       "back"                     // Case 1
//	|       "lw" Expression            // Case 2
//	|       "linewidth" Expression     // Case 3
//	|       "fillcolor" ColorSpec      // Case 4
//	|       "fc" ColorSpec             // Case 5
//	|       "fs" SetStyleFillSpecList  // Case 6
type SetStyleRectangleSpecListItem struct {
	Case                 int
	ColorSpec            *ColorSpec
	Expression           *Expression
	SetStyleFillSpecList *SetStyleFillSpecList
	Token                xc.Token
}

func (n *SetStyleRectangleSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetStyleRectangleSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleRectangleSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetStyleRectangleSpecListOpt represents data reduced by productions:
//
//	SetStyleRectangleSpecListOpt:
//	        /* empty */
//	|       SetStyleRectangleSpecList  // Case 1
type SetStyleRectangleSpecListOpt struct {
	SetStyleRectangleSpecList *SetStyleRectangleSpecList
}

func (n *SetStyleRectangleSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetStyleRectangleSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleRectangleSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetStyleRectangleSpecList.Pos()
}

// SetStyleSpec represents data reduced by productions:
//
//	SetStyleSpec:
//	        "arrow" Expression "default"
//	|       "arrow" Expression ArrowStyleList              // Case 1
//	|       "boxplot" SetStyleBoxplotSpecList              // Case 2
//	|       "data" PlotElementStyle                        // Case 3
//	|       "fill" SetStyleFillSpecList                    // Case 4
//	|       "func" PlotElementStyle                        // Case 5
//	|       "function" PlotElementStyle                    // Case 6
//	|       "line" Expression LineStyleList                // Case 7
//	|       "circle" SetStyleCircleSpecListOpt             // Case 8
//	|       "ellipse" SetStyleEllipseSpecListOpt           // Case 9
//	|       "histogram" PlotElementStyleHistogramsListOpt  // Case 10
//	|       "increment"                                    // Case 11
//	|       "increment" "default"                          // Case 12
//	|       "increment" "userstyles"                       // Case 13
//	|       "rectangle" SetStyleRectangleSpecListOpt       // Case 14
//	|       "textbox" SetStyleTextboxSpecListOpt           // Case 15
type SetStyleSpec struct {
	ArrowStyleList                    *ArrowStyleList
	Case                              int
	Expression                        *Expression
	LineStyleList                     *LineStyleList
	PlotElementStyle                  *PlotElementStyle
	PlotElementStyleHistogramsListOpt *PlotElementStyleHistogramsListOpt
	SetStyleBoxplotSpecList           *SetStyleBoxplotSpecList
	SetStyleCircleSpecListOpt         *SetStyleCircleSpecListOpt
	SetStyleEllipseSpecListOpt        *SetStyleEllipseSpecListOpt
	SetStyleFillSpecList              *SetStyleFillSpecList
	SetStyleRectangleSpecListOpt      *SetStyleRectangleSpecListOpt
	SetStyleTextboxSpecListOpt        *SetStyleTextboxSpecListOpt
	Token                             xc.Token
	Token2                            xc.Token
}

func (n *SetStyleSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetStyleSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetStyleTextboxSpecList represents data reduced by productions:
//
//	SetStyleTextboxSpecList:
//	        SetStyleTextboxSpecListItem
//	|       SetStyleTextboxSpecList SetStyleTextboxSpecListItem  // Case 1
type SetStyleTextboxSpecList struct {
	Case                        int
	SetStyleTextboxSpecList     *SetStyleTextboxSpecList
	SetStyleTextboxSpecListItem *SetStyleTextboxSpecListItem
}

func (n *SetStyleTextboxSpecList) reverse() *SetStyleTextboxSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetStyleTextboxSpecList
	for nb != nil {
		nc := nb.SetStyleTextboxSpecList
		nb.SetStyleTextboxSpecList = na
		na = nb
		nb = nc
	}
	n.SetStyleTextboxSpecList = nil
	return na
}

func (n *SetStyleTextboxSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetStyleTextboxSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleTextboxSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetStyleTextboxSpecList.Pos()
	case 0:
		return n.SetStyleTextboxSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetStyleTextboxSpecListItem represents data reduced by productions:
//
//	SetStyleTextboxSpecListItem:
//	        "opaque"
//	|       "transparent"                        // Case 1
//	|       "border"                             // Case 2
//	|       "noborder"                           // Case 3
//	|       "margins" Expression ',' Expression  // Case 4
type SetStyleTextboxSpecListItem struct {
	Case        int
	Expression  *Expression
	Expression2 *Expression
	Token       xc.Token
	Token2      xc.Token
}

func (n *SetStyleTextboxSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetStyleTextboxSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleTextboxSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetStyleTextboxSpecListOpt represents data reduced by productions:
//
//	SetStyleTextboxSpecListOpt:
//	        /* empty */
//	|       SetStyleTextboxSpecList  // Case 1
type SetStyleTextboxSpecListOpt struct {
	SetStyleTextboxSpecList *SetStyleTextboxSpecList
}

func (n *SetStyleTextboxSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetStyleTextboxSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetStyleTextboxSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetStyleTextboxSpecList.Pos()
}

// SetSurfaceSpecOpt represents data reduced by productions:
//
//	SetSurfaceSpecOpt:
//	        /* empty */
//	|       "implicit"   // Case 1
//	|       "explicit"   // Case 2
type SetSurfaceSpecOpt struct {
	Case  int
	Token xc.Token
}

func (n *SetSurfaceSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetSurfaceSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetSurfaceSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1, 2:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTableSpecOpt represents data reduced by productions:
//
//	SetTableSpecOpt:
//	        /* empty */
//	|       Expression   // Case 1
type SetTableSpecOpt struct {
	Expression *Expression
}

func (n *SetTableSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTableSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTableSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Expression.Pos()
}

// SetTerminalAifmSpecList represents data reduced by productions:
//
//	SetTerminalAifmSpecList:
//	        SetTerminalAifmSpecListItem
//	|       SetTerminalAifmSpecList SetTerminalAifmSpecListItem  // Case 1
type SetTerminalAifmSpecList struct {
	Case                        int
	SetTerminalAifmSpecList     *SetTerminalAifmSpecList
	SetTerminalAifmSpecListItem *SetTerminalAifmSpecListItem
}

func (n *SetTerminalAifmSpecList) reverse() *SetTerminalAifmSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalAifmSpecList
	for nb != nil {
		nc := nb.SetTerminalAifmSpecList
		nb.SetTerminalAifmSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalAifmSpecList = nil
	return na
}

func (n *SetTerminalAifmSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalAifmSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalAifmSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalAifmSpecList.Pos()
	case 0:
		return n.SetTerminalAifmSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalAifmSpecListItem represents data reduced by productions:
//
//	SetTerminalAifmSpecListItem:
//	        "color"
//	|       "monochrome"      // Case 1
//	|       SimpleExpression  // Case 2
type SetTerminalAifmSpecListItem struct {
	Case             int
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetTerminalAifmSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalAifmSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalAifmSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 2:
		return n.SimpleExpression.Pos()
	case 0, 1:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalAifmSpecListOpt represents data reduced by productions:
//
//	SetTerminalAifmSpecListOpt:
//	        /* empty */
//	|       SetTerminalAifmSpecList  // Case 1
type SetTerminalAifmSpecListOpt struct {
	SetTerminalAifmSpecList *SetTerminalAifmSpecList
}

func (n *SetTerminalAifmSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalAifmSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalAifmSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalAifmSpecList.Pos()
}

// SetTerminalAquaSpecList represents data reduced by productions:
//
//	SetTerminalAquaSpecList:
//	        SetTerminalAquaSpecListItem
//	|       SetTerminalAquaSpecList SetTerminalAquaSpecListItem  // Case 1
type SetTerminalAquaSpecList struct {
	Case                        int
	SetTerminalAquaSpecList     *SetTerminalAquaSpecList
	SetTerminalAquaSpecListItem *SetTerminalAquaSpecListItem
}

func (n *SetTerminalAquaSpecList) reverse() *SetTerminalAquaSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalAquaSpecList
	for nb != nil {
		nc := nb.SetTerminalAquaSpecList
		nb.SetTerminalAquaSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalAquaSpecList = nil
	return na
}

func (n *SetTerminalAquaSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalAquaSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalAquaSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalAquaSpecList.Pos()
	case 0:
		return n.SetTerminalAquaSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalAquaSpecListItem represents data reduced by productions:
//
//	SetTerminalAquaSpecListItem:
//	        SimpleExpression
//	|       "title" Expression  // Case 1
//	|       "size"              // Case 2
//	|       "font" Expression   // Case 3
//	|       "enhanced"          // Case 4
//	|       "noenhanced"        // Case 5
//	|       "solid"             // Case 6
//	|       "dashed"            // Case 7
//	|       "dl" Expression     // Case 8
type SetTerminalAquaSpecListItem struct {
	Case             int
	Expression       *Expression
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetTerminalAquaSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalAquaSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalAquaSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.SimpleExpression.Pos()
	case 1, 2, 3, 4, 5, 6, 7, 8:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalAquaSpecListOpt represents data reduced by productions:
//
//	SetTerminalAquaSpecListOpt:
//	        /* empty */
//	|       SetTerminalAquaSpecList  // Case 1
type SetTerminalAquaSpecListOpt struct {
	SetTerminalAquaSpecList *SetTerminalAquaSpecList
}

func (n *SetTerminalAquaSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalAquaSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalAquaSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalAquaSpecList.Pos()
}

// SetTerminalBeSpecList represents data reduced by productions:
//
//	SetTerminalBeSpecList:
//	        SetTerminalBeSpecListItem
//	|       SetTerminalBeSpecList SetTerminalBeSpecListItem  // Case 1
type SetTerminalBeSpecList struct {
	Case                      int
	SetTerminalBeSpecList     *SetTerminalBeSpecList
	SetTerminalBeSpecListItem *SetTerminalBeSpecListItem
}

func (n *SetTerminalBeSpecList) reverse() *SetTerminalBeSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalBeSpecList
	for nb != nil {
		nc := nb.SetTerminalBeSpecList
		nb.SetTerminalBeSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalBeSpecList = nil
	return na
}

func (n *SetTerminalBeSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalBeSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalBeSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalBeSpecList.Pos()
	case 0:
		return n.SetTerminalBeSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalBeSpecListItem represents data reduced by productions:
//
//	SetTerminalBeSpecListItem:
//	        "reset"
//	|       SimpleExpression  // Case 1
type SetTerminalBeSpecListItem struct {
	Case             int
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetTerminalBeSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalBeSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalBeSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SimpleExpression.Pos()
	case 0:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalBeSpecListOpt represents data reduced by productions:
//
//	SetTerminalBeSpecListOpt:
//	        /* empty */
//	|       SetTerminalBeSpecList  // Case 1
type SetTerminalBeSpecListOpt struct {
	SetTerminalBeSpecList *SetTerminalBeSpecList
}

func (n *SetTerminalBeSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalBeSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalBeSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalBeSpecList.Pos()
}

// SetTerminalCairolatexSpecList represents data reduced by productions:
//
//	SetTerminalCairolatexSpecList:
//	        SetTerminalCairolatexSpecListItem
//	|       SetTerminalCairolatexSpecList SetTerminalCairolatexSpecListItem  // Case 1
type SetTerminalCairolatexSpecList struct {
	Case                              int
	SetTerminalCairolatexSpecList     *SetTerminalCairolatexSpecList
	SetTerminalCairolatexSpecListItem *SetTerminalCairolatexSpecListItem
}

func (n *SetTerminalCairolatexSpecList) reverse() *SetTerminalCairolatexSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalCairolatexSpecList
	for nb != nil {
		nc := nb.SetTerminalCairolatexSpecList
		nb.SetTerminalCairolatexSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalCairolatexSpecList = nil
	return na
}

func (n *SetTerminalCairolatexSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalCairolatexSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalCairolatexSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalCairolatexSpecList.Pos()
	case 0:
		return n.SetTerminalCairolatexSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalCairolatexSpecListItem represents data reduced by productions:
//
//	SetTerminalCairolatexSpecListItem:
//	        "eps"
//	|       "pdf"                      // Case 1
//	|       "standalone"               // Case 2
//	|       "input"                    // Case 3
//	|       "blacktext"                // Case 4
//	|       "colortext"                // Case 5
//	|       "colourtext"               // Case 6
//	|       "header" Expression        // Case 7
//	|       "noheader"                 // Case 8
//	|       "mono"                     // Case 9
//	|       "color"                    // Case 10
//	|       "transparent"              // Case 11
//	|       "notransparent"            // Case 12
//	|       "crop"                     // Case 13
//	|       "nocrop"                   // Case 14
//	|       "background" Expression    // Case 15
//	|       "font" Expression          // Case 16
//	|       "fontscale" Expression     // Case 17
//	|       "linewidth" Expression     // Case 18
//	|       "rounded"                  // Case 19
//	|       "butt"                     // Case 20
//	|       "square"                   // Case 21
//	|       "dashlength" Expression    // Case 22
//	|       "size" ExpressionUnitList  // Case 23
type SetTerminalCairolatexSpecListItem struct {
	Case               int
	Expression         *Expression
	ExpressionUnitList *ExpressionUnitList
	Token              xc.Token
}

func (n *SetTerminalCairolatexSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalCairolatexSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalCairolatexSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalCairolatexSpecListOpt represents data reduced by productions:
//
//	SetTerminalCairolatexSpecListOpt:
//	        /* empty */
//	|       SetTerminalCairolatexSpecList  // Case 1
type SetTerminalCairolatexSpecListOpt struct {
	SetTerminalCairolatexSpecList *SetTerminalCairolatexSpecList
}

func (n *SetTerminalCairolatexSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalCairolatexSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalCairolatexSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalCairolatexSpecList.Pos()
}

// SetTerminalCanvasSpecList represents data reduced by productions:
//
//	SetTerminalCanvasSpecList:
//	        SetTerminalCanvasSpecListItem
//	|       SetTerminalCanvasSpecList SetTerminalCanvasSpecListItem  // Case 1
type SetTerminalCanvasSpecList struct {
	Case                          int
	SetTerminalCanvasSpecList     *SetTerminalCanvasSpecList
	SetTerminalCanvasSpecListItem *SetTerminalCanvasSpecListItem
}

func (n *SetTerminalCanvasSpecList) reverse() *SetTerminalCanvasSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalCanvasSpecList
	for nb != nil {
		nc := nb.SetTerminalCanvasSpecList
		nb.SetTerminalCanvasSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalCanvasSpecList = nil
	return na
}

func (n *SetTerminalCanvasSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalCanvasSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalCanvasSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalCanvasSpecList.Pos()
	case 0:
		return n.SetTerminalCanvasSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalCanvasSpecListItem represents data reduced by productions:
//
//	SetTerminalCanvasSpecListItem:
//	        "size" Expression ',' Expression
//	|       "background" Expression           // Case 1
//	|       "fsize" Expression                // Case 2
//	|       "enhanced"                        // Case 3
//	|       "noenhanced"                      // Case 4
//	|       "linewidth" Expression            // Case 5
//	|       "lw" Expression                   // Case 6
//	|       "rounded"                         // Case 7
//	|       "butt"                            // Case 8
//	|       "square"                          // Case 9
//	|       "dashlength" Expression           // Case 10
//	|       "standalone"                      // Case 11
//	|       "mousing"                         // Case 12
//	|       "name" Expression                 // Case 13
//	|       "jsdir" Expression                // Case 14
//	|       "title" Expression                // Case 15
type SetTerminalCanvasSpecListItem struct {
	Case        int
	Expression  *Expression
	Expression2 *Expression
	Token       xc.Token
	Token2      xc.Token
}

func (n *SetTerminalCanvasSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalCanvasSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalCanvasSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalCanvasSpecListOpt represents data reduced by productions:
//
//	SetTerminalCanvasSpecListOpt:
//	        /* empty */
//	|       SetTerminalCanvasSpecList  // Case 1
type SetTerminalCanvasSpecListOpt struct {
	SetTerminalCanvasSpecList *SetTerminalCanvasSpecList
}

func (n *SetTerminalCanvasSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalCanvasSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalCanvasSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalCanvasSpecList.Pos()
}

// SetTerminalCgmSpecList represents data reduced by productions:
//
//	SetTerminalCgmSpecList:
//	        SetTerminalCgmSpecListItem
//	|       SetTerminalCgmSpecList SetTerminalCgmSpecListItem  // Case 1
type SetTerminalCgmSpecList struct {
	Case                       int
	SetTerminalCgmSpecList     *SetTerminalCgmSpecList
	SetTerminalCgmSpecListItem *SetTerminalCgmSpecListItem
}

func (n *SetTerminalCgmSpecList) reverse() *SetTerminalCgmSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalCgmSpecList
	for nb != nil {
		nc := nb.SetTerminalCgmSpecList
		nb.SetTerminalCgmSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalCgmSpecList = nil
	return na
}

func (n *SetTerminalCgmSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalCgmSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalCgmSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalCgmSpecList.Pos()
	case 0:
		return n.SetTerminalCgmSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalCgmSpecListItem represents data reduced by productions:
//
//	SetTerminalCgmSpecListItem:
//	        "color"
//	|       "monochrome"             // Case 1
//	|       "solid"                  // Case 2
//	|       "dashed"                 // Case 3
//	|       "rotate"                 // Case 4
//	|       "norotate"               // Case 5
//	|       SimpleExpression         // Case 6
//	|       "width" Expression       // Case 7
//	|       "linewidth" Expression   // Case 8
//	|       "font" Expression        // Case 9
//	|       "background" Expression  // Case 10
type SetTerminalCgmSpecListItem struct {
	Case             int
	Expression       *Expression
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetTerminalCgmSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalCgmSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalCgmSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 6:
		return n.SimpleExpression.Pos()
	case 0, 1, 2, 3, 4, 5, 7, 8, 9, 10:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalCgmSpecListOpt represents data reduced by productions:
//
//	SetTerminalCgmSpecListOpt:
//	        /* empty */
//	|       SetTerminalCgmSpecList  // Case 1
type SetTerminalCgmSpecListOpt struct {
	SetTerminalCgmSpecList *SetTerminalCgmSpecList
}

func (n *SetTerminalCgmSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalCgmSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalCgmSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalCgmSpecList.Pos()
}

// SetTerminalContextSpecList represents data reduced by productions:
//
//	SetTerminalContextSpecList:
//	        SetTerminalContextSpecListItem
//	|       SetTerminalContextSpecList SetTerminalContextSpecListItem  // Case 1
type SetTerminalContextSpecList struct {
	Case                           int
	SetTerminalContextSpecList     *SetTerminalContextSpecList
	SetTerminalContextSpecListItem *SetTerminalContextSpecListItem
}

func (n *SetTerminalContextSpecList) reverse() *SetTerminalContextSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalContextSpecList
	for nb != nil {
		nc := nb.SetTerminalContextSpecList
		nb.SetTerminalContextSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalContextSpecList = nil
	return na
}

func (n *SetTerminalContextSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalContextSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalContextSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalContextSpecList.Pos()
	case 0:
		return n.SetTerminalContextSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalContextSpecListItem represents data reduced by productions:
//
//	SetTerminalContextSpecListItem:
//	        "default"
//	|       "defaultsize" Expression   // Case 1
//	|       "size" ExpressionUnitList  // Case 2
//	|       "input"                    // Case 3
//	|       "standalone"               // Case 4
//	|       "timestamp"                // Case 5
//	|       "notimestamp"              // Case 6
//	|       "header" Expression        // Case 7
//	|       "noheader"                 // Case 8
//	|       "color"                    // Case 9
//	|       "colour"                   // Case 10
//	|       "monochrome"               // Case 11
//	|       "rounded"                  // Case 12
//	|       "mitered"                  // Case 13
//	|       "beveled"                  // Case 14
//	|       "round"                    // Case 15
//	|       "butt"                     // Case 16
//	|       "squared"                  // Case 17
//	|       "dashed"                   // Case 18
//	|       "solid"                    // Case 19
//	|       "dashlength" Expression    // Case 20
//	|       "dl" Expression            // Case 21
//	|       "linewidth" Expression     // Case 22
//	|       "lw" Expression            // Case 23
//	|       "fontscale" Expression     // Case 24
//	|       "mppoints"                 // Case 25
//	|       "texpoints"                // Case 26
//	|       "inlineimages"             // Case 27
//	|       "externalimages"           // Case 28
//	|       "defaultfont"              // Case 29
//	|       "font" Expression          // Case 30
type SetTerminalContextSpecListItem struct {
	Case               int
	Expression         *Expression
	ExpressionUnitList *ExpressionUnitList
	Token              xc.Token
}

func (n *SetTerminalContextSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalContextSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalContextSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalContextSpecListOpt represents data reduced by productions:
//
//	SetTerminalContextSpecListOpt:
//	        /* empty */
//	|       SetTerminalContextSpecList  // Case 1
type SetTerminalContextSpecListOpt struct {
	SetTerminalContextSpecList *SetTerminalContextSpecList
}

func (n *SetTerminalContextSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalContextSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalContextSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalContextSpecList.Pos()
}

// SetTerminalCorelSpecList represents data reduced by productions:
//
//	SetTerminalCorelSpecList:
//	        SetTerminalCorelSpecListItem
//	|       SetTerminalCorelSpecList SetTerminalCorelSpecListItem  // Case 1
type SetTerminalCorelSpecList struct {
	Case                         int
	SetTerminalCorelSpecList     *SetTerminalCorelSpecList
	SetTerminalCorelSpecListItem *SetTerminalCorelSpecListItem
}

func (n *SetTerminalCorelSpecList) reverse() *SetTerminalCorelSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalCorelSpecList
	for nb != nil {
		nc := nb.SetTerminalCorelSpecList
		nb.SetTerminalCorelSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalCorelSpecList = nil
	return na
}

func (n *SetTerminalCorelSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalCorelSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalCorelSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalCorelSpecList.Pos()
	case 0:
		return n.SetTerminalCorelSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalCorelSpecListItem represents data reduced by productions:
//
//	SetTerminalCorelSpecListItem:
//	        "default"
//	|       "monochrome"      // Case 1
//	|       "color"           // Case 2
//	|       SimpleExpression  // Case 3
type SetTerminalCorelSpecListItem struct {
	Case             int
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetTerminalCorelSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalCorelSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalCorelSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 3:
		return n.SimpleExpression.Pos()
	case 0, 1, 2:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalCorelSpecListOpt represents data reduced by productions:
//
//	SetTerminalCorelSpecListOpt:
//	        /* empty */
//	|       SetTerminalCorelSpecList  // Case 1
type SetTerminalCorelSpecListOpt struct {
	SetTerminalCorelSpecList *SetTerminalCorelSpecList
}

func (n *SetTerminalCorelSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalCorelSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalCorelSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalCorelSpecList.Pos()
}

// SetTerminalDpu414SpecList represents data reduced by productions:
//
//	SetTerminalDpu414SpecList:
//	        SetTerminalDpu414SpecListItem
//	|       SetTerminalDpu414SpecList SetTerminalDpu414SpecListItem  // Case 1
type SetTerminalDpu414SpecList struct {
	Case                          int
	SetTerminalDpu414SpecList     *SetTerminalDpu414SpecList
	SetTerminalDpu414SpecListItem *SetTerminalDpu414SpecListItem
}

func (n *SetTerminalDpu414SpecList) reverse() *SetTerminalDpu414SpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalDpu414SpecList
	for nb != nil {
		nc := nb.SetTerminalDpu414SpecList
		nb.SetTerminalDpu414SpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalDpu414SpecList = nil
	return na
}

func (n *SetTerminalDpu414SpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalDpu414SpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalDpu414SpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalDpu414SpecList.Pos()
	case 0:
		return n.SetTerminalDpu414SpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalDpu414SpecListItem represents data reduced by productions:
//
//	SetTerminalDpu414SpecListItem:
//	        "small"
//	|       "medium"  // Case 1
//	|       "large"   // Case 2
//	|       "normal"  // Case 3
//	|       "draft"   // Case 4
type SetTerminalDpu414SpecListItem struct {
	Case  int
	Token xc.Token
}

func (n *SetTerminalDpu414SpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalDpu414SpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalDpu414SpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalDpu414SpecListOpt represents data reduced by productions:
//
//	SetTerminalDpu414SpecListOpt:
//	        /* empty */
//	|       SetTerminalDpu414SpecList  // Case 1
type SetTerminalDpu414SpecListOpt struct {
	SetTerminalDpu414SpecList *SetTerminalDpu414SpecList
}

func (n *SetTerminalDpu414SpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalDpu414SpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalDpu414SpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalDpu414SpecList.Pos()
}

// SetTerminalDumbSpecList represents data reduced by productions:
//
//	SetTerminalDumbSpecList:
//	        SetTerminalDumbSpecListItem
//	|       SetTerminalDumbSpecList SetTerminalDumbSpecListItem  // Case 1
type SetTerminalDumbSpecList struct {
	Case                        int
	SetTerminalDumbSpecList     *SetTerminalDumbSpecList
	SetTerminalDumbSpecListItem *SetTerminalDumbSpecListItem
}

func (n *SetTerminalDumbSpecList) reverse() *SetTerminalDumbSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalDumbSpecList
	for nb != nil {
		nc := nb.SetTerminalDumbSpecList
		nb.SetTerminalDumbSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalDumbSpecList = nil
	return na
}

func (n *SetTerminalDumbSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalDumbSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalDumbSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalDumbSpecList.Pos()
	case 0:
		return n.SetTerminalDumbSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalDumbSpecListItem represents data reduced by productions:
//
//	SetTerminalDumbSpecListItem:
//	        "size" ExpressionList
//	|       "feed"                   // Case 1
//	|       "nofeed"                 // Case 2
//	|       "aspect" ExpressionList  // Case 3
//	|       "enhanced"               // Case 4
//	|       "noenhanced"             // Case 5
type SetTerminalDumbSpecListItem struct {
	Case           int
	ExpressionList *ExpressionList
	Token          xc.Token
}

func (n *SetTerminalDumbSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalDumbSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalDumbSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalDumbSpecListOpt represents data reduced by productions:
//
//	SetTerminalDumbSpecListOpt:
//	        /* empty */
//	|       SetTerminalDumbSpecList  // Case 1
type SetTerminalDumbSpecListOpt struct {
	SetTerminalDumbSpecList *SetTerminalDumbSpecList
}

func (n *SetTerminalDumbSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalDumbSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalDumbSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalDumbSpecList.Pos()
}

// SetTerminalEepicSpecList represents data reduced by productions:
//
//	SetTerminalEepicSpecList:
//	        SetTerminalEepicSpecListItem
//	|       SetTerminalEepicSpecList SetTerminalEepicSpecListItem  // Case 1
type SetTerminalEepicSpecList struct {
	Case                         int
	SetTerminalEepicSpecList     *SetTerminalEepicSpecList
	SetTerminalEepicSpecListItem *SetTerminalEepicSpecListItem
}

func (n *SetTerminalEepicSpecList) reverse() *SetTerminalEepicSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalEepicSpecList
	for nb != nil {
		nc := nb.SetTerminalEepicSpecList
		nb.SetTerminalEepicSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalEepicSpecList = nil
	return na
}

func (n *SetTerminalEepicSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalEepicSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalEepicSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalEepicSpecList.Pos()
	case 0:
		return n.SetTerminalEepicSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalEepicSpecListItem represents data reduced by productions:
//
//	SetTerminalEepicSpecListItem:
//	        "default"
//	|       "color"                // Case 1
//	|       "dashed"               // Case 2
//	|       "rotate"               // Case 3
//	|       "size" ExpressionList  // Case 4
//	|       "small"                // Case 5
//	|       "tiny"                 // Case 6
//	|       SimpleExpression       // Case 7
type SetTerminalEepicSpecListItem struct {
	Case             int
	ExpressionList   *ExpressionList
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetTerminalEepicSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalEepicSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalEepicSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 7:
		return n.SimpleExpression.Pos()
	case 0, 1, 2, 3, 4, 5, 6:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalEepicSpecListOpt represents data reduced by productions:
//
//	SetTerminalEepicSpecListOpt:
//	        /* empty */
//	|       SetTerminalEepicSpecList  // Case 1
type SetTerminalEepicSpecListOpt struct {
	SetTerminalEepicSpecList *SetTerminalEepicSpecList
}

func (n *SetTerminalEepicSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalEepicSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalEepicSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalEepicSpecList.Pos()
}

// SetTerminalEmfSpecList represents data reduced by productions:
//
//	SetTerminalEmfSpecList:
//	        SetTerminalEmfSpecListItem
//	|       SetTerminalEmfSpecList SetTerminalEmfSpecListItem  // Case 1
type SetTerminalEmfSpecList struct {
	Case                       int
	SetTerminalEmfSpecList     *SetTerminalEmfSpecList
	SetTerminalEmfSpecListItem *SetTerminalEmfSpecListItem
}

func (n *SetTerminalEmfSpecList) reverse() *SetTerminalEmfSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalEmfSpecList
	for nb != nil {
		nc := nb.SetTerminalEmfSpecList
		nb.SetTerminalEmfSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalEmfSpecList = nil
	return na
}

func (n *SetTerminalEmfSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalEmfSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalEmfSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalEmfSpecList.Pos()
	case 0:
		return n.SetTerminalEmfSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalEmfSpecListItem represents data reduced by productions:
//
//	SetTerminalEmfSpecListItem:
//	        "color"
//	|       "monochrome"             // Case 1
//	|       "enhanced"               // Case 2
//	|       "noproportional"         // Case 3
//	|       "rounded"                // Case 4
//	|       "butt"                   // Case 5
//	|       "linewidth" Expression   // Case 6
//	|       "dashlength" Expression  // Case 7
//	|       "size" ExpressionList    // Case 8
//	|       "background" Expression  // Case 9
//	|       "font" Expression        // Case 10
//	|       "fontscale" Expression   // Case 11
type SetTerminalEmfSpecListItem struct {
	Case           int
	Expression     *Expression
	ExpressionList *ExpressionList
	Token          xc.Token
}

func (n *SetTerminalEmfSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalEmfSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalEmfSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalEmfSpecListOpt represents data reduced by productions:
//
//	SetTerminalEmfSpecListOpt:
//	        /* empty */
//	|       SetTerminalEmfSpecList  // Case 1
type SetTerminalEmfSpecListOpt struct {
	SetTerminalEmfSpecList *SetTerminalEmfSpecList
}

func (n *SetTerminalEmfSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalEmfSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalEmfSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalEmfSpecList.Pos()
}

// SetTerminalEpslatexSpecList represents data reduced by productions:
//
//	SetTerminalEpslatexSpecList:
//	        SetTerminalEpslatexSpecListItem
//	|       SetTerminalEpslatexSpecList SetTerminalEpslatexSpecListItem  // Case 1
type SetTerminalEpslatexSpecList struct {
	Case                            int
	SetTerminalEpslatexSpecList     *SetTerminalEpslatexSpecList
	SetTerminalEpslatexSpecListItem *SetTerminalEpslatexSpecListItem
}

func (n *SetTerminalEpslatexSpecList) reverse() *SetTerminalEpslatexSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalEpslatexSpecList
	for nb != nil {
		nc := nb.SetTerminalEpslatexSpecList
		nb.SetTerminalEpslatexSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalEpslatexSpecList = nil
	return na
}

func (n *SetTerminalEpslatexSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalEpslatexSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalEpslatexSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalEpslatexSpecList.Pos()
	case 0:
		return n.SetTerminalEpslatexSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalEpslatexSpecListItem represents data reduced by productions:
//
//	SetTerminalEpslatexSpecListItem:
//	        "default"
//	|       "standalone"                              // Case 1
//	|       "input"                                   // Case 2
//	|       "oldstyle"                                // Case 3
//	|       "newstyle"                                // Case 4
//	|       "level1"                                  // Case 5
//	|       "leveldefault"                            // Case 6
//	|       "level3"                                  // Case 7
//	|       "color"                                   // Case 8
//	|       "colour"                                  // Case 9
//	|       "monochrome"                              // Case 10
//	|       "background" Expression                   // Case 11
//	|       "nobackground"                            // Case 12
//	|       "dashlength" Expression                   // Case 13
//	|       "dl" Expression                           // Case 14
//	|       "linewidth" Expression                    // Case 15
//	|       "lw" Expression                           // Case 16
//	|       "rounded"                                 // Case 17
//	|       "butt"                                    // Case 18
//	|       "clip"                                    // Case 19
//	|       "noclip"                                  // Case 20
//	|       "palfuncparam" Expression                 // Case 21
//	|       "palfuncparam" Expression ',' Expression  // Case 22
//	|       "size" ExpressionUnitList                 // Case 23
//	|       "header" Expression                       // Case 24
//	|       "noheader"                                // Case 25
//	|       "blacktext"                               // Case 26
//	|       "colortext"                               // Case 27
//	|       "colourtext"                              // Case 28
//	|       SimpleExpression                          // Case 29
//	|       "font" Expression                         // Case 30
//	|       "fontscale" Expression                    // Case 31
type SetTerminalEpslatexSpecListItem struct {
	Case               int
	Expression         *Expression
	Expression2        *Expression
	ExpressionUnitList *ExpressionUnitList
	SimpleExpression   *SimpleExpression
	Token              xc.Token
	Token2             xc.Token
}

func (n *SetTerminalEpslatexSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalEpslatexSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalEpslatexSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 29:
		return n.SimpleExpression.Pos()
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalEpslatexSpecListOpt represents data reduced by productions:
//
//	SetTerminalEpslatexSpecListOpt:
//	        /* empty */
//	|       SetTerminalEpslatexSpecList  // Case 1
type SetTerminalEpslatexSpecListOpt struct {
	SetTerminalEpslatexSpecList *SetTerminalEpslatexSpecList
}

func (n *SetTerminalEpslatexSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalEpslatexSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalEpslatexSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalEpslatexSpecList.Pos()
}

// SetTerminalFigSpecList represents data reduced by productions:
//
//	SetTerminalFigSpecList:
//	        SetTerminalFigSpecListItem
//	|       SetTerminalFigSpecList SetTerminalFigSpecListItem  // Case 1
type SetTerminalFigSpecList struct {
	Case                       int
	SetTerminalFigSpecList     *SetTerminalFigSpecList
	SetTerminalFigSpecListItem *SetTerminalFigSpecListItem
}

func (n *SetTerminalFigSpecList) reverse() *SetTerminalFigSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalFigSpecList
	for nb != nil {
		nc := nb.SetTerminalFigSpecList
		nb.SetTerminalFigSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalFigSpecList = nil
	return na
}

func (n *SetTerminalFigSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalFigSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalFigSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalFigSpecList.Pos()
	case 0:
		return n.SetTerminalFigSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalFigSpecListItem represents data reduced by productions:
//
//	SetTerminalFigSpecListItem:
//	        "monochrome"
//	|       "color"                             // Case 1
//	|       "landscape"                         // Case 2
//	|       "big"                               // Case 3
//	|       "size" Expression SimpleExpression  // Case 4
//	|       "metric"                            // Case 5
//	|       "inches"                            // Case 6
//	|       "pointsmax" Expression              // Case 7
//	|       "solid"                             // Case 8
//	|       "dashed"                            // Case 9
//	|       "font" Expression                   // Case 10
//	|       "textnormal"                        // Case 11
//	|       "textspecial"                       // Case 12
//	|       "texthidden"                        // Case 13
//	|       "textrigid"                         // Case 14
//	|       "thickness" Expression              // Case 15
//	|       "linewidth" Expression              // Case 16
//	|       "depth" Expression                  // Case 17
//	|       "version" Expression                // Case 18
type SetTerminalFigSpecListItem struct {
	Case             int
	Expression       *Expression
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetTerminalFigSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalFigSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalFigSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalFigSpecListOpt represents data reduced by productions:
//
//	SetTerminalFigSpecListOpt:
//	        /* empty */
//	|       SetTerminalFigSpecList  // Case 1
type SetTerminalFigSpecListOpt struct {
	SetTerminalFigSpecList *SetTerminalFigSpecList
}

func (n *SetTerminalFigSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalFigSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalFigSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalFigSpecList.Pos()
}

// SetTerminalGgiSpecList represents data reduced by productions:
//
//	SetTerminalGgiSpecList:
//	        SetTerminalGgiSpecListItem
//	|       SetTerminalGgiSpecList SetTerminalGgiSpecListItem  // Case 1
type SetTerminalGgiSpecList struct {
	Case                       int
	SetTerminalGgiSpecList     *SetTerminalGgiSpecList
	SetTerminalGgiSpecListItem *SetTerminalGgiSpecListItem
}

func (n *SetTerminalGgiSpecList) reverse() *SetTerminalGgiSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalGgiSpecList
	for nb != nil {
		nc := nb.SetTerminalGgiSpecList
		nb.SetTerminalGgiSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalGgiSpecList = nil
	return na
}

func (n *SetTerminalGgiSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalGgiSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalGgiSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalGgiSpecList.Pos()
	case 0:
		return n.SetTerminalGgiSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalGgiSpecListItem represents data reduced by productions:
//
//	SetTerminalGgiSpecListItem:
//	        "acceleration" Expression
//	|       "mode" Expression          // Case 1
type SetTerminalGgiSpecListItem struct {
	Case       int
	Expression *Expression
	Token      xc.Token
}

func (n *SetTerminalGgiSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalGgiSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalGgiSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalGgiSpecListOpt represents data reduced by productions:
//
//	SetTerminalGgiSpecListOpt:
//	        /* empty */
//	|       SetTerminalGgiSpecList  // Case 1
type SetTerminalGgiSpecListOpt struct {
	SetTerminalGgiSpecList *SetTerminalGgiSpecList
}

func (n *SetTerminalGgiSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalGgiSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalGgiSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalGgiSpecList.Pos()
}

// SetTerminalGifSpecList represents data reduced by productions:
//
//	SetTerminalGifSpecList:
//	        SetTerminalGifSpecListItem
//	|       SetTerminalGifSpecList SetTerminalGifSpecListItem  // Case 1
type SetTerminalGifSpecList struct {
	Case                       int
	SetTerminalGifSpecList     *SetTerminalGifSpecList
	SetTerminalGifSpecListItem *SetTerminalGifSpecListItem
}

func (n *SetTerminalGifSpecList) reverse() *SetTerminalGifSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalGifSpecList
	for nb != nil {
		nc := nb.SetTerminalGifSpecList
		nb.SetTerminalGifSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalGifSpecList = nil
	return na
}

func (n *SetTerminalGifSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalGifSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalGifSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalGifSpecList.Pos()
	case 0:
		return n.SetTerminalGifSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalGifSpecListItem represents data reduced by productions:
//
//	SetTerminalGifSpecListItem:
//	        "enhanced"
//	|       "noenhanced"             // Case 1
//	|       "transparent"            // Case 2
//	|       "notransparent"          // Case 3
//	|       "rounded"                // Case 4
//	|       "butt"                   // Case 5
//	|       "linewidth" Expression   // Case 6
//	|       "dashlength" Expression  // Case 7
//	|       "tiny"                   // Case 8
//	|       "small"                  // Case 9
//	|       "medium"                 // Case 10
//	|       "large"                  // Case 11
//	|       "giant"                  // Case 12
//	|       "font" Expression        // Case 13
//	|       "fontscale" Expression   // Case 14
//	|       "size" ExpressionList    // Case 15
//	|       "crop"                   // Case 16
//	|       "nocrop"                 // Case 17
//	|       "animate" ExpressionOpt  // Case 18
//	|       "loop" Expression        // Case 19
//	|       "optimize"               // Case 20
//	|       "nooptimize"             // Case 21
//	|       "background" Expression  // Case 22
type SetTerminalGifSpecListItem struct {
	Case           int
	Expression     *Expression
	ExpressionList *ExpressionList
	ExpressionOpt  *ExpressionOpt
	Token          xc.Token
}

func (n *SetTerminalGifSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalGifSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalGifSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalGifSpecListOpt represents data reduced by productions:
//
//	SetTerminalGifSpecListOpt:
//	        /* empty */
//	|       SetTerminalGifSpecList  // Case 1
type SetTerminalGifSpecListOpt struct {
	SetTerminalGifSpecList *SetTerminalGifSpecList
}

func (n *SetTerminalGifSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalGifSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalGifSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalGifSpecList.Pos()
}

// SetTerminalHpglSpecList represents data reduced by productions:
//
//	SetTerminalHpglSpecList:
//	        SetTerminalHpglSpecListItem
//	|       SetTerminalHpglSpecList SetTerminalHpglSpecListItem  // Case 1
type SetTerminalHpglSpecList struct {
	Case                        int
	SetTerminalHpglSpecList     *SetTerminalHpglSpecList
	SetTerminalHpglSpecListItem *SetTerminalHpglSpecListItem
}

func (n *SetTerminalHpglSpecList) reverse() *SetTerminalHpglSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalHpglSpecList
	for nb != nil {
		nc := nb.SetTerminalHpglSpecList
		nb.SetTerminalHpglSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalHpglSpecList = nil
	return na
}

func (n *SetTerminalHpglSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalHpglSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalHpglSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalHpglSpecList.Pos()
	case 0:
		return n.SetTerminalHpglSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalHpglSpecListItem represents data reduced by productions:
//
//	SetTerminalHpglSpecListItem:
//	        SimpleExpression
//	|       "eject"           // Case 1
type SetTerminalHpglSpecListItem struct {
	Case             int
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetTerminalHpglSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalHpglSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalHpglSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.SimpleExpression.Pos()
	case 1:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalHpglSpecListOpt represents data reduced by productions:
//
//	SetTerminalHpglSpecListOpt:
//	        /* empty */
//	|       SetTerminalHpglSpecList  // Case 1
type SetTerminalHpglSpecListOpt struct {
	SetTerminalHpglSpecList *SetTerminalHpglSpecList
}

func (n *SetTerminalHpglSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalHpglSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalHpglSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalHpglSpecList.Pos()
}

// SetTerminalHppjSpecOpt represents data reduced by productions:
//
//	SetTerminalHppjSpecOpt:
//	        "FNT5X9"
//	|       "FNT9X17"   // Case 1
//	|       "FNT13X25"  // Case 2
type SetTerminalHppjSpecOpt struct {
	Case  int
	Token xc.Token
}

func (n *SetTerminalHppjSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalHppjSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalHppjSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalImagenSpecList represents data reduced by productions:
//
//	SetTerminalImagenSpecList:
//	        SetTerminalImagenSpecListItem
//	|       SetTerminalImagenSpecList SetTerminalImagenSpecListItem  // Case 1
type SetTerminalImagenSpecList struct {
	Case                          int
	SetTerminalImagenSpecList     *SetTerminalImagenSpecList
	SetTerminalImagenSpecListItem *SetTerminalImagenSpecListItem
}

func (n *SetTerminalImagenSpecList) reverse() *SetTerminalImagenSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalImagenSpecList
	for nb != nil {
		nc := nb.SetTerminalImagenSpecList
		nb.SetTerminalImagenSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalImagenSpecList = nil
	return na
}

func (n *SetTerminalImagenSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalImagenSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalImagenSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalImagenSpecList.Pos()
	case 0:
		return n.SetTerminalImagenSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalImagenSpecListItem represents data reduced by productions:
//
//	SetTerminalImagenSpecListItem:
//	        SimpleExpression
//	|       "portrait"              // Case 1
//	|       "landscape"             // Case 2
//	|       '[' ExpressionList ']'  // Case 3
type SetTerminalImagenSpecListItem struct {
	Case             int
	ExpressionList   *ExpressionList
	SimpleExpression *SimpleExpression
	Token            xc.Token
	Token2           xc.Token
}

func (n *SetTerminalImagenSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalImagenSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalImagenSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.SimpleExpression.Pos()
	case 1, 2, 3:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalImagenSpecListOpt represents data reduced by productions:
//
//	SetTerminalImagenSpecListOpt:
//	        /* empty */
//	|       SetTerminalImagenSpecList  // Case 1
type SetTerminalImagenSpecListOpt struct {
	SetTerminalImagenSpecList *SetTerminalImagenSpecList
}

func (n *SetTerminalImagenSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalImagenSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalImagenSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalImagenSpecList.Pos()
}

// SetTerminalInner represents data reduced by productions:
//
//	SetTerminalInner:
//	        "aifm" SetTerminalAifmSpecListOpt
//	|       "aqua" SetTerminalAquaSpecListOpt                    // Case 1
//	|       "be" SetTerminalBeSpecListOpt                        // Case 2
//	|       "cairolatex" SetTerminalCairolatexSpecListOpt        // Case 3
//	|       "canvas" SetTerminalCanvasSpecListOpt                // Case 4
//	|       "cgm" SetTerminalCgmSpecListOpt                      // Case 5
//	|       "context" SetTerminalContextSpecListOpt              // Case 6
//	|       "corel" SetTerminalCorelSpecListOpt                  // Case 7
//	|       "debug"                                              // Case 8
//	|       "dpu414" SetTerminalDpu414SpecListOpt                // Case 9
//	|       "dumb" SetTerminalDumbSpecListOpt                    // Case 10
//	|       "dxf"                                                // Case 11
//	|       "dxy800a"                                            // Case 12
//	|       "eepic" SetTerminalEepicSpecListOpt                  // Case 13
//	|       "emf" SetTerminalEmfSpecListOpt                      // Case 14
//	|       "emtex" SetTerminalLatexSpecListOpt                  // Case 15
//	|       "emxvesa" Expression                                 // Case 16
//	|       "emxvga"                                             // Case 17
//	|       "epslatex" SetTerminalEpslatexSpecListOpt            // Case 18
//	|       "epson_180dpi"                                       // Case 19
//	|       "epson_60dpi"                                        // Case 20
//	|       "excl"                                               // Case 21
//	|       "fig" SetTerminalFigSpecListOpt                      // Case 22
//	|       "ggi" SetTerminalGgiSpecListOpt                      // Case 23
//	|       "gif" SetTerminalGifSpecListOpt                      // Case 24
//	|       "gpic"                                               // Case 25
//	|       "gpic" SimpleExpressionList                          // Case 26
//	|       "grass"                                              // Case 27
//	|       "hp2623a"                                            // Case 28
//	|       "hp2648"                                             // Case 29
//	|       "hp500c"                                             // Case 30
//	|       "hpdj" ExpressionOpt                                 // Case 31
//	|       "hpgl" SetTerminalHpglSpecListOpt                    // Case 32
//	|       "hpljii" ExpressionOpt                               // Case 33
//	|       "hppj" SetTerminalHppjSpecOpt                        // Case 34
//	|       "imagen" SetTerminalImagenSpecListOpt                // Case 35
//	|       "jpeg" SetTerminalJpegSpecListOpt                    // Case 36
//	|       "kyo"                                                // Case 37
//	|       "latex" SetTerminalLatexSpecListOpt                  // Case 38
//	|       "linux"                                              // Case 39
//	|       "lua" "tiks" SetTerminalLuatikzSpecListOpt           // Case 40
//	|       "mf"                                                 // Case 41
//	|       "mif" SetTerminalMifSpecListOpt                      // Case 42
//	|       "mp" SetTerminalMpSpecListOpt                        // Case 43
//	|       "nec_cp6" SetTerminalNeccp6SpecListOpt               // Case 44
//	|       "next" SetTerminalNextSpecListOpt                    // Case 45
//	|       "okidata"                                            // Case 46
//	|       "openstep" SetTerminalNextSpecListOpt                // Case 47
//	|       "pbm" SetTerminalPbmSpecListOpt                      // Case 48
//	|       "pdf" SetTerminalPdfSpecListOpt                      // Case 49
//	|       "pdfcairo" SetTerminalPdfcairoSpecListOpt            // Case 50
//	|       "pm" SetTerminalPmSpecListOpt                        // Case 51
//	|       "png" SetTerminalPngSpecListOpt                      // Case 52
//	|       "pngcairo" SetTerminalPngcairoSpecListOpt            // Case 53
//	|       "postscript" SetTerminalPostscriptSpecListOpt        // Case 54
//	|       "prescribe"                                          // Case 55
//	|       "pslatex" SetTerminalPstexSpecListOpt                // Case 56
//	|       "pstex" SetTerminalPstexSpecListOpt                  // Case 57
//	|       "pstricks" SetTerminalPstricksSpecListOpt            // Case 58
//	|       "qms"                                                // Case 59
//	|       "qt" SetTerminalQtSpecListOpt                        // Case 60
//	|       "regis" ExpressionOpt                                // Case 61
//	|       "sun"                                                // Case 62
//	|       "svg" SetTerminalSvgSpecListOpt                      // Case 63
//	|       "svga"                                               // Case 64
//	|       "svga" Expression                                    // Case 65
//	|       "tek40"                                              // Case 66
//	|       "tek410x"                                            // Case 67
//	|       "texdraw"                                            // Case 68
//	|       "tgif" SetTerminalTgifSpecListOpt                    // Case 69
//	|       "tikz"                                               // Case 70
//	|       "tkcanvas" SetTerminalTkcanvasSpecListOpt            // Case 71
//	|       "tpic" Expression SimpleExpression SimpleExpression  // Case 72
//	|       "vgagl" SetTerminalVgaglSpecListOpt                  // Case 73
//	|       "vgal"                                               // Case 74
//	|       "vws"                                                // Case 75
//	|       "windows" SetTerminalWindowsSpecListOpt              // Case 76
//	|       "wxt" SetTerminalWxtSpecListOpt                      // Case 77
//	|       "x11" SetTerminalX11SpecListOpt                      // Case 78
type SetTerminalInner struct {
	Case                             int
	Expression                       *Expression
	ExpressionOpt                    *ExpressionOpt
	SetTerminalAifmSpecListOpt       *SetTerminalAifmSpecListOpt
	SetTerminalAquaSpecListOpt       *SetTerminalAquaSpecListOpt
	SetTerminalBeSpecListOpt         *SetTerminalBeSpecListOpt
	SetTerminalCairolatexSpecListOpt *SetTerminalCairolatexSpecListOpt
	SetTerminalCanvasSpecListOpt     *SetTerminalCanvasSpecListOpt
	SetTerminalCgmSpecListOpt        *SetTerminalCgmSpecListOpt
	SetTerminalContextSpecListOpt    *SetTerminalContextSpecListOpt
	SetTerminalCorelSpecListOpt      *SetTerminalCorelSpecListOpt
	SetTerminalDpu414SpecListOpt     *SetTerminalDpu414SpecListOpt
	SetTerminalDumbSpecListOpt       *SetTerminalDumbSpecListOpt
	SetTerminalEepicSpecListOpt      *SetTerminalEepicSpecListOpt
	SetTerminalEmfSpecListOpt        *SetTerminalEmfSpecListOpt
	SetTerminalEpslatexSpecListOpt   *SetTerminalEpslatexSpecListOpt
	SetTerminalFigSpecListOpt        *SetTerminalFigSpecListOpt
	SetTerminalGgiSpecListOpt        *SetTerminalGgiSpecListOpt
	SetTerminalGifSpecListOpt        *SetTerminalGifSpecListOpt
	SetTerminalHpglSpecListOpt       *SetTerminalHpglSpecListOpt
	SetTerminalHppjSpecOpt           *SetTerminalHppjSpecOpt
	SetTerminalImagenSpecListOpt     *SetTerminalImagenSpecListOpt
	SetTerminalJpegSpecListOpt       *SetTerminalJpegSpecListOpt
	SetTerminalLatexSpecListOpt      *SetTerminalLatexSpecListOpt
	SetTerminalLuatikzSpecListOpt    *SetTerminalLuatikzSpecListOpt
	SetTerminalMifSpecListOpt        *SetTerminalMifSpecListOpt
	SetTerminalMpSpecListOpt         *SetTerminalMpSpecListOpt
	SetTerminalNeccp6SpecListOpt     *SetTerminalNeccp6SpecListOpt
	SetTerminalNextSpecListOpt       *SetTerminalNextSpecListOpt
	SetTerminalPbmSpecListOpt        *SetTerminalPbmSpecListOpt
	SetTerminalPdfSpecListOpt        *SetTerminalPdfSpecListOpt
	SetTerminalPdfcairoSpecListOpt   *SetTerminalPdfcairoSpecListOpt
	SetTerminalPmSpecListOpt         *SetTerminalPmSpecListOpt
	SetTerminalPngSpecListOpt        *SetTerminalPngSpecListOpt
	SetTerminalPngcairoSpecListOpt   *SetTerminalPngcairoSpecListOpt
	SetTerminalPostscriptSpecListOpt *SetTerminalPostscriptSpecListOpt
	SetTerminalPstexSpecListOpt      *SetTerminalPstexSpecListOpt
	SetTerminalPstricksSpecListOpt   *SetTerminalPstricksSpecListOpt
	SetTerminalQtSpecListOpt         *SetTerminalQtSpecListOpt
	SetTerminalSvgSpecListOpt        *SetTerminalSvgSpecListOpt
	SetTerminalTgifSpecListOpt       *SetTerminalTgifSpecListOpt
	SetTerminalTkcanvasSpecListOpt   *SetTerminalTkcanvasSpecListOpt
	SetTerminalVgaglSpecListOpt      *SetTerminalVgaglSpecListOpt
	SetTerminalWindowsSpecListOpt    *SetTerminalWindowsSpecListOpt
	SetTerminalWxtSpecListOpt        *SetTerminalWxtSpecListOpt
	SetTerminalX11SpecListOpt        *SetTerminalX11SpecListOpt
	SimpleExpression                 *SimpleExpression
	SimpleExpression2                *SimpleExpression
	SimpleExpressionList             *SimpleExpressionList
	Token                            xc.Token
	Token2                           xc.Token
}

func (n *SetTerminalInner) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalInner) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalInner) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalJpegSpecList represents data reduced by productions:
//
//	SetTerminalJpegSpecList:
//	        SetTerminalJpegSpecListItem
//	|       SetTerminalJpegSpecList SetTerminalJpegSpecListItem  // Case 1
type SetTerminalJpegSpecList struct {
	Case                        int
	SetTerminalJpegSpecList     *SetTerminalJpegSpecList
	SetTerminalJpegSpecListItem *SetTerminalJpegSpecListItem
}

func (n *SetTerminalJpegSpecList) reverse() *SetTerminalJpegSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalJpegSpecList
	for nb != nil {
		nc := nb.SetTerminalJpegSpecList
		nb.SetTerminalJpegSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalJpegSpecList = nil
	return na
}

func (n *SetTerminalJpegSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalJpegSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalJpegSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalJpegSpecList.Pos()
	case 0:
		return n.SetTerminalJpegSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalJpegSpecListItem represents data reduced by productions:
//
//	SetTerminalJpegSpecListItem:
//	        "enhanced"
//	|       "noenhanced"             // Case 1
//	|       "linewidth" Expression   // Case 2
//	|       "dashlength" Expression  // Case 3
//	|       "rounded"                // Case 4
//	|       "butt"                   // Case 5
//	|       "tiny"                   // Case 6
//	|       "small"                  // Case 7
//	|       "medium"                 // Case 8
//	|       "large"                  // Case 9
//	|       "giant"                  // Case 10
//	|       "font" Expression        // Case 11
//	|       "fontscale" Expression   // Case 12
//	|       "size" ExpressionList    // Case 13
//	|       "crop"                   // Case 14
//	|       "nocrop"                 // Case 15
//	|       "background" Expression  // Case 16
type SetTerminalJpegSpecListItem struct {
	Case           int
	Expression     *Expression
	ExpressionList *ExpressionList
	Token          xc.Token
}

func (n *SetTerminalJpegSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalJpegSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalJpegSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalJpegSpecListOpt represents data reduced by productions:
//
//	SetTerminalJpegSpecListOpt:
//	        /* empty */
//	|       SetTerminalJpegSpecList  // Case 1
type SetTerminalJpegSpecListOpt struct {
	SetTerminalJpegSpecList *SetTerminalJpegSpecList
}

func (n *SetTerminalJpegSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalJpegSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalJpegSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalJpegSpecList.Pos()
}

// SetTerminalLatexSpecList represents data reduced by productions:
//
//	SetTerminalLatexSpecList:
//	        SetTerminalLatexSpecListItem
//	|       SetTerminalLatexSpecList SetTerminalLatexSpecListItem  // Case 1
type SetTerminalLatexSpecList struct {
	Case                         int
	SetTerminalLatexSpecList     *SetTerminalLatexSpecList
	SetTerminalLatexSpecListItem *SetTerminalLatexSpecListItem
}

func (n *SetTerminalLatexSpecList) reverse() *SetTerminalLatexSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalLatexSpecList
	for nb != nil {
		nc := nb.SetTerminalLatexSpecList
		nb.SetTerminalLatexSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalLatexSpecList = nil
	return na
}

func (n *SetTerminalLatexSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalLatexSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalLatexSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalLatexSpecList.Pos()
	case 0:
		return n.SetTerminalLatexSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalLatexSpecListItem represents data reduced by productions:
//
//	SetTerminalLatexSpecListItem:
//	        "default"
//	|       "courier" ExpressionOpt    // Case 1
//	|       "roman" ExpressionOpt      // Case 2
//	|       "size" ExpressionUnitList  // Case 3
//	|       "rotate"                   // Case 4
//	|       "norotate"                 // Case 5
type SetTerminalLatexSpecListItem struct {
	Case               int
	ExpressionOpt      *ExpressionOpt
	ExpressionUnitList *ExpressionUnitList
	Token              xc.Token
}

func (n *SetTerminalLatexSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalLatexSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalLatexSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalLatexSpecListOpt represents data reduced by productions:
//
//	SetTerminalLatexSpecListOpt:
//	        /* empty */
//	|       SetTerminalLatexSpecList  // Case 1
type SetTerminalLatexSpecListOpt struct {
	SetTerminalLatexSpecList *SetTerminalLatexSpecList
}

func (n *SetTerminalLatexSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalLatexSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalLatexSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalLatexSpecList.Pos()
}

// SetTerminalLuatikzSpecList represents data reduced by productions:
//
//	SetTerminalLuatikzSpecList:
//	        SetTerminalLuatikzSpecListItem
//	|       SetTerminalLuatikzSpecList SetTerminalLuatikzSpecListItem  // Case 1
type SetTerminalLuatikzSpecList struct {
	Case                           int
	SetTerminalLuatikzSpecList     *SetTerminalLuatikzSpecList
	SetTerminalLuatikzSpecListItem *SetTerminalLuatikzSpecListItem
}

func (n *SetTerminalLuatikzSpecList) reverse() *SetTerminalLuatikzSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalLuatikzSpecList
	for nb != nil {
		nc := nb.SetTerminalLuatikzSpecList
		nb.SetTerminalLuatikzSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalLuatikzSpecList = nil
	return na
}

func (n *SetTerminalLuatikzSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalLuatikzSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalLuatikzSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalLuatikzSpecList.Pos()
	case 0:
		return n.SetTerminalLuatikzSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalLuatikzSpecListItem represents data reduced by productions:
//
//	SetTerminalLuatikzSpecListItem:
//	        "latex"
//	|       "tex"                          // Case 1
//	|       "context"                      // Case 2
//	|       "color"                        // Case 3
//	|       "monochrome"                   // Case 4
//	|       "originreset"                  // Case 5
//	|       "nooriginreset"                // Case 6
//	|       "gparrows"                     // Case 7
//	|       "nogparrows"                   // Case 8
//	|       "gppoints"                     // Case 9
//	|       "nogppoints"                   // Case 10
//	|       "picenvironment"               // Case 11
//	|       "nopicenvironment"             // Case 12
//	|       "clip"                         // Case 13
//	|       "noclip"                       // Case 14
//	|       "tightboundingbox"             // Case 15
//	|       "notightboundingbox"           // Case 16
//	|       "background" Expression        // Case 17
//	|       "size" ExpressionUnitList      // Case 18
//	|       "scale" ExpressionList         // Case 19
//	|       "plotsize" ExpressionUnitList  // Case 20
//	|       "charsize" ExpressionUnitList  // Case 21
//	|       "font" Expression              // Case 22
//	|       "fontscale" Expression         // Case 23
//	|       "textscale" Expression         // Case 24
//	|       "dashlength" Expression        // Case 25
//	|       "dl" Expression                // Case 26
//	|       "linewidth" Expression         // Case 27
//	|       "lw" Expression                // Case 28
//	|       "nofulldoc"                    // Case 29
//	|       "fulldoc"                      // Case 30
//	|       "standalone"                   // Case 31
//	|       "nostandalone"                 // Case 32
//	|       "preamble" Expression          // Case 33
//	|       "header" Expression            // Case 34
//	|       "tikzplot" ExpressionList      // Case 35
//	|       "notikzarrows"                 // Case 36
//	|       "tikzarrows"                   // Case 37
//	|       "rgbimages"                    // Case 38
//	|       "cmykimages"                   // Case 39
//	|       "externalimages"               // Case 40
//	|       "noexternalimages"             // Case 41
//	|       "bitmap"                       // Case 42
//	|       "nobitmap"                     // Case 43
//	|       "providevars" IdentifierList   // Case 44
//	|       "createstyle"                  // Case 45
//	|       "help"                         // Case 46
type SetTerminalLuatikzSpecListItem struct {
	Case               int
	Expression         *Expression
	ExpressionList     *ExpressionList
	ExpressionUnitList *ExpressionUnitList
	IdentifierList     *IdentifierList
	Token              xc.Token
}

func (n *SetTerminalLuatikzSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalLuatikzSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalLuatikzSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalLuatikzSpecListOpt represents data reduced by productions:
//
//	SetTerminalLuatikzSpecListOpt:
//	        /* empty */
//	|       SetTerminalLuatikzSpecList  // Case 1
type SetTerminalLuatikzSpecListOpt struct {
	SetTerminalLuatikzSpecList *SetTerminalLuatikzSpecList
}

func (n *SetTerminalLuatikzSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalLuatikzSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalLuatikzSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalLuatikzSpecList.Pos()
}

// SetTerminalMifSpecList represents data reduced by productions:
//
//	SetTerminalMifSpecList:
//	        SetTerminalMifSpecListItem
//	|       SetTerminalMifSpecList SetTerminalMifSpecListItem  // Case 1
type SetTerminalMifSpecList struct {
	Case                       int
	SetTerminalMifSpecList     *SetTerminalMifSpecList
	SetTerminalMifSpecListItem *SetTerminalMifSpecListItem
}

func (n *SetTerminalMifSpecList) reverse() *SetTerminalMifSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalMifSpecList
	for nb != nil {
		nc := nb.SetTerminalMifSpecList
		nb.SetTerminalMifSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalMifSpecList = nil
	return na
}

func (n *SetTerminalMifSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalMifSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalMifSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalMifSpecList.Pos()
	case 0:
		return n.SetTerminalMifSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalMifSpecListItem represents data reduced by productions:
//
//	SetTerminalMifSpecListItem:
//	        "color"
//	|       "colour"      // Case 1
//	|       "monochrome"  // Case 2
//	|       "polyline"    // Case 3
//	|       "vectors"     // Case 4
//	|       "help"        // Case 5
//	|       '?'           // Case 6
type SetTerminalMifSpecListItem struct {
	Case  int
	Token xc.Token
}

func (n *SetTerminalMifSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalMifSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalMifSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalMifSpecListOpt represents data reduced by productions:
//
//	SetTerminalMifSpecListOpt:
//	        /* empty */
//	|       SetTerminalMifSpecList  // Case 1
type SetTerminalMifSpecListOpt struct {
	SetTerminalMifSpecList *SetTerminalMifSpecList
}

func (n *SetTerminalMifSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalMifSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalMifSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalMifSpecList.Pos()
}

// SetTerminalMpSpecList represents data reduced by productions:
//
//	SetTerminalMpSpecList:
//	        SetTerminalMpSpecListItem
//	|       SetTerminalMpSpecList SetTerminalMpSpecListItem  // Case 1
type SetTerminalMpSpecList struct {
	Case                      int
	SetTerminalMpSpecList     *SetTerminalMpSpecList
	SetTerminalMpSpecListItem *SetTerminalMpSpecListItem
}

func (n *SetTerminalMpSpecList) reverse() *SetTerminalMpSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalMpSpecList
	for nb != nil {
		nc := nb.SetTerminalMpSpecList
		nb.SetTerminalMpSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalMpSpecList = nil
	return na
}

func (n *SetTerminalMpSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalMpSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalMpSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalMpSpecList.Pos()
	case 0:
		return n.SetTerminalMpSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalMpSpecListItem represents data reduced by productions:
//
//	SetTerminalMpSpecListItem:
//	        "color"
//	|       "colour"                    // Case 1
//	|       "monochrome"                // Case 2
//	|       "solid"                     // Case 3
//	|       "dashed"                    // Case 4
//	|       "notex"                     // Case 5
//	|       "tex"                       // Case 6
//	|       "latex"                     // Case 7
//	|       "magnification" Expression  // Case 8
//	|       "psnfss"                    // Case 9
//	|       "psnfss_version7"           // Case 10
//	|       "nopsnfss"                  // Case 11
//	|       "prologues" Expression      // Case 12
//	|       "a4paper"                   // Case 13
//	|       "amstex"                    // Case 14
//	|       SimpleExpression            // Case 15
type SetTerminalMpSpecListItem struct {
	Case             int
	Expression       *Expression
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetTerminalMpSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalMpSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalMpSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 15:
		return n.SimpleExpression.Pos()
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalMpSpecListOpt represents data reduced by productions:
//
//	SetTerminalMpSpecListOpt:
//	        /* empty */
//	|       SetTerminalMpSpecList  // Case 1
type SetTerminalMpSpecListOpt struct {
	SetTerminalMpSpecList *SetTerminalMpSpecList
}

func (n *SetTerminalMpSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalMpSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalMpSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalMpSpecList.Pos()
}

// SetTerminalNeccp6SpecList represents data reduced by productions:
//
//	SetTerminalNeccp6SpecList:
//	        SetTerminalNeccp6SpecListItem
//	|       SetTerminalNeccp6SpecList SetTerminalNeccp6SpecListItem  // Case 1
type SetTerminalNeccp6SpecList struct {
	Case                          int
	SetTerminalNeccp6SpecList     *SetTerminalNeccp6SpecList
	SetTerminalNeccp6SpecListItem *SetTerminalNeccp6SpecListItem
}

func (n *SetTerminalNeccp6SpecList) reverse() *SetTerminalNeccp6SpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalNeccp6SpecList
	for nb != nil {
		nc := nb.SetTerminalNeccp6SpecList
		nb.SetTerminalNeccp6SpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalNeccp6SpecList = nil
	return na
}

func (n *SetTerminalNeccp6SpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalNeccp6SpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalNeccp6SpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalNeccp6SpecList.Pos()
	case 0:
		return n.SetTerminalNeccp6SpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalNeccp6SpecListItem represents data reduced by productions:
//
//	SetTerminalNeccp6SpecListItem:
//	        "monochrome"
//	|       "colour"      // Case 1
//	|       "draft"       // Case 2
type SetTerminalNeccp6SpecListItem struct {
	Case  int
	Token xc.Token
}

func (n *SetTerminalNeccp6SpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalNeccp6SpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalNeccp6SpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalNeccp6SpecListOpt represents data reduced by productions:
//
//	SetTerminalNeccp6SpecListOpt:
//	        /* empty */
//	|       SetTerminalNeccp6SpecList  // Case 1
type SetTerminalNeccp6SpecListOpt struct {
	SetTerminalNeccp6SpecList *SetTerminalNeccp6SpecList
}

func (n *SetTerminalNeccp6SpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalNeccp6SpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalNeccp6SpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalNeccp6SpecList.Pos()
}

// SetTerminalNextSpecList represents data reduced by productions:
//
//	SetTerminalNextSpecList:
//	        SetTerminalNextSpecListItem
//	|       SetTerminalNextSpecList SetTerminalNextSpecListItem  // Case 1
type SetTerminalNextSpecList struct {
	Case                        int
	SetTerminalNextSpecList     *SetTerminalNextSpecList
	SetTerminalNextSpecListItem *SetTerminalNextSpecListItem
}

func (n *SetTerminalNextSpecList) reverse() *SetTerminalNextSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalNextSpecList
	for nb != nil {
		nc := nb.SetTerminalNextSpecList
		nb.SetTerminalNextSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalNextSpecList = nil
	return na
}

func (n *SetTerminalNextSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalNextSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalNextSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalNextSpecList.Pos()
	case 0:
		return n.SetTerminalNextSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalNextSpecListItem represents data reduced by productions:
//
//	SetTerminalNextSpecListItem:
//	        SimpleExpression
//	|       "default"           // Case 1
//	|       "new"               // Case 2
//	|       "old"               // Case 3
//	|       "color"             // Case 4
//	|       "monochrome"        // Case 5
//	|       "solid"             // Case 6
//	|       "dashed"            // Case 7
//	|       "title" Expression  // Case 8
type SetTerminalNextSpecListItem struct {
	Case             int
	Expression       *Expression
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetTerminalNextSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalNextSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalNextSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.SimpleExpression.Pos()
	case 1, 2, 3, 4, 5, 6, 7, 8:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalNextSpecListOpt represents data reduced by productions:
//
//	SetTerminalNextSpecListOpt:
//	        /* empty */
//	|       SetTerminalNextSpecList  // Case 1
type SetTerminalNextSpecListOpt struct {
	SetTerminalNextSpecList *SetTerminalNextSpecList
}

func (n *SetTerminalNextSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalNextSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalNextSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalNextSpecList.Pos()
}

// SetTerminalPbmSpecList represents data reduced by productions:
//
//	SetTerminalPbmSpecList:
//	        SetTerminalPbmSpecListItem
//	|       SetTerminalPbmSpecList SetTerminalPbmSpecListItem  // Case 1
type SetTerminalPbmSpecList struct {
	Case                       int
	SetTerminalPbmSpecList     *SetTerminalPbmSpecList
	SetTerminalPbmSpecListItem *SetTerminalPbmSpecListItem
}

func (n *SetTerminalPbmSpecList) reverse() *SetTerminalPbmSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalPbmSpecList
	for nb != nil {
		nc := nb.SetTerminalPbmSpecList
		nb.SetTerminalPbmSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalPbmSpecList = nil
	return na
}

func (n *SetTerminalPbmSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalPbmSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPbmSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalPbmSpecList.Pos()
	case 0:
		return n.SetTerminalPbmSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalPbmSpecListItem represents data reduced by productions:
//
//	SetTerminalPbmSpecListItem:
//	        SimpleExpression
//	|       "size" ExpressionList  // Case 1
type SetTerminalPbmSpecListItem struct {
	Case             int
	ExpressionList   *ExpressionList
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetTerminalPbmSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPbmSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPbmSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.SimpleExpression.Pos()
	case 1:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalPbmSpecListOpt represents data reduced by productions:
//
//	SetTerminalPbmSpecListOpt:
//	        /* empty */
//	|       SetTerminalPbmSpecList  // Case 1
type SetTerminalPbmSpecListOpt struct {
	SetTerminalPbmSpecList *SetTerminalPbmSpecList
}

func (n *SetTerminalPbmSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPbmSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPbmSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalPbmSpecList.Pos()
}

// SetTerminalPdfSpecList represents data reduced by productions:
//
//	SetTerminalPdfSpecList:
//	        SetTerminalPdfSpecListItem
//	|       SetTerminalPdfSpecList SetTerminalPdfSpecListItem  // Case 1
type SetTerminalPdfSpecList struct {
	Case                       int
	SetTerminalPdfSpecList     *SetTerminalPdfSpecList
	SetTerminalPdfSpecListItem *SetTerminalPdfSpecListItem
}

func (n *SetTerminalPdfSpecList) reverse() *SetTerminalPdfSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalPdfSpecList
	for nb != nil {
		nc := nb.SetTerminalPdfSpecList
		nb.SetTerminalPdfSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalPdfSpecList = nil
	return na
}

func (n *SetTerminalPdfSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalPdfSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPdfSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalPdfSpecList.Pos()
	case 0:
		return n.SetTerminalPdfSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalPdfSpecListItem represents data reduced by productions:
//
//	SetTerminalPdfSpecListItem:
//	        "monochrome"
//	|       "color"                    // Case 1
//	|       "colour"                   // Case 2
//	|       "enhanced"                 // Case 3
//	|       "noenhanced"               // Case 4
//	|       "fname" Expression         // Case 5
//	|       "fsize" Expression         // Case 6
//	|       "font" Expression          // Case 7
//	|       "fontscale" Expression     // Case 8
//	|       "linewidth" Expression     // Case 9
//	|       "lw" Expression            // Case 10
//	|       "rounded"                  // Case 11
//	|       "butt"                     // Case 12
//	|       "dl" Expression            // Case 13
//	|       "size" ExpressionUnitList  // Case 14
type SetTerminalPdfSpecListItem struct {
	Case               int
	Expression         *Expression
	ExpressionUnitList *ExpressionUnitList
	Token              xc.Token
}

func (n *SetTerminalPdfSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPdfSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPdfSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalPdfSpecListOpt represents data reduced by productions:
//
//	SetTerminalPdfSpecListOpt:
//	        /* empty */
//	|       SetTerminalPdfSpecList  // Case 1
type SetTerminalPdfSpecListOpt struct {
	SetTerminalPdfSpecList *SetTerminalPdfSpecList
}

func (n *SetTerminalPdfSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPdfSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPdfSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalPdfSpecList.Pos()
}

// SetTerminalPdfcairoSpecList represents data reduced by productions:
//
//	SetTerminalPdfcairoSpecList:
//	        SetTerminalPdfcairoSpecListItem
//	|       SetTerminalPdfcairoSpecList SetTerminalPdfcairoSpecListItem  // Case 1
type SetTerminalPdfcairoSpecList struct {
	Case                            int
	SetTerminalPdfcairoSpecList     *SetTerminalPdfcairoSpecList
	SetTerminalPdfcairoSpecListItem *SetTerminalPdfcairoSpecListItem
}

func (n *SetTerminalPdfcairoSpecList) reverse() *SetTerminalPdfcairoSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalPdfcairoSpecList
	for nb != nil {
		nc := nb.SetTerminalPdfcairoSpecList
		nb.SetTerminalPdfcairoSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalPdfcairoSpecList = nil
	return na
}

func (n *SetTerminalPdfcairoSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalPdfcairoSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPdfcairoSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalPdfcairoSpecList.Pos()
	case 0:
		return n.SetTerminalPdfcairoSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalPdfcairoSpecListItem represents data reduced by productions:
//
//	SetTerminalPdfcairoSpecListItem:
//	        "enhanced"
//	|       "noenhanced"               // Case 1
//	|       "mono"                     // Case 2
//	|       "color"                    // Case 3
//	|       "font" Expression          // Case 4
//	|       "fontscale" Expression     // Case 5
//	|       "linewidth" Expression     // Case 6
//	|       "rounded"                  // Case 7
//	|       "butt"                     // Case 8
//	|       "square"                   // Case 9
//	|       "dashlength" Expression    // Case 10
//	|       "background" Expression    // Case 11
//	|       "size" ExpressionUnitList  // Case 12
type SetTerminalPdfcairoSpecListItem struct {
	Case               int
	Expression         *Expression
	ExpressionUnitList *ExpressionUnitList
	Token              xc.Token
}

func (n *SetTerminalPdfcairoSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPdfcairoSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPdfcairoSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalPdfcairoSpecListOpt represents data reduced by productions:
//
//	SetTerminalPdfcairoSpecListOpt:
//	        /* empty */
//	|       SetTerminalPdfcairoSpecList  // Case 1
type SetTerminalPdfcairoSpecListOpt struct {
	SetTerminalPdfcairoSpecList *SetTerminalPdfcairoSpecList
}

func (n *SetTerminalPdfcairoSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPdfcairoSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPdfcairoSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalPdfcairoSpecList.Pos()
}

// SetTerminalPmSpecList represents data reduced by productions:
//
//	SetTerminalPmSpecList:
//	        SetTerminalPmSpecListItem
//	|       SetTerminalPmSpecList SetTerminalPmSpecListItem  // Case 1
type SetTerminalPmSpecList struct {
	Case                      int
	SetTerminalPmSpecList     *SetTerminalPmSpecList
	SetTerminalPmSpecListItem *SetTerminalPmSpecListItem
}

func (n *SetTerminalPmSpecList) reverse() *SetTerminalPmSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalPmSpecList
	for nb != nil {
		nc := nb.SetTerminalPmSpecList
		nb.SetTerminalPmSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalPmSpecList = nil
	return na
}

func (n *SetTerminalPmSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalPmSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPmSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalPmSpecList.Pos()
	case 0:
		return n.SetTerminalPmSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalPmSpecListItem represents data reduced by productions:
//
//	SetTerminalPmSpecListItem:
//	        "server" ExpressionOpt
//	|       "persist"               // Case 1
//	|       "widelines"             // Case 2
//	|       "enhanced"              // Case 3
//	|       SimpleExpression        // Case 4
type SetTerminalPmSpecListItem struct {
	Case             int
	ExpressionOpt    *ExpressionOpt
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetTerminalPmSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPmSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPmSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 4:
		return n.SimpleExpression.Pos()
	case 0, 1, 2, 3:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalPmSpecListOpt represents data reduced by productions:
//
//	SetTerminalPmSpecListOpt:
//	        /* empty */
//	|       SetTerminalPmSpecList  // Case 1
type SetTerminalPmSpecListOpt struct {
	SetTerminalPmSpecList *SetTerminalPmSpecList
}

func (n *SetTerminalPmSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPmSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPmSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalPmSpecList.Pos()
}

// SetTerminalPngSpecList represents data reduced by productions:
//
//	SetTerminalPngSpecList:
//	        SetTerminalPngSpecListItem
//	|       SetTerminalPngSpecList SetTerminalPngSpecListItem  // Case 1
type SetTerminalPngSpecList struct {
	Case                       int
	SetTerminalPngSpecList     *SetTerminalPngSpecList
	SetTerminalPngSpecListItem *SetTerminalPngSpecListItem
}

func (n *SetTerminalPngSpecList) reverse() *SetTerminalPngSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalPngSpecList
	for nb != nil {
		nc := nb.SetTerminalPngSpecList
		nb.SetTerminalPngSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalPngSpecList = nil
	return na
}

func (n *SetTerminalPngSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalPngSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPngSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalPngSpecList.Pos()
	case 0:
		return n.SetTerminalPngSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalPngSpecListItem represents data reduced by productions:
//
//	SetTerminalPngSpecListItem:
//	        "enhanced"
//	|       "noenhanced"             // Case 1
//	|       "transparent"            // Case 2
//	|       "notransparent"          // Case 3
//	|       "interlace"              // Case 4
//	|       "nointerlace"            // Case 5
//	|       "truecolor"              // Case 6
//	|       "notruecolor"            // Case 7
//	|       "rounded"                // Case 8
//	|       "butt"                   // Case 9
//	|       "linewidth" Expression   // Case 10
//	|       "dashlength" Expression  // Case 11
//	|       "tiny"                   // Case 12
//	|       "small"                  // Case 13
//	|       "medium"                 // Case 14
//	|       "large"                  // Case 15
//	|       "giant"                  // Case 16
//	|       "font" Expression        // Case 17
//	|       "fontscale" Expression   // Case 18
//	|       "size" ExpressionList    // Case 19
//	|       "crop"                   // Case 20
//	|       "nocrop"                 // Case 21
//	|       "background" Expression  // Case 22
type SetTerminalPngSpecListItem struct {
	Case           int
	Expression     *Expression
	ExpressionList *ExpressionList
	Token          xc.Token
}

func (n *SetTerminalPngSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPngSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPngSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalPngSpecListOpt represents data reduced by productions:
//
//	SetTerminalPngSpecListOpt:
//	        /* empty */
//	|       SetTerminalPngSpecList  // Case 1
type SetTerminalPngSpecListOpt struct {
	SetTerminalPngSpecList *SetTerminalPngSpecList
}

func (n *SetTerminalPngSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPngSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPngSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalPngSpecList.Pos()
}

// SetTerminalPngcairoSpecList represents data reduced by productions:
//
//	SetTerminalPngcairoSpecList:
//	        SetTerminalPngcairoSpecListItem
//	|       SetTerminalPngcairoSpecList SetTerminalPngcairoSpecListItem  // Case 1
type SetTerminalPngcairoSpecList struct {
	Case                            int
	SetTerminalPngcairoSpecList     *SetTerminalPngcairoSpecList
	SetTerminalPngcairoSpecListItem *SetTerminalPngcairoSpecListItem
}

func (n *SetTerminalPngcairoSpecList) reverse() *SetTerminalPngcairoSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalPngcairoSpecList
	for nb != nil {
		nc := nb.SetTerminalPngcairoSpecList
		nb.SetTerminalPngcairoSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalPngcairoSpecList = nil
	return na
}

func (n *SetTerminalPngcairoSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalPngcairoSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPngcairoSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalPngcairoSpecList.Pos()
	case 0:
		return n.SetTerminalPngcairoSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalPngcairoSpecListItem represents data reduced by productions:
//
//	SetTerminalPngcairoSpecListItem:
//	        "enhanced"
//	|       "noenhanced"               // Case 1
//	|       "mono"                     // Case 2
//	|       "color"                    // Case 3
//	|       "transparent"              // Case 4
//	|       "notransparent"            // Case 5
//	|       "crop"                     // Case 6
//	|       "nocrop"                   // Case 7
//	|       "background" Expression    // Case 8
//	|       "font" Expression          // Case 9
//	|       "fontscale" Expression     // Case 10
//	|       "linewidth" Expression     // Case 11
//	|       "rounded"                  // Case 12
//	|       "butt"                     // Case 13
//	|       "square"                   // Case 14
//	|       "dashlength" Expression    // Case 15
//	|       "size" ExpressionUnitList  // Case 16
type SetTerminalPngcairoSpecListItem struct {
	Case               int
	Expression         *Expression
	ExpressionUnitList *ExpressionUnitList
	Token              xc.Token
}

func (n *SetTerminalPngcairoSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPngcairoSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPngcairoSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalPngcairoSpecListOpt represents data reduced by productions:
//
//	SetTerminalPngcairoSpecListOpt:
//	        /* empty */
//	|       SetTerminalPngcairoSpecList  // Case 1
type SetTerminalPngcairoSpecListOpt struct {
	SetTerminalPngcairoSpecList *SetTerminalPngcairoSpecList
}

func (n *SetTerminalPngcairoSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPngcairoSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPngcairoSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalPngcairoSpecList.Pos()
}

// SetTerminalPostscriptSpecList represents data reduced by productions:
//
//	SetTerminalPostscriptSpecList:
//	        SetTerminalPostscriptSpecListItem
//	|       SetTerminalPostscriptSpecList SetTerminalPostscriptSpecListItem  // Case 1
type SetTerminalPostscriptSpecList struct {
	Case                              int
	SetTerminalPostscriptSpecList     *SetTerminalPostscriptSpecList
	SetTerminalPostscriptSpecListItem *SetTerminalPostscriptSpecListItem
}

func (n *SetTerminalPostscriptSpecList) reverse() *SetTerminalPostscriptSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalPostscriptSpecList
	for nb != nil {
		nc := nb.SetTerminalPostscriptSpecList
		nb.SetTerminalPostscriptSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalPostscriptSpecList = nil
	return na
}

func (n *SetTerminalPostscriptSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalPostscriptSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPostscriptSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalPostscriptSpecList.Pos()
	case 0:
		return n.SetTerminalPostscriptSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalPostscriptSpecListItem represents data reduced by productions:
//
//	SetTerminalPostscriptSpecListItem:
//	        "default"
//	|       "landscape"                               // Case 1
//	|       "portrait"                                // Case 2
//	|       "eps"                                     // Case 3
//	|       "enhanced"                                // Case 4
//	|       "noenhanced"                              // Case 5
//	|       "defaultplex"                             // Case 6
//	|       "simplex"                                 // Case 7
//	|       "duplex"                                  // Case 8
//	|       "fontfile" Expression                     // Case 9
//	|       "fontfile" "add" Expression               // Case 10
//	|       "fontfile" "delete" Expression            // Case 11
//	|       "nofontfiles"                             // Case 12
//	|       "adobeglyphnames"                         // Case 13
//	|       "noadobeglyphnames"                       // Case 14
//	|       "level1"                                  // Case 15
//	|       "leveldefault"                            // Case 16
//	|       "level3"                                  // Case 17
//	|       "color"                                   // Case 18
//	|       "colour"                                  // Case 19
//	|       "monochrome"                              // Case 20
//	|       "background" Expression                   // Case 21
//	|       "nobackground"                            // Case 22
//	|       "dashlength" Expression                   // Case 23
//	|       "dl" Expression                           // Case 24
//	|       "linewidth" Expression                    // Case 25
//	|       "lw" Expression                           // Case 26
//	|       "rounded"                                 // Case 27
//	|       "butt"                                    // Case 28
//	|       "clip"                                    // Case 29
//	|       "noclip"                                  // Case 30
//	|       "palfuncparam" Expression                 // Case 31
//	|       "palfuncparam" Expression ',' Expression  // Case 32
//	|       "size" ExpressionUnitList                 // Case 33
//	|       "blacktext"                               // Case 34
//	|       "colortext"                               // Case 35
//	|       "colourtext"                              // Case 36
//	|       "font" Expression                         // Case 37
//	|       "font" Expression SimpleExpression        // Case 38
//	|       SimpleExpression                          // Case 39
//	|       "fontscale" Expression                    // Case 40
type SetTerminalPostscriptSpecListItem struct {
	Case               int
	Expression         *Expression
	Expression2        *Expression
	ExpressionUnitList *ExpressionUnitList
	SimpleExpression   *SimpleExpression
	Token              xc.Token
	Token2             xc.Token
}

func (n *SetTerminalPostscriptSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPostscriptSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPostscriptSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 39:
		return n.SimpleExpression.Pos()
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalPostscriptSpecListOpt represents data reduced by productions:
//
//	SetTerminalPostscriptSpecListOpt:
//	        /* empty */
//	|       SetTerminalPostscriptSpecList  // Case 1
type SetTerminalPostscriptSpecListOpt struct {
	SetTerminalPostscriptSpecList *SetTerminalPostscriptSpecList
}

func (n *SetTerminalPostscriptSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPostscriptSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPostscriptSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalPostscriptSpecList.Pos()
}

// SetTerminalPstexSpecList represents data reduced by productions:
//
//	SetTerminalPstexSpecList:
//	        SetTerminalPstexSpecListItem
//	|       SetTerminalPstexSpecList SetTerminalPstexSpecListItem  // Case 1
type SetTerminalPstexSpecList struct {
	Case                         int
	SetTerminalPstexSpecList     *SetTerminalPstexSpecList
	SetTerminalPstexSpecListItem *SetTerminalPstexSpecListItem
}

func (n *SetTerminalPstexSpecList) reverse() *SetTerminalPstexSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalPstexSpecList
	for nb != nil {
		nc := nb.SetTerminalPstexSpecList
		nb.SetTerminalPstexSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalPstexSpecList = nil
	return na
}

func (n *SetTerminalPstexSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalPstexSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPstexSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalPstexSpecList.Pos()
	case 0:
		return n.SetTerminalPstexSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalPstexSpecListItem represents data reduced by productions:
//
//	SetTerminalPstexSpecListItem:
//	        "default"
//	|       "rotate"                       // Case 1
//	|       "norotate"                     // Case 2
//	|       "oldstyle"                     // Case 3
//	|       "newstyle"                     // Case 4
//	|       "auxfile"                      // Case 5
//	|       "noauxfile"                    // Case 6
//	|       "level1"                       // Case 7
//	|       "leveldefault"                 // Case 8
//	|       "level3"                       // Case 9
//	|       "color"                        // Case 10
//	|       "colour"                       // Case 11
//	|       "monochrome"                   // Case 12
//	|       "background" Expression        // Case 13
//	|       "nobackground"                 // Case 14
//	|       "dashlength" Expression        // Case 15
//	|       "dl" Expression                // Case 16
//	|       "linewidth" Expression         // Case 17
//	|       "lw" Expression                // Case 18
//	|       "rounded"                      // Case 19
//	|       "butt"                         // Case 20
//	|       "clip"                         // Case 21
//	|       "noclip"                       // Case 22
//	|       "palfuncparam" ExpressionList  // Case 23
//	|       "size" ExpressionUnitList      // Case 24
//	|       SimpleExpression               // Case 25
type SetTerminalPstexSpecListItem struct {
	Case               int
	Expression         *Expression
	ExpressionList     *ExpressionList
	ExpressionUnitList *ExpressionUnitList
	SimpleExpression   *SimpleExpression
	Token              xc.Token
}

func (n *SetTerminalPstexSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPstexSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPstexSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 25:
		return n.SimpleExpression.Pos()
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalPstexSpecListOpt represents data reduced by productions:
//
//	SetTerminalPstexSpecListOpt:
//	        /* empty */
//	|       SetTerminalPstexSpecList  // Case 1
type SetTerminalPstexSpecListOpt struct {
	SetTerminalPstexSpecList *SetTerminalPstexSpecList
}

func (n *SetTerminalPstexSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPstexSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPstexSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalPstexSpecList.Pos()
}

// SetTerminalPstricksSpecList represents data reduced by productions:
//
//	SetTerminalPstricksSpecList:
//	        SetTerminalPstricksSpecListItem
//	|       SetTerminalPstricksSpecList SetTerminalPstricksSpecListItem  // Case 1
type SetTerminalPstricksSpecList struct {
	Case                            int
	SetTerminalPstricksSpecList     *SetTerminalPstricksSpecList
	SetTerminalPstricksSpecListItem *SetTerminalPstricksSpecListItem
}

func (n *SetTerminalPstricksSpecList) reverse() *SetTerminalPstricksSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalPstricksSpecList
	for nb != nil {
		nc := nb.SetTerminalPstricksSpecList
		nb.SetTerminalPstricksSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalPstricksSpecList = nil
	return na
}

func (n *SetTerminalPstricksSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalPstricksSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPstricksSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalPstricksSpecList.Pos()
	case 0:
		return n.SetTerminalPstricksSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalPstricksSpecListItem represents data reduced by productions:
//
//	SetTerminalPstricksSpecListItem:
//	        "hacktext"
//	|       "nohacktext"  // Case 1
//	|       "unit"        // Case 2
//	|       "nounit"      // Case 3
type SetTerminalPstricksSpecListItem struct {
	Case  int
	Token xc.Token
}

func (n *SetTerminalPstricksSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPstricksSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPstricksSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalPstricksSpecListOpt represents data reduced by productions:
//
//	SetTerminalPstricksSpecListOpt:
//	        /* empty */
//	|       SetTerminalPstricksSpecList  // Case 1
type SetTerminalPstricksSpecListOpt struct {
	SetTerminalPstricksSpecList *SetTerminalPstricksSpecList
}

func (n *SetTerminalPstricksSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalPstricksSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalPstricksSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalPstricksSpecList.Pos()
}

// SetTerminalQtSpecList represents data reduced by productions:
//
//	SetTerminalQtSpecList:
//	        SetTerminalQtSpecListItem
//	|       SetTerminalQtSpecList SetTerminalQtSpecListItem  // Case 1
type SetTerminalQtSpecList struct {
	Case                      int
	SetTerminalQtSpecList     *SetTerminalQtSpecList
	SetTerminalQtSpecListItem *SetTerminalQtSpecListItem
}

func (n *SetTerminalQtSpecList) reverse() *SetTerminalQtSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalQtSpecList
	for nb != nil {
		nc := nb.SetTerminalQtSpecList
		nb.SetTerminalQtSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalQtSpecList = nil
	return na
}

func (n *SetTerminalQtSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalQtSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalQtSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalQtSpecList.Pos()
	case 0:
		return n.SetTerminalQtSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalQtSpecListItem represents data reduced by productions:
//
//	SetTerminalQtSpecListItem:
//	        SimpleExpression
//	|       "size" ExpressionList      // Case 1
//	|       "position" ExpressionList  // Case 2
//	|       "title" Expression         // Case 3
//	|       "font" Expression          // Case 4
//	|       "enhanced"                 // Case 5
//	|       "noenhanced"               // Case 6
//	|       "dashlength" Expression    // Case 7
//	|       "persist"                  // Case 8
//	|       "nopersist"                // Case 9
//	|       "raise"                    // Case 10
//	|       "noraise"                  // Case 11
//	|       "ctrl"                     // Case 12
//	|       "noctrl"                   // Case 13
//	|       "close"                    // Case 14
//	|       "widget" Expression        // Case 15
type SetTerminalQtSpecListItem struct {
	Case             int
	Expression       *Expression
	ExpressionList   *ExpressionList
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetTerminalQtSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalQtSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalQtSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.SimpleExpression.Pos()
	case 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalQtSpecListOpt represents data reduced by productions:
//
//	SetTerminalQtSpecListOpt:
//	        /* empty */
//	|       SetTerminalQtSpecList  // Case 1
type SetTerminalQtSpecListOpt struct {
	SetTerminalQtSpecList *SetTerminalQtSpecList
}

func (n *SetTerminalQtSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalQtSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalQtSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalQtSpecList.Pos()
}

// SetTerminalSpec represents data reduced by productions:
//
//	SetTerminalSpec:
//	        SetTerminalInner
//	|       "push"            // Case 1
//	|       "pop"             // Case 2
type SetTerminalSpec struct {
	Case             int
	SetTerminalInner *SetTerminalInner
	Token            xc.Token
}

func (n *SetTerminalSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.SetTerminalInner.Pos()
	case 1, 2:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalSvgSpecList represents data reduced by productions:
//
//	SetTerminalSvgSpecList:
//	        SetTerminalSvgSpecListItem
//	|       SetTerminalSvgSpecList SetTerminalSvgSpecListItem  // Case 1
type SetTerminalSvgSpecList struct {
	Case                       int
	SetTerminalSvgSpecList     *SetTerminalSvgSpecList
	SetTerminalSvgSpecListItem *SetTerminalSvgSpecListItem
}

func (n *SetTerminalSvgSpecList) reverse() *SetTerminalSvgSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalSvgSpecList
	for nb != nil {
		nc := nb.SetTerminalSvgSpecList
		nb.SetTerminalSvgSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalSvgSpecList = nil
	return na
}

func (n *SetTerminalSvgSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalSvgSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalSvgSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalSvgSpecList.Pos()
	case 0:
		return n.SetTerminalSvgSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalSvgSpecListItem represents data reduced by productions:
//
//	SetTerminalSvgSpecListItem:
//	        "portrait"
//	|       "size" ExpressionList    // Case 1
//	|       "fixed"                  // Case 2
//	|       "dynamic"                // Case 3
//	|       "enhanced"               // Case 4
//	|       "noenhanced"             // Case 5
//	|       "fname" Expression       // Case 6
//	|       "fsize" Expression       // Case 7
//	|       "mouse"                  // Case 8
//	|       "standalone"             // Case 9
//	|       "jsdir" Expression       // Case 10
//	|       "name" Expression        // Case 11
//	|       "font" Expression        // Case 12
//	|       "fontfile" Expression    // Case 13
//	|       "rounded"                // Case 14
//	|       "butt"                   // Case 15
//	|       "square"                 // Case 16
//	|       "solid"                  // Case 17
//	|       "dashed"                 // Case 18
//	|       "linewidth" Expression   // Case 19
//	|       "background" Expression  // Case 20
type SetTerminalSvgSpecListItem struct {
	Case           int
	Expression     *Expression
	ExpressionList *ExpressionList
	Token          xc.Token
}

func (n *SetTerminalSvgSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalSvgSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalSvgSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalSvgSpecListOpt represents data reduced by productions:
//
//	SetTerminalSvgSpecListOpt:
//	        /* empty */
//	|       SetTerminalSvgSpecList  // Case 1
type SetTerminalSvgSpecListOpt struct {
	SetTerminalSvgSpecList *SetTerminalSvgSpecList
}

func (n *SetTerminalSvgSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalSvgSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalSvgSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalSvgSpecList.Pos()
}

// SetTerminalTgifSpecList represents data reduced by productions:
//
//	SetTerminalTgifSpecList:
//	        SetTerminalTgifSpecListItem
//	|       SetTerminalTgifSpecList SetTerminalTgifSpecListItem  // Case 1
type SetTerminalTgifSpecList struct {
	Case                        int
	SetTerminalTgifSpecList     *SetTerminalTgifSpecList
	SetTerminalTgifSpecListItem *SetTerminalTgifSpecListItem
}

func (n *SetTerminalTgifSpecList) reverse() *SetTerminalTgifSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalTgifSpecList
	for nb != nil {
		nc := nb.SetTerminalTgifSpecList
		nb.SetTerminalTgifSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalTgifSpecList = nil
	return na
}

func (n *SetTerminalTgifSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalTgifSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalTgifSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalTgifSpecList.Pos()
	case 0:
		return n.SetTerminalTgifSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalTgifSpecListItem represents data reduced by productions:
//
//	SetTerminalTgifSpecListItem:
//	        "portrait"
//	|       "landscape"             // Case 1
//	|       "default"               // Case 2
//	|       '[' ExpressionList ']'  // Case 3
//	|       "monochrome"            // Case 4
//	|       "color"                 // Case 5
//	|       "linewdith" Expression  // Case 6
//	|       "lw" Expression         // Case 7
//	|       "solid"                 // Case 8
//	|       "dashed"                // Case 9
//	|       "font" Expression       // Case 10
//	|       SimpleExpression        // Case 11
type SetTerminalTgifSpecListItem struct {
	Case             int
	Expression       *Expression
	ExpressionList   *ExpressionList
	SimpleExpression *SimpleExpression
	Token            xc.Token
	Token2           xc.Token
}

func (n *SetTerminalTgifSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalTgifSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalTgifSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 11:
		return n.SimpleExpression.Pos()
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalTgifSpecListOpt represents data reduced by productions:
//
//	SetTerminalTgifSpecListOpt:
//	        /* empty */
//	|       SetTerminalTgifSpecList  // Case 1
type SetTerminalTgifSpecListOpt struct {
	SetTerminalTgifSpecList *SetTerminalTgifSpecList
}

func (n *SetTerminalTgifSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalTgifSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalTgifSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalTgifSpecList.Pos()
}

// SetTerminalTkcanvasSpecList represents data reduced by productions:
//
//	SetTerminalTkcanvasSpecList:
//	        SetTerminalTkcanvasSpecListItem
//	|       SetTerminalTkcanvasSpecList SetTerminalTkcanvasSpecListItem  // Case 1
type SetTerminalTkcanvasSpecList struct {
	Case                            int
	SetTerminalTkcanvasSpecList     *SetTerminalTkcanvasSpecList
	SetTerminalTkcanvasSpecListItem *SetTerminalTkcanvasSpecListItem
}

func (n *SetTerminalTkcanvasSpecList) reverse() *SetTerminalTkcanvasSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalTkcanvasSpecList
	for nb != nil {
		nc := nb.SetTerminalTkcanvasSpecList
		nb.SetTerminalTkcanvasSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalTkcanvasSpecList = nil
	return na
}

func (n *SetTerminalTkcanvasSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalTkcanvasSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalTkcanvasSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalTkcanvasSpecList.Pos()
	case 0:
		return n.SetTerminalTkcanvasSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalTkcanvasSpecListItem represents data reduced by productions:
//
//	SetTerminalTkcanvasSpecListItem:
//	        "perltk"
//	|       "interactive"  // Case 1
type SetTerminalTkcanvasSpecListItem struct {
	Case  int
	Token xc.Token
}

func (n *SetTerminalTkcanvasSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalTkcanvasSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalTkcanvasSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTerminalTkcanvasSpecListOpt represents data reduced by productions:
//
//	SetTerminalTkcanvasSpecListOpt:
//	        /* empty */
//	|       SetTerminalTkcanvasSpecList  // Case 1
type SetTerminalTkcanvasSpecListOpt struct {
	SetTerminalTkcanvasSpecList *SetTerminalTkcanvasSpecList
}

func (n *SetTerminalTkcanvasSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalTkcanvasSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalTkcanvasSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalTkcanvasSpecList.Pos()
}

// SetTerminalVgaglSpecList represents data reduced by productions:
//
//	SetTerminalVgaglSpecList:
//	        SetTerminalVgaglSpecListItem
//	|       SetTerminalVgaglSpecList SetTerminalVgaglSpecListItem  // Case 1
type SetTerminalVgaglSpecList struct {
	Case                         int
	SetTerminalVgaglSpecList     *SetTerminalVgaglSpecList
	SetTerminalVgaglSpecListItem *SetTerminalVgaglSpecListItem
}

func (n *SetTerminalVgaglSpecList) reverse() *SetTerminalVgaglSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalVgaglSpecList
	for nb != nil {
		nc := nb.SetTerminalVgaglSpecList
		nb.SetTerminalVgaglSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalVgaglSpecList = nil
	return na
}

func (n *SetTerminalVgaglSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalVgaglSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalVgaglSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalVgaglSpecList.Pos()
	case 0:
		return n.SetTerminalVgaglSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalVgaglSpecListItem represents data reduced by productions:
//
//	SetTerminalVgaglSpecListItem:
//	        "background" ExpressionList
//	|       "uniform"                    // Case 1
//	|       "interpolate"                // Case 2
//	|       SimpleExpression             // Case 3
type SetTerminalVgaglSpecListItem struct {
	Case             int
	ExpressionList   *ExpressionList
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetTerminalVgaglSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalVgaglSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalVgaglSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 3:
		return n.SimpleExpression.Pos()
	case 0, 1, 2:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalVgaglSpecListOpt represents data reduced by productions:
//
//	SetTerminalVgaglSpecListOpt:
//	        /* empty */
//	|       SetTerminalVgaglSpecList  // Case 1
type SetTerminalVgaglSpecListOpt struct {
	SetTerminalVgaglSpecList *SetTerminalVgaglSpecList
}

func (n *SetTerminalVgaglSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalVgaglSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalVgaglSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalVgaglSpecList.Pos()
}

// SetTerminalWindowsSpecList represents data reduced by productions:
//
//	SetTerminalWindowsSpecList:
//	        SetTerminalWindowsSpecListItem
//	|       SetTerminalWindowsSpecList SetTerminalWindowsSpecListItem  // Case 1
type SetTerminalWindowsSpecList struct {
	Case                           int
	SetTerminalWindowsSpecList     *SetTerminalWindowsSpecList
	SetTerminalWindowsSpecListItem *SetTerminalWindowsSpecListItem
}

func (n *SetTerminalWindowsSpecList) reverse() *SetTerminalWindowsSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalWindowsSpecList
	for nb != nil {
		nc := nb.SetTerminalWindowsSpecList
		nb.SetTerminalWindowsSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalWindowsSpecList = nil
	return na
}

func (n *SetTerminalWindowsSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalWindowsSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalWindowsSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalWindowsSpecList.Pos()
	case 0:
		return n.SetTerminalWindowsSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalWindowsSpecListItem represents data reduced by productions:
//
//	SetTerminalWindowsSpecListItem:
//	        SimpleExpression
//	|       "color"                               // Case 1
//	|       "monochrome"                          // Case 2
//	|       "solid"                               // Case 3
//	|       "dashed"                              // Case 4
//	|       "rounded"                             // Case 5
//	|       "butt"                                // Case 6
//	|       "enhanced"                            // Case 7
//	|       "noenhanced"                          // Case 8
//	|       "font" Expression                     // Case 9
//	|       "fontscale" Expression                // Case 10
//	|       "linewidth" Expression                // Case 11
//	|       "background" Expression               // Case 12
//	|       "title" Expression                    // Case 13
//	|       "size" Expression ',' Expression      // Case 14
//	|       "wsize" Expression ',' Expression     // Case 15
//	|       "position" Expression ',' Expression  // Case 16
//	|       "close"                               // Case 17
type SetTerminalWindowsSpecListItem struct {
	Case             int
	Expression       *Expression
	Expression2      *Expression
	SimpleExpression *SimpleExpression
	Token            xc.Token
	Token2           xc.Token
}

func (n *SetTerminalWindowsSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalWindowsSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalWindowsSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.SimpleExpression.Pos()
	case 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalWindowsSpecListOpt represents data reduced by productions:
//
//	SetTerminalWindowsSpecListOpt:
//	        /* empty */
//	|       SetTerminalWindowsSpecList  // Case 1
type SetTerminalWindowsSpecListOpt struct {
	SetTerminalWindowsSpecList *SetTerminalWindowsSpecList
}

func (n *SetTerminalWindowsSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalWindowsSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalWindowsSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalWindowsSpecList.Pos()
}

// SetTerminalWxtSpecList represents data reduced by productions:
//
//	SetTerminalWxtSpecList:
//	        SetTerminalWxtSpecListItem
//	|       SetTerminalWxtSpecList SetTerminalWxtSpecListItem  // Case 1
type SetTerminalWxtSpecList struct {
	Case                       int
	SetTerminalWxtSpecList     *SetTerminalWxtSpecList
	SetTerminalWxtSpecListItem *SetTerminalWxtSpecListItem
}

func (n *SetTerminalWxtSpecList) reverse() *SetTerminalWxtSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalWxtSpecList
	for nb != nil {
		nc := nb.SetTerminalWxtSpecList
		nb.SetTerminalWxtSpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalWxtSpecList = nil
	return na
}

func (n *SetTerminalWxtSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalWxtSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalWxtSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalWxtSpecList.Pos()
	case 0:
		return n.SetTerminalWxtSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalWxtSpecListItem represents data reduced by productions:
//
//	SetTerminalWxtSpecListItem:
//	        SimpleExpression
//	|       "size" Expression ',' Expression      // Case 1
//	|       "position" Expression ',' Expression  // Case 2
//	|       "background" Expression               // Case 3
//	|       "enhanced"                            // Case 4
//	|       "noenhanced"                          // Case 5
//	|       "font" Expression                     // Case 6
//	|       "fontscale" Expression                // Case 7
//	|       "title" Expression                    // Case 8
//	|       "linewidth" Expression                // Case 9
//	|       "dashlength" Expression               // Case 10
//	|       "persist"                             // Case 11
//	|       "nopersist"                           // Case 12
//	|       "raise"                               // Case 13
//	|       "noraise"                             // Case 14
//	|       "ctrl"                                // Case 15
//	|       "noctrl"                              // Case 16
//	|       "close"                               // Case 17
type SetTerminalWxtSpecListItem struct {
	Case             int
	Expression       *Expression
	Expression2      *Expression
	SimpleExpression *SimpleExpression
	Token            xc.Token
	Token2           xc.Token
}

func (n *SetTerminalWxtSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalWxtSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalWxtSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.SimpleExpression.Pos()
	case 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalWxtSpecListOpt represents data reduced by productions:
//
//	SetTerminalWxtSpecListOpt:
//	        /* empty */
//	|       SetTerminalWxtSpecList  // Case 1
type SetTerminalWxtSpecListOpt struct {
	SetTerminalWxtSpecList *SetTerminalWxtSpecList
}

func (n *SetTerminalWxtSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalWxtSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalWxtSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalWxtSpecList.Pos()
}

// SetTerminalX11SpecList represents data reduced by productions:
//
//	SetTerminalX11SpecList:
//	        SetTerminalX11SpecListItem
//	|       SetTerminalX11SpecList SetTerminalX11SpecListItem  // Case 1
type SetTerminalX11SpecList struct {
	Case                       int
	SetTerminalX11SpecList     *SetTerminalX11SpecList
	SetTerminalX11SpecListItem *SetTerminalX11SpecListItem
}

func (n *SetTerminalX11SpecList) reverse() *SetTerminalX11SpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTerminalX11SpecList
	for nb != nil {
		nc := nb.SetTerminalX11SpecList
		nb.SetTerminalX11SpecList = na
		na = nb
		nb = nc
	}
	n.SetTerminalX11SpecList = nil
	return na
}

func (n *SetTerminalX11SpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTerminalX11SpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalX11SpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTerminalX11SpecList.Pos()
	case 0:
		return n.SetTerminalX11SpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalX11SpecListItem represents data reduced by productions:
//
//	SetTerminalX11SpecListItem:
//	        SimpleExpression
//	|       "window" Expression                   // Case 1
//	|       "enhanced"                            // Case 2
//	|       "noenhanced"                          // Case 3
//	|       "font" Expression                     // Case 4
//	|       "linewidth" Expression                // Case 5
//	|       "persist"                             // Case 6
//	|       "nopersist"                           // Case 7
//	|       "raise"                               // Case 8
//	|       "noraise"                             // Case 9
//	|       "ctrlq"                               // Case 10
//	|       "noctrlq"                             // Case 11
//	|       "replotonresize"                      // Case 12
//	|       "noreplotonresize"                    // Case 13
//	|       "close"                               // Case 14
//	|       "size" Expression ',' Expression      // Case 15
//	|       "position" Expression ',' Expression  // Case 16
//	|       "reset"                               // Case 17
type SetTerminalX11SpecListItem struct {
	Case             int
	Expression       *Expression
	Expression2      *Expression
	SimpleExpression *SimpleExpression
	Token            xc.Token
	Token2           xc.Token
}

func (n *SetTerminalX11SpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalX11SpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalX11SpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.SimpleExpression.Pos()
	case 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTerminalX11SpecListOpt represents data reduced by productions:
//
//	SetTerminalX11SpecListOpt:
//	        /* empty */
//	|       SetTerminalX11SpecList  // Case 1
type SetTerminalX11SpecListOpt struct {
	SetTerminalX11SpecList *SetTerminalX11SpecList
}

func (n *SetTerminalX11SpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTerminalX11SpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTerminalX11SpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTerminalX11SpecList.Pos()
}

// SetTermoptionSpec represents data reduced by productions:
//
//	SetTermoptionSpec:
//	        "enhanced"
//	|       "noenhanced"            // Case 1
//	|       "font" Expression       // Case 2
//	|       "fontscale" Expression  // Case 3
//	|       "solid"                 // Case 4
//	|       "dash"                  // Case 5
//	|       "dashed"                // Case 6
//	|       "linewidth" Expression  // Case 7
//	|       "lw" Expression         // Case 8
type SetTermoptionSpec struct {
	Case       int
	Expression *Expression
	Token      xc.Token
}

func (n *SetTermoptionSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTermoptionSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTermoptionSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTimestampSpecList represents data reduced by productions:
//
//	SetTimestampSpecList:
//	        SetTimestampSpecListItem
//	|       SetTimestampSpecList SetTimestampSpecListItem  // Case 1
type SetTimestampSpecList struct {
	Case                     int
	SetTimestampSpecList     *SetTimestampSpecList
	SetTimestampSpecListItem *SetTimestampSpecListItem
}

func (n *SetTimestampSpecList) reverse() *SetTimestampSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTimestampSpecList
	for nb != nil {
		nc := nb.SetTimestampSpecList
		nb.SetTimestampSpecList = na
		na = nb
		nb = nc
	}
	n.SetTimestampSpecList = nil
	return na
}

func (n *SetTimestampSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTimestampSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTimestampSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTimestampSpecList.Pos()
	case 0:
		return n.SetTimestampSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTimestampSpecListItem represents data reduced by productions:
//
//	SetTimestampSpecListItem:
//	        SimpleExpression
//	|       "top"                    // Case 1
//	|       "bottom"                 // Case 2
//	|       "rotate"                 // Case 3
//	|       "norotate"               // Case 4
//	|       "offset" ExpressionList  // Case 5
//	|       "font" Expression        // Case 6
//	|       "textcolor" ColorSpec    // Case 7
type SetTimestampSpecListItem struct {
	Case             int
	ColorSpec        *ColorSpec
	Expression       *Expression
	ExpressionList   *ExpressionList
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *SetTimestampSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTimestampSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTimestampSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.SimpleExpression.Pos()
	case 1, 2, 3, 4, 5, 6, 7:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetTimestampSpecListOpt represents data reduced by productions:
//
//	SetTimestampSpecListOpt:
//	        /* empty */
//	|       SetTimestampSpecList  // Case 1
type SetTimestampSpecListOpt struct {
	SetTimestampSpecList *SetTimestampSpecList
}

func (n *SetTimestampSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTimestampSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTimestampSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetTimestampSpecList.Pos()
}

// SetTitleSpecList represents data reduced by productions:
//
//	SetTitleSpecList:
//	        SetTitleSpecListItem
//	|       SetTitleSpecList SetTitleSpecListItem  // Case 1
type SetTitleSpecList struct {
	Case                 int
	SetTitleSpecList     *SetTitleSpecList
	SetTitleSpecListItem *SetTitleSpecListItem
}

func (n *SetTitleSpecList) reverse() *SetTitleSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetTitleSpecList
	for nb != nil {
		nc := nb.SetTitleSpecList
		nb.SetTitleSpecList = na
		na = nb
		nb = nc
	}
	n.SetTitleSpecList = nil
	return na
}

func (n *SetTitleSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetTitleSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTitleSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetTitleSpecList.Pos()
	case 0:
		return n.SetTitleSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetTitleSpecListItem represents data reduced by productions:
//
//	SetTitleSpecListItem:
//	        "offset" Position
//	|       "font" Expression           // Case 1
//	|       "textcolor" ColorSpec       // Case 2
//	|       "textcolor" "lt" ColorSpec  // Case 3
//	|       "tc" ColorSpec              // Case 4
//	|       "tc" "lt" ColorSpec         // Case 5
//	|       "textcolor" "default"       // Case 6
//	|       "tc" "default"              // Case 7
//	|       "enhanced"                  // Case 8
//	|       "noenhanced"                // Case 9
type SetTitleSpecListItem struct {
	Case       int
	ColorSpec  *ColorSpec
	Expression *Expression
	Position   *Position
	Token      xc.Token
	Token2     xc.Token
}

func (n *SetTitleSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTitleSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTitleSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetTitleSpecOpt represents data reduced by productions:
//
//	SetTitleSpecOpt:
//	        /* empty */
//	|       Expression                   // Case 1
//	|       Expression SetTitleSpecList  // Case 2
//	|       SetTitleSpecList             // Case 3
type SetTitleSpecOpt struct {
	Case             int
	Expression       *Expression
	SetTitleSpecList *SetTitleSpecList
}

func (n *SetTitleSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetTitleSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetTitleSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1, 2:
		return n.Expression.Pos()
	case 3:
		return n.SetTitleSpecList.Pos()
	default:
		panic("internal error")
	}
}

// SetViewSpec represents data reduced by productions:
//
//	SetViewSpec:
//	        ExpressionOptList
//	|       "map"                     // Case 1
//	|       "map" "scale" Expression  // Case 2
//	|       "equal" "xx"              // Case 3
//	|       "equal" "xy"              // Case 4
//	|       "equal" "xyz"             // Case 5
//	|       "noequal" "xx"            // Case 6
//	|       "noequal" "xy"            // Case 7
//	|       "noequal" "xyz"           // Case 8
type SetViewSpec struct {
	Case              int
	Expression        *Expression
	ExpressionOptList *ExpressionOptList
	Token             xc.Token
	Token2            xc.Token
}

func (n *SetViewSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetViewSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetViewSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.ExpressionOptList.Pos()
	case 1, 2, 3, 4, 5, 6, 7, 8:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetXLabelSpecList represents data reduced by productions:
//
//	SetXLabelSpecList:
//	        SetXLabelSpecListItem
//	|       SetXLabelSpecList SetXLabelSpecListItem  // Case 1
type SetXLabelSpecList struct {
	Case                  int
	SetXLabelSpecList     *SetXLabelSpecList
	SetXLabelSpecListItem *SetXLabelSpecListItem
}

func (n *SetXLabelSpecList) reverse() *SetXLabelSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetXLabelSpecList
	for nb != nil {
		nc := nb.SetXLabelSpecList
		nb.SetXLabelSpecList = na
		na = nb
		nb = nc
	}
	n.SetXLabelSpecList = nil
	return na
}

func (n *SetXLabelSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetXLabelSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetXLabelSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetXLabelSpecList.Pos()
	case 0:
		return n.SetXLabelSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetXLabelSpecListItem represents data reduced by productions:
//
//	SetXLabelSpecListItem:
//	        "offset" Position
//	|       "font" Expression           // Case 1
//	|       "tc" ColorSpec              // Case 2
//	|       "tc" "lt" ColorSpec         // Case 3
//	|       "tc"                        // Case 4
//	|       "textcolor" ColorSpec       // Case 5
//	|       "textcolor" "lt" ColorSpec  // Case 6
//	|       "textcolor"                 // Case 7
//	|       "enhanced"                  // Case 8
//	|       "noenhanced"                // Case 9
//	|       "rotate"                    // Case 10
//	|       "rotate" "by" Expression    // Case 11
//	|       "rotate" "parallel"         // Case 12
//	|       "norotate"                  // Case 13
type SetXLabelSpecListItem struct {
	Case       int
	ColorSpec  *ColorSpec
	Expression *Expression
	Position   *Position
	Token      xc.Token
	Token2     xc.Token
}

func (n *SetXLabelSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetXLabelSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetXLabelSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SetXLabelSpecOpt represents data reduced by productions:
//
//	SetXLabelSpecOpt:
//	        /* empty */
//	|       Expression                    // Case 1
//	|       Expression SetXLabelSpecList  // Case 2
//	|       SetXLabelSpecList             // Case 3
type SetXLabelSpecOpt struct {
	Case              int
	Expression        *Expression
	SetXLabelSpecList *SetXLabelSpecList
}

func (n *SetXLabelSpecOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetXLabelSpecOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetXLabelSpecOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1, 2:
		return n.Expression.Pos()
	case 3:
		return n.SetXLabelSpecList.Pos()
	default:
		panic("internal error")
	}
}

// SetXTicsSpecList represents data reduced by productions:
//
//	SetXTicsSpecList:
//	        SetXTicsSpecListItem
//	|       SetXTicsSpecList SetXTicsSpecListItem  // Case 1
type SetXTicsSpecList struct {
	Case                 int
	SetXTicsSpecList     *SetXTicsSpecList
	SetXTicsSpecListItem *SetXTicsSpecListItem
}

func (n *SetXTicsSpecList) reverse() *SetXTicsSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetXTicsSpecList
	for nb != nil {
		nc := nb.SetXTicsSpecList
		nb.SetXTicsSpecList = na
		na = nb
		nb = nc
	}
	n.SetXTicsSpecList = nil
	return na
}

func (n *SetXTicsSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetXTicsSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetXTicsSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.SetXTicsSpecList.Pos()
	case 0:
		return n.SetXTicsSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// SetXTicsSpecListItem represents data reduced by productions:
//
//	SetXTicsSpecListItem:
//	        NonParenthesizedExpression
//	|       NonParenthesizedExpression ',' Expression                 // Case 1
//	|       NonParenthesizedExpression ',' Expression ',' Expression  // Case 2
//	|       '(' TicsLabelList ')'                                     // Case 3
//	|       "axis"                                                    // Case 4
//	|       "border"                                                  // Case 5
//	|       "mirror"                                                  // Case 6
//	|       "nomirror"                                                // Case 7
//	|       "in"                                                      // Case 8
//	|       "out"                                                     // Case 9
//	|       "scale" "default"                                         // Case 10
//	|       "scale" Expression                                        // Case 11
//	|       "scale" Expression ',' Expression                         // Case 12
//	|       "rotate"                                                  // Case 13
//	|       "rotate" "by" Expression                                  // Case 14
//	|       "norotate"                                                // Case 15
//	|       "norotate" "by" Expression                                // Case 16
//	|       "offset" Expression                                       // Case 17
//	|       "offset" Expression ',' Expression                        // Case 18
//	|       "nooffset"                                                // Case 19
//	|       "left"                                                    // Case 20
//	|       "right"                                                   // Case 21
//	|       "center"                                                  // Case 22
//	|       "autojustify"                                             // Case 23
//	|       "add"                                                     // Case 24
//	|       "add" '(' TicsLabelList ')'                               // Case 25
//	|       "autofreq"                                                // Case 26
//	|       "format" Expression                                       // Case 27
//	|       "font" Expression                                         // Case 28
//	|       "enhanced"                                                // Case 29
//	|       "noenhanced"                                              // Case 30
//	|       "numeric"                                                 // Case 31
//	|       "timedate"                                                // Case 32
//	|       "geographic"                                              // Case 33
//	|       "rangelimited"                                            // Case 34
//	|       "textcolor"                                               // Case 35
//	|       "tc"                                                      // Case 36
//	|       "textcolor" ColorSpec                                     // Case 37
//	|       "tc" ColorSpec                                            // Case 38
//	|       "linetype" ColorSpec                                      // Case 39
//	|       "lt" ColorSpec                                            // Case 40
type SetXTicsSpecListItem struct {
	Case                       int
	ColorSpec                  *ColorSpec
	Expression                 *Expression
	Expression2                *Expression
	NonParenthesizedExpression *NonParenthesizedExpression
	TicsLabelList              *TicsLabelList
	Token                      xc.Token
	Token2                     xc.Token
	Token3                     xc.Token
}

func (n *SetXTicsSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetXTicsSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetXTicsSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0, 1, 2:
		return n.NonParenthesizedExpression.Pos()
	case 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetXTicsSpecListOpt represents data reduced by productions:
//
//	SetXTicsSpecListOpt:
//	        /* empty */
//	|       SetXTicsSpecList  // Case 1
type SetXTicsSpecListOpt struct {
	SetXTicsSpecList *SetXTicsSpecList
}

func (n *SetXTicsSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetXTicsSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetXTicsSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetXTicsSpecList.Pos()
}

// SetXyplaneSpec represents data reduced by productions:
//
//	SetXyplaneSpec:
//	        "at" Expression
//	|       "relative" Expression  // Case 1
//	|       Expression             // Case 2
type SetXyplaneSpec struct {
	Case       int
	Expression *Expression
	Token      xc.Token
}

func (n *SetXyplaneSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetXyplaneSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetXyplaneSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 2:
		return n.Expression.Pos()
	case 0, 1:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// SetZeroaxisSpecList represents data reduced by productions:
//
//	SetZeroaxisSpecList:
//	        LineStyleListItem
//	|       SetZeroaxisSpecList LineStyleListItem  // Case 1
type SetZeroaxisSpecList struct {
	Case                int
	LineStyleListItem   *LineStyleListItem
	SetZeroaxisSpecList *SetZeroaxisSpecList
}

func (n *SetZeroaxisSpecList) reverse() *SetZeroaxisSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SetZeroaxisSpecList
	for nb != nil {
		nc := nb.SetZeroaxisSpecList
		nb.SetZeroaxisSpecList = na
		na = nb
		nb = nc
	}
	n.SetZeroaxisSpecList = nil
	return na
}

func (n *SetZeroaxisSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SetZeroaxisSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetZeroaxisSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.LineStyleListItem.Pos()
	case 1:
		return n.SetZeroaxisSpecList.Pos()
	default:
		panic("internal error")
	}
}

// SetZeroaxisSpecListOpt represents data reduced by productions:
//
//	SetZeroaxisSpecListOpt:
//	        /* empty */
//	|       SetZeroaxisSpecList  // Case 1
type SetZeroaxisSpecListOpt struct {
	SetZeroaxisSpecList *SetZeroaxisSpecList
}

func (n *SetZeroaxisSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SetZeroaxisSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SetZeroaxisSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.SetZeroaxisSpecList.Pos()
}

// Show represents data reduced by production:
//
//	Show:
//	        "show" ShowSpec
type Show struct {
	ShowSpec *ShowSpec
	Token    xc.Token
}

func (n *Show) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Show) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Show) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// ShowDatafileSpecList represents data reduced by productions:
//
//	ShowDatafileSpecList:
//	        ShowDatafileSpecListItem
//	|       ShowDatafileSpecList ShowDatafileSpecListItem  // Case 1
type ShowDatafileSpecList struct {
	Case                     int
	ShowDatafileSpecList     *ShowDatafileSpecList
	ShowDatafileSpecListItem *ShowDatafileSpecListItem
}

func (n *ShowDatafileSpecList) reverse() *ShowDatafileSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.ShowDatafileSpecList
	for nb != nil {
		nc := nb.ShowDatafileSpecList
		nb.ShowDatafileSpecList = na
		na = nb
		nb = nc
	}
	n.ShowDatafileSpecList = nil
	return na
}

func (n *ShowDatafileSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *ShowDatafileSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *ShowDatafileSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.ShowDatafileSpecList.Pos()
	case 0:
		return n.ShowDatafileSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// ShowDatafileSpecListItem represents data reduced by productions:
//
//	ShowDatafileSpecListItem:
//	        "missing"
//	|       "separator"      // Case 1
//	|       "commentschars"  // Case 2
//	|       "binary"         // Case 3
//	|       "datasizes"      // Case 4
//	|       "filetypes"      // Case 5
type ShowDatafileSpecListItem struct {
	Case  int
	Token xc.Token
}

func (n *ShowDatafileSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *ShowDatafileSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *ShowDatafileSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// ShowDatafileSpecListOpt represents data reduced by productions:
//
//	ShowDatafileSpecListOpt:
//	        /* empty */
//	|       ShowDatafileSpecList  // Case 1
type ShowDatafileSpecListOpt struct {
	ShowDatafileSpecList *ShowDatafileSpecList
}

func (n *ShowDatafileSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *ShowDatafileSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *ShowDatafileSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.ShowDatafileSpecList.Pos()
}

// ShowSpec represents data reduced by productions:
//
//	ShowSpec:
//	        "angles"
//	|       "arrow" ExpressionOpt               // Case 1
//	|       "auto"                              // Case 2
//	|       "autoscale"                         // Case 3
//	|       "bars"                              // Case 4
//	|       "bind"                              // Case 5
//	|       "bmargin"                           // Case 6
//	|       "border"                            // Case 7
//	|       "boxwidth"                          // Case 8
//	|       "cbdata"                            // Case 9
//	|       "cbdtics"                           // Case 10
//	|       "cblabel"                           // Case 11
//	|       "cbmtics"                           // Case 12
//	|       "cbrange"                           // Case 13
//	|       "cbtics"                            // Case 14
//	|       "clabel"                            // Case 15
//	|       "clip"                              // Case 16
//	|       "cntrlabel"                         // Case 17
//	|       "cntrp"                             // Case 18
//	|       "cntrparam"                         // Case 19
//	|       "color"                             // Case 20
//	|       "colorbox"                          // Case 21
//	|       "colornames"                        // Case 22
//	|       "colorsequence"                     // Case 23
//	|       "contour"                           // Case 24
//	|       "dashtype"                          // Case 25
//	|       "datafile" ShowDatafileSpecListOpt  // Case 26
//	|       "decimalsign"                       // Case 27
//	|       "dgrid3d"                           // Case 28
//	|       "dummy"                             // Case 29
//	|       "encoding"                          // Case 30
//	|       "fit"                               // Case 31
//	|       "fontpath"                          // Case 32
//	|       "format"                            // Case 33
//	|       "grid"                              // Case 34
//	|       "hidden3d"                          // Case 35
//	|       "history"                           // Case 36
//	|       "iso"                               // Case 37
//	|       "isosamples"                        // Case 38
//	|       "key"                               // Case 39
//	|       "label" ExpressionOpt               // Case 40
//	|       "linetype"                          // Case 41
//	|       "link"                              // Case 42
//	|       "lmargin"                           // Case 43
//	|       "loadpath"                          // Case 44
//	|       "locale"                            // Case 45
//	|       "log"                               // Case 46
//	|       "logscale"                          // Case 47
//	|       "mapping"                           // Case 48
//	|       "margins"                           // Case 49
//	|       "monochrome"                        // Case 50
//	|       "mouse"                             // Case 51
//	|       "mcbtics"                           // Case 52
//	|       "multiplot"                         // Case 53
//	|       "mx2tics"                           // Case 54
//	|       "mxtics"                            // Case 55
//	|       "my2tics"                           // Case 56
//	|       "mytics"                            // Case 57
//	|       "mztics"                            // Case 58
//	|       "object"                            // Case 59
//	|       "offsets"                           // Case 60
//	|       "origin"                            // Case 61
//	|       "output"                            // Case 62
//	|       "palette"                           // Case 63
//	|       "parametric"                        // Case 64
//	|       "paxis"                             // Case 65
//	|       "pm3d"                              // Case 66
//	|       "pointintervalbox"                  // Case 67
//	|       "pointsize"                         // Case 68
//	|       "polar"                             // Case 69
//	|       "print"                             // Case 70
//	|       "psdir"                             // Case 71
//	|       "raxis"                             // Case 72
//	|       "rmargin"                           // Case 73
//	|       "rrange"                            // Case 74
//	|       "rtics"                             // Case 75
//	|       "sam"                               // Case 76
//	|       "sample"                            // Case 77
//	|       "samples"                           // Case 78
//	|       "size"                              // Case 79
//	|       "style" "arrow"                     // Case 80
//	|       "style" "boxplot"                   // Case 81
//	|       "style" "circle"                    // Case 82
//	|       "style" "ellipse"                   // Case 83
//	|       "style" "fill"                      // Case 84
//	|       "style" "histogram"                 // Case 85
//	|       "style" "line"                      // Case 86
//	|       "style" "rectangle"                 // Case 87
//	|       "style" "textbox"                   // Case 88
//	|       "surface"                           // Case 89
//	|       "table"                             // Case 90
//	|       "terminal"                          // Case 91
//	|       "termoption"                        // Case 92
//	|       "tics"                              // Case 93
//	|       "ticslevel"                         // Case 94
//	|       "time"                              // Case 95
//	|       "timefmt"                           // Case 96
//	|       "timestamp"                         // Case 97
//	|       "title"                             // Case 98
//	|       "tmargin"                           // Case 99
//	|       "trange"                            // Case 100
//	|       "urange"                            // Case 101
//	|       "var"                               // Case 102
//	|       "variable" IDENTIFIER               // Case 103
//	|       "variables"                         // Case 104
//	|       "variables" "all"                   // Case 105
//	|       "variables" IDENTIFIER              // Case 106
//	|       "vi"                                // Case 107
//	|       "view"                              // Case 108
//	|       "vrange"                            // Case 109
//	|       "x2data"                            // Case 110
//	|       "x2label"                           // Case 111
//	|       "x2mtics"                           // Case 112
//	|       "x2range"                           // Case 113
//	|       "x2tics"                            // Case 114
//	|       "x2zeroaxis"                        // Case 115
//	|       "xdata"                             // Case 116
//	|       "x2dtics"                           // Case 117
//	|       "xdtics"                            // Case 118
//	|       "xlabel"                            // Case 119
//	|       "xmtics"                            // Case 120
//	|       "xrange"                            // Case 121
//	|       "xtics"                             // Case 122
//	|       "xyplane"                           // Case 123
//	|       "xzeroaxis"                         // Case 124
//	|       "y2data"                            // Case 125
//	|       "y2mtics"                           // Case 126
//	|       "y2range"                           // Case 127
//	|       "y2tics"                            // Case 128
//	|       "y2zeroaxis"                        // Case 129
//	|       "ydata"                             // Case 130
//	|       "y2dtics"                           // Case 131
//	|       "ydtics"                            // Case 132
//	|       "ylabel"                            // Case 133
//	|       "ymtics"                            // Case 134
//	|       "yrange"                            // Case 135
//	|       "ytics"                             // Case 136
//	|       "yzeroaxis"                         // Case 137
//	|       "zdata"                             // Case 138
//	|       "zdtics"                            // Case 139
//	|       "zero"                              // Case 140
//	|       "zeroaxis"                          // Case 141
//	|       "zlabel"                            // Case 142
//	|       "zmtics"                            // Case 143
//	|       "zrange"                            // Case 144
//	|       "ztics"                             // Case 145
//	|       "zzeroaxis"                         // Case 146
type ShowSpec struct {
	Case                    int
	ExpressionOpt           *ExpressionOpt
	ShowDatafileSpecListOpt *ShowDatafileSpecListOpt
	Token                   xc.Token
	Token2                  xc.Token
}

func (n *ShowSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *ShowSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *ShowSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// SimpleExpression represents data reduced by productions:
//
//	SimpleExpression:
//	        SimpleExpression "!=" SimpleExpression
//	|       SimpleExpression "&&" SimpleExpression                      // Case 1
//	|       SimpleExpression "**" SimpleExpression                      // Case 2
//	|       SimpleExpression "<<" SimpleExpression                      // Case 3
//	|       SimpleExpression "<=" SimpleExpression                      // Case 4
//	|       SimpleExpression "==" SimpleExpression                      // Case 5
//	|       SimpleExpression ">=" SimpleExpression                      // Case 6
//	|       SimpleExpression ">>" SimpleExpression                      // Case 7
//	|       SimpleExpression "eq" SimpleExpression                      // Case 8
//	|       SimpleExpression "ne" SimpleExpression                      // Case 9
//	|       SimpleExpression "||" SimpleExpression                      // Case 10
//	|       SimpleExpression '%' SimpleExpression                       // Case 11
//	|       SimpleExpression '&' SimpleExpression                       // Case 12
//	|       SimpleExpression '*' SimpleExpression                       // Case 13
//	|       SimpleExpression '+' SimpleExpression                       // Case 14
//	|       SimpleExpression '-' SimpleExpression                       // Case 15
//	|       SimpleExpression '.' SimpleExpression                       // Case 16
//	|       SimpleExpression '/' SimpleExpression                       // Case 17
//	|       SimpleExpression '<' SimpleExpression                       // Case 18
//	|       SimpleExpression '=' SimpleExpression                       // Case 19
//	|       SimpleExpression '>' SimpleExpression                       // Case 20
//	|       SimpleExpression '?' SimpleExpression ':' SimpleExpression  // Case 21
//	|       SimpleExpression '^' SimpleExpression                       // Case 22
//	|       SimpleExpression '|' SimpleExpression                       // Case 23
//	|       UnarySimpleExpression                                       // Case 24
type SimpleExpression struct {
	Case                  int
	SimpleExpression      *SimpleExpression
	SimpleExpression2     *SimpleExpression
	SimpleExpression3     *SimpleExpression
	Token                 xc.Token
	Token2                xc.Token
	UnarySimpleExpression *UnarySimpleExpression
}

func (n *SimpleExpression) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SimpleExpression) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SimpleExpression) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23:
		return n.SimpleExpression.Pos()
	case 24:
		return n.UnarySimpleExpression.Pos()
	default:
		panic("internal error")
	}
}

// SimpleExpressionCommaList represents data reduced by productions:
//
//	SimpleExpressionCommaList:
//	        SimpleExpression
//	|       SimpleExpressionCommaList ',' SimpleExpression  // Case 1
type SimpleExpressionCommaList struct {
	Case                      int
	SimpleExpression          *SimpleExpression
	SimpleExpressionCommaList *SimpleExpressionCommaList
	Token                     xc.Token
}

func (n *SimpleExpressionCommaList) reverse() *SimpleExpressionCommaList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SimpleExpressionCommaList
	for nb != nil {
		nc := nb.SimpleExpressionCommaList
		nb.SimpleExpressionCommaList = na
		na = nb
		nb = nc
	}
	n.SimpleExpressionCommaList = nil
	return na
}

func (n *SimpleExpressionCommaList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SimpleExpressionCommaList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SimpleExpressionCommaList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.SimpleExpression.Pos()
	case 1:
		return n.SimpleExpressionCommaList.Pos()
	default:
		panic("internal error")
	}
}

// SimpleExpressionList represents data reduced by productions:
//
//	SimpleExpressionList:
//	        SimpleExpression
//	|       SimpleExpressionList SimpleExpression  // Case 1
type SimpleExpressionList struct {
	Case                 int
	SimpleExpression     *SimpleExpression
	SimpleExpressionList *SimpleExpressionList
}

func (n *SimpleExpressionList) reverse() *SimpleExpressionList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.SimpleExpressionList
	for nb != nil {
		nc := nb.SimpleExpressionList
		nb.SimpleExpressionList = na
		na = nb
		nb = nc
	}
	n.SimpleExpressionList = nil
	return na
}

func (n *SimpleExpressionList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *SimpleExpressionList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SimpleExpressionList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.SimpleExpression.Pos()
	case 1:
		return n.SimpleExpressionList.Pos()
	default:
		panic("internal error")
	}
}

// SliceArgument represents data reduced by productions:
//
//	SliceArgument:
//	        /* empty */
//	|       '*'          // Case 1
//	|       Expression   // Case 2
type SliceArgument struct {
	Case       int
	Expression *Expression
	Token      xc.Token
}

func (n *SliceArgument) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *SliceArgument) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *SliceArgument) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 2:
		return n.Expression.Pos()
	case 1:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// Smoothing represents data reduced by productions:
//
//	Smoothing:
//	        "acsplines"
//	|       "bandwidth"   // Case 1
//	|       "bezier"      // Case 2
//	|       "cnormal"     // Case 3
//	|       "csplines"    // Case 4
//	|       "cumulative"  // Case 5
//	|       "frequency"   // Case 6
//	|       "kdensity"    // Case 7
//	|       "mcsplines"   // Case 8
//	|       "sbezier"     // Case 9
//	|       "unique"      // Case 10
//	|       "unwrap"      // Case 11
type Smoothing struct {
	Case  int
	Token xc.Token
}

func (n *Smoothing) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Smoothing) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Smoothing) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Splot represents data reduced by production:
//
//	Splot:
//	        "splot" PlotElementList
type Splot struct {
	PlotElementList *PlotElementList
	Token           xc.Token
}

func (n *Splot) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Splot) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Splot) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Statement represents data reduced by productions:
//
//	Statement:
//	        /* empty */
//	|       Bind                // Case 1
//	|       Clear               // Case 2
//	|       Eval                // Case 3
//	|       Fit                 // Case 4
//	|       Import              // Case 5
//	|       Lower               // Case 6
//	|       Call                // Case 7
//	|       Cd                  // Case 8
//	|       Do                  // Case 9
//	|       Else                // Case 10
//	|       Exit                // Case 11
//	|       FunctionDefinition  // Case 12
//	|       If                  // Case 13
//	|       Load                // Case 14
//	|       NamedDataBlock      // Case 15
//	|       Pause               // Case 16
//	|       Plot                // Case 17
//	|       Print               // Case 18
//	|       Replot              // Case 19
//	|       Reread              // Case 20
//	|       Reset               // Case 21
//	|       Set                 // Case 22
//	|       Show                // Case 23
//	|       Splot               // Case 24
//	|       Stats               // Case 25
//	|       Test                // Case 26
//	|       Undefine            // Case 27
//	|       Unset               // Case 28
//	|       Update              // Case 29
//	|       VariableDefinition  // Case 30
//	|       While               // Case 31
//	|       error               // Case 32
type Statement struct {
	Bind               *Bind
	Call               *Call
	Case               int
	Cd                 *Cd
	Clear              *Clear
	Do                 *Do
	Else               *Else
	Eval               *Eval
	Exit               *Exit
	Fit                *Fit
	FunctionDefinition *FunctionDefinition
	If                 *If
	Import             *Import
	Load               *Load
	Lower              *Lower
	NamedDataBlock     *NamedDataBlock
	Pause              *Pause
	Plot               *Plot
	Print              *Print
	Replot             *Replot
	Reread             *Reread
	Reset              *Reset
	Set                *Set
	Show               *Show
	Splot              *Splot
	Stats              *Stats
	Test               *Test
	Token              xc.Token
	Undefine           *Undefine
	Unset              *Unset
	Update             *Update
	VariableDefinition *VariableDefinition
	While              *While
}

func (n *Statement) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Statement) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Statement) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1:
		return n.Bind.Pos()
	case 7:
		return n.Call.Pos()
	case 8:
		return n.Cd.Pos()
	case 2:
		return n.Clear.Pos()
	case 9:
		return n.Do.Pos()
	case 10:
		return n.Else.Pos()
	case 3:
		return n.Eval.Pos()
	case 11:
		return n.Exit.Pos()
	case 4:
		return n.Fit.Pos()
	case 12:
		return n.FunctionDefinition.Pos()
	case 13:
		return n.If.Pos()
	case 5:
		return n.Import.Pos()
	case 14:
		return n.Load.Pos()
	case 6:
		return n.Lower.Pos()
	case 15:
		return n.NamedDataBlock.Pos()
	case 16:
		return n.Pause.Pos()
	case 17:
		return n.Plot.Pos()
	case 18:
		return n.Print.Pos()
	case 19:
		return n.Replot.Pos()
	case 20:
		return n.Reread.Pos()
	case 21:
		return n.Reset.Pos()
	case 22:
		return n.Set.Pos()
	case 23:
		return n.Show.Pos()
	case 24:
		return n.Splot.Pos()
	case 25:
		return n.Stats.Pos()
	case 26:
		return n.Test.Pos()
	case 32:
		return n.Token.Pos()
	case 27:
		return n.Undefine.Pos()
	case 28:
		return n.Unset.Pos()
	case 29:
		return n.Update.Pos()
	case 30:
		return n.VariableDefinition.Pos()
	case 31:
		return n.While.Pos()
	default:
		panic("internal error")
	}
}

// StatementList represents data reduced by productions:
//
//	StatementList:
//	        Statement
//	|       StatementList StatementSeparator Statement  // Case 1
type StatementList struct {
	Case               int
	Statement          *Statement
	StatementList      *StatementList
	StatementSeparator *StatementSeparator
}

func (n *StatementList) reverse() *StatementList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.StatementList
	for nb != nil {
		nc := nb.StatementList
		nb.StatementList = na
		na = nb
		nb = nc
	}
	n.StatementList = nil
	return na
}

func (n *StatementList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *StatementList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *StatementList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.Statement.Pos()
	case 1:
		if p := n.StatementList.Pos(); p != 0 {
			return p
		}

		return n.StatementSeparator.Pos()
	default:
		panic("internal error")
	}
}

// StatementSeparator represents data reduced by productions:
//
//	StatementSeparator:
//	        ';'
//	|       '\n'  // Case 1
type StatementSeparator struct {
	Case  int
	Token xc.Token
}

func (n *StatementSeparator) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *StatementSeparator) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *StatementSeparator) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Stats represents data reduced by production:
//
//	Stats:
//	        "stats" RangesOpt Expression StatsSpecListOpt
type Stats struct {
	Expression       *Expression
	RangesOpt        *RangesOpt
	StatsSpecListOpt *StatsSpecListOpt
	Token            xc.Token
}

func (n *Stats) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Stats) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Stats) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// StatsSpecList represents data reduced by productions:
//
//	StatsSpecList:
//	        StatsSpecListItem
//	|       StatsSpecList StatsSpecListItem  // Case 1
type StatsSpecList struct {
	Case              int
	StatsSpecList     *StatsSpecList
	StatsSpecListItem *StatsSpecListItem
}

func (n *StatsSpecList) reverse() *StatsSpecList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.StatsSpecList
	for nb != nil {
		nc := nb.StatsSpecList
		nb.StatsSpecList = na
		na = nb
		nb = nc
	}
	n.StatsSpecList = nil
	return na
}

func (n *StatsSpecList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *StatsSpecList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *StatsSpecList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.StatsSpecList.Pos()
	case 0:
		return n.StatsSpecListItem.Pos()
	default:
		panic("internal error")
	}
}

// StatsSpecListItem represents data reduced by productions:
//
//	StatsSpecListItem:
//	        "matrix"
//	|       "using" Expression                 // Case 1
//	|       "using" Expression ':' Expression  // Case 2
//	|       "name" Expression                  // Case 3
//	|       "output"                           // Case 4
//	|       "nooutput"                         // Case 5
//	|       "index" Expression                 // Case 6
//	|       "prefix" Expression                // Case 7
type StatsSpecListItem struct {
	Case        int
	Expression  *Expression
	Expression2 *Expression
	Token       xc.Token
	Token2      xc.Token
}

func (n *StatsSpecListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *StatsSpecListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *StatsSpecListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// StatsSpecListOpt represents data reduced by productions:
//
//	StatsSpecListOpt:
//	        /* empty */
//	|       StatsSpecList  // Case 1
type StatsSpecListOpt struct {
	StatsSpecList *StatsSpecList
}

func (n *StatsSpecListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *StatsSpecListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *StatsSpecListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.StatsSpecList.Pos()
}

// Test represents data reduced by productions:
//
//	Test:
//	        "test" "palette"
//	|       "test" "terminal"  // Case 1
type Test struct {
	Case   int
	Token  xc.Token
	Token2 xc.Token
}

func (n *Test) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Test) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Test) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// TicsLabelList represents data reduced by productions:
//
//	TicsLabelList:
//	        TicsLabelListItem
//	|       TicsLabelList ',' TicsLabelListItem  // Case 1
type TicsLabelList struct {
	Case              int
	TicsLabelList     *TicsLabelList
	TicsLabelListItem *TicsLabelListItem
	Token             xc.Token
}

func (n *TicsLabelList) reverse() *TicsLabelList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.TicsLabelList
	for nb != nil {
		nc := nb.TicsLabelList
		nb.TicsLabelList = na
		na = nb
		nb = nc
	}
	n.TicsLabelList = nil
	return na
}

func (n *TicsLabelList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *TicsLabelList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *TicsLabelList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.TicsLabelList.Pos()
	case 0:
		return n.TicsLabelListItem.Pos()
	default:
		panic("internal error")
	}
}

// TicsLabelListItem represents data reduced by productions:
//
//	TicsLabelListItem:
//	        NonStringExpression
//	|       NonStringExpression SimpleExpression                   // Case 1
//	|       NonStringExpression SimpleExpression SimpleExpression  // Case 2
//	|       STRING_LIT NonStringExpression                         // Case 3
//	|       STRING_LIT NonStringExpression SimpleExpression        // Case 4
type TicsLabelListItem struct {
	Case                int
	NonStringExpression *NonStringExpression
	SimpleExpression    *SimpleExpression
	SimpleExpression2   *SimpleExpression
	Token               xc.Token
}

func (n *TicsLabelListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *TicsLabelListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *TicsLabelListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0, 1, 2:
		return n.NonStringExpression.Pos()
	case 3, 4:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// UnaryExpression represents data reduced by productions:
//
//	UnaryExpression:
//	        PrimaryExpression
//	|       '!' UnaryExpression  // Case 1
//	|       '+' UnaryExpression  // Case 2
//	|       '-' UnaryExpression  // Case 3
//	|       '~' UnaryExpression  // Case 4
//	|       UnaryExpression '!'  // Case 5
type UnaryExpression struct {
	Case              int
	PrimaryExpression *PrimaryExpression
	Token             xc.Token
	UnaryExpression   *UnaryExpression
}

func (n *UnaryExpression) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *UnaryExpression) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *UnaryExpression) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.PrimaryExpression.Pos()
	case 1, 2, 3, 4:
		return n.Token.Pos()
	case 5:
		return n.UnaryExpression.Pos()
	default:
		panic("internal error")
	}
}

// UnaryNonParenthesizedExpression represents data reduced by productions:
//
//	UnaryNonParenthesizedExpression:
//	        PrimaryNonParenthesizedExpression
//	|       '!' UnaryNonParenthesizedExpression  // Case 1
//	|       '+' UnaryNonParenthesizedExpression  // Case 2
//	|       '-' UnaryNonParenthesizedExpression  // Case 3
//	|       '~' UnaryNonParenthesizedExpression  // Case 4
//	|       UnaryNonParenthesizedExpression '!'  // Case 5
type UnaryNonParenthesizedExpression struct {
	Case                              int
	PrimaryNonParenthesizedExpression *PrimaryNonParenthesizedExpression
	Token                             xc.Token
	UnaryNonParenthesizedExpression   *UnaryNonParenthesizedExpression
}

func (n *UnaryNonParenthesizedExpression) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *UnaryNonParenthesizedExpression) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *UnaryNonParenthesizedExpression) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.PrimaryNonParenthesizedExpression.Pos()
	case 1, 2, 3, 4:
		return n.Token.Pos()
	case 5:
		return n.UnaryNonParenthesizedExpression.Pos()
	default:
		panic("internal error")
	}
}

// UnaryNonStringExpression represents data reduced by productions:
//
//	UnaryNonStringExpression:
//	        PrimaryNonStringExpression
//	|       '!' UnaryNonStringExpression  // Case 1
//	|       '+' UnaryNonStringExpression  // Case 2
//	|       '-' UnaryNonStringExpression  // Case 3
//	|       '~' UnaryNonStringExpression  // Case 4
type UnaryNonStringExpression struct {
	Case                       int
	PrimaryNonStringExpression *PrimaryNonStringExpression
	Token                      xc.Token
	UnaryNonStringExpression   *UnaryNonStringExpression
}

func (n *UnaryNonStringExpression) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *UnaryNonStringExpression) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *UnaryNonStringExpression) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.PrimaryNonStringExpression.Pos()
	case 1, 2, 3, 4:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// UnarySimpleExpression represents data reduced by productions:
//
//	UnarySimpleExpression:
//	        PrimaryExpression
//	|       '!' UnarySimpleExpression  // Case 1
//	|       '~' UnarySimpleExpression  // Case 2
//	|       UnarySimpleExpression '!'  // Case 3
type UnarySimpleExpression struct {
	Case                  int
	PrimaryExpression     *PrimaryExpression
	Token                 xc.Token
	UnarySimpleExpression *UnarySimpleExpression
}

func (n *UnarySimpleExpression) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *UnarySimpleExpression) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *UnarySimpleExpression) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.PrimaryExpression.Pos()
	case 1, 2:
		return n.Token.Pos()
	case 3:
		return n.UnarySimpleExpression.Pos()
	default:
		panic("internal error")
	}
}

// Undefine represents data reduced by production:
//
//	Undefine:
//	        "undefine" UndefineList
type Undefine struct {
	Token        xc.Token
	UndefineList *UndefineList
}

func (n *Undefine) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Undefine) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Undefine) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// UndefineList represents data reduced by productions:
//
//	UndefineList:
//	        UndefineListItem
//	|       UndefineList UndefineListItem  // Case 1
type UndefineList struct {
	Case             int
	UndefineList     *UndefineList
	UndefineListItem *UndefineListItem
}

func (n *UndefineList) reverse() *UndefineList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.UndefineList
	for nb != nil {
		nc := nb.UndefineList
		nb.UndefineList = na
		na = nb
		nb = nc
	}
	n.UndefineList = nil
	return na
}

func (n *UndefineList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *UndefineList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *UndefineList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 1:
		return n.UndefineList.Pos()
	case 0:
		return n.UndefineListItem.Pos()
	default:
		panic("internal error")
	}
}

// UndefineListItem represents data reduced by productions:
//
//	UndefineListItem:
//	        IDENTIFIER
//	|       IDENTIFIER '*'  // Case 1
type UndefineListItem struct {
	Case   int
	Token  xc.Token
	Token2 xc.Token
}

func (n *UndefineListItem) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *UndefineListItem) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *UndefineListItem) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Unit represents data reduced by productions:
//
//	Unit:
//	        "cm"
//	|       "mm"    // Case 1
//	|       "in"    // Case 2
//	|       "inch"  // Case 3
//	|       "pt"    // Case 4
//	|       "pc"    // Case 5
//	|       "bp"    // Case 6
//	|       "dd"    // Case 7
//	|       "cc"    // Case 8
type Unit struct {
	Case  int
	Token xc.Token
}

func (n *Unit) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Unit) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Unit) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// UnitsOpt represents data reduced by productions:
//
//	UnitsOpt:
//	        /* empty */
//	|       "units" "xx"  // Case 1
//	|       "units" "xy"  // Case 2
//	|       "units" "yy"  // Case 3
type UnitsOpt struct {
	Case   int
	Token  xc.Token
	Token2 xc.Token
}

func (n *UnitsOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *UnitsOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *UnitsOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return 0
	case 1, 2, 3:
		return n.Token.Pos()
	default:
		panic("internal error")
	}
}

// Unset represents data reduced by production:
//
//	Unset:
//	        "unset" IterationSpecifierOpt UnsetSpec
type Unset struct {
	IterationSpecifierOpt *IterationSpecifierOpt
	Token                 xc.Token
	UnsetSpec             *UnsetSpec
}

func (n *Unset) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Unset) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Unset) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// UnsetLogscaleList represents data reduced by productions:
//
//	UnsetLogscaleList:
//	        SetLogscaleAxesListItem
//	|       UnsetLogscaleList SetLogscaleAxesListItem  // Case 1
type UnsetLogscaleList struct {
	Case                    int
	SetLogscaleAxesListItem *SetLogscaleAxesListItem
	UnsetLogscaleList       *UnsetLogscaleList
}

func (n *UnsetLogscaleList) reverse() *UnsetLogscaleList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.UnsetLogscaleList
	for nb != nil {
		nc := nb.UnsetLogscaleList
		nb.UnsetLogscaleList = na
		na = nb
		nb = nc
	}
	n.UnsetLogscaleList = nil
	return na
}

func (n *UnsetLogscaleList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *UnsetLogscaleList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *UnsetLogscaleList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.SetLogscaleAxesListItem.Pos()
	case 1:
		return n.UnsetLogscaleList.Pos()
	default:
		panic("internal error")
	}
}

// UnsetLogscaleListOpt represents data reduced by productions:
//
//	UnsetLogscaleListOpt:
//	        /* empty */
//	|       UnsetLogscaleList  // Case 1
type UnsetLogscaleListOpt struct {
	UnsetLogscaleList *UnsetLogscaleList
}

func (n *UnsetLogscaleListOpt) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *UnsetLogscaleListOpt) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *UnsetLogscaleListOpt) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.UnsetLogscaleList.Pos()
}

// UnsetSpec represents data reduced by productions:
//
//	UnsetSpec:
//	        "angles"
//	|       "arrow" ExpressionOpt            // Case 1
//	|       "auto"                           // Case 2
//	|       "autoscale"                      // Case 3
//	|       "bars"                           // Case 4
//	|       "bind"                           // Case 5
//	|       "bmargin"                        // Case 6
//	|       "border"                         // Case 7
//	|       "boxwidth"                       // Case 8
//	|       "cbdata"                         // Case 9
//	|       "cbdtics"                        // Case 10
//	|       "cblabel"                        // Case 11
//	|       "cbmtics"                        // Case 12
//	|       "cbrange"                        // Case 13
//	|       "cbtics"                         // Case 14
//	|       "clabel"                         // Case 15
//	|       "clip"                           // Case 16
//	|       "cntrlabel"                      // Case 17
//	|       "cntrp"                          // Case 18
//	|       "cntrparam"                      // Case 19
//	|       "color"                          // Case 20
//	|       "colorbox"                       // Case 21
//	|       "colornames"                     // Case 22
//	|       "colorsequence"                  // Case 23
//	|       "contour"                        // Case 24
//	|       "dashtype"                       // Case 25
//	|       "datafile"                       // Case 26
//	|       "decimalsign"                    // Case 27
//	|       "dgrid3d"                        // Case 28
//	|       "dummy"                          // Case 29
//	|       "encoding"                       // Case 30
//	|       "fit"                            // Case 31
//	|       "fontpath"                       // Case 32
//	|       "format"                         // Case 33
//	|       "grid"                           // Case 34
//	|       "hidden3d"                       // Case 35
//	|       "history"                        // Case 36
//	|       "iso"                            // Case 37
//	|       "isosamples"                     // Case 38
//	|       "key"                            // Case 39
//	|       "label"                          // Case 40
//	|       "label" Expression               // Case 41
//	|       "linetype"                       // Case 42
//	|       "link"                           // Case 43
//	|       "lmargin"                        // Case 44
//	|       "loadpath"                       // Case 45
//	|       "locale"                         // Case 46
//	|       "log" UnsetLogscaleListOpt       // Case 47
//	|       "logscale" UnsetLogscaleListOpt  // Case 48
//	|       "mapping"                        // Case 49
//	|       "margins"                        // Case 50
//	|       "monochrome"                     // Case 51
//	|       "mouse"                          // Case 52
//	|       "mcbtics"                        // Case 53
//	|       "multiplot"                      // Case 54
//	|       "mx2tics"                        // Case 55
//	|       "mxtics"                         // Case 56
//	|       "my2tics"                        // Case 57
//	|       "mytics"                         // Case 58
//	|       "mztics"                         // Case 59
//	|       "object"                         // Case 60
//	|       "offsets"                        // Case 61
//	|       "origin"                         // Case 62
//	|       "output"                         // Case 63
//	|       "palette"                        // Case 64
//	|       "parametric"                     // Case 65
//	|       "paxis"                          // Case 66
//	|       "pm3d"                           // Case 67
//	|       "pointintervalbox"               // Case 68
//	|       "pointsize"                      // Case 69
//	|       "polar"                          // Case 70
//	|       "print"                          // Case 71
//	|       "psdir"                          // Case 72
//	|       "raxis"                          // Case 73
//	|       "rmargin"                        // Case 74
//	|       "rrange"                         // Case 75
//	|       "rtics"                          // Case 76
//	|       "sam"                            // Case 77
//	|       "sample"                         // Case 78
//	|       "samples"                        // Case 79
//	|       "size"                           // Case 80
//	|       "style"                          // Case 81
//	|       "surface"                        // Case 82
//	|       "table"                          // Case 83
//	|       "terminal"                       // Case 84
//	|       "termoption"                     // Case 85
//	|       "tics"                           // Case 86
//	|       "ticslevel"                      // Case 87
//	|       "time"                           // Case 88
//	|       "timefmt"                        // Case 89
//	|       "timestamp"                      // Case 90
//	|       "title"                          // Case 91
//	|       "tmargin"                        // Case 92
//	|       "trange"                         // Case 93
//	|       "urange"                         // Case 94
//	|       "vi"                             // Case 95
//	|       "view"                           // Case 96
//	|       "vrange"                         // Case 97
//	|       "x2data"                         // Case 98
//	|       "x2label"                        // Case 99
//	|       "x2mtics"                        // Case 100
//	|       "x2range"                        // Case 101
//	|       "x2tics"                         // Case 102
//	|       "x2zeroaxis"                     // Case 103
//	|       "xdata"                          // Case 104
//	|       "x2dtics"                        // Case 105
//	|       "xdtics"                         // Case 106
//	|       "xlabel"                         // Case 107
//	|       "xmtics"                         // Case 108
//	|       "xrange"                         // Case 109
//	|       "xtics"                          // Case 110
//	|       "xyplane"                        // Case 111
//	|       "xzeroaxis"                      // Case 112
//	|       "y2data"                         // Case 113
//	|       "y2mtics"                        // Case 114
//	|       "y2range"                        // Case 115
//	|       "y2tics"                         // Case 116
//	|       "y2zeroaxis"                     // Case 117
//	|       "ydata"                          // Case 118
//	|       "y2dtics"                        // Case 119
//	|       "ydtics"                         // Case 120
//	|       "ylabel"                         // Case 121
//	|       "ymtics"                         // Case 122
//	|       "yrange"                         // Case 123
//	|       "ytics"                          // Case 124
//	|       "yzeroaxis"                      // Case 125
//	|       "zdata"                          // Case 126
//	|       "zdtics"                         // Case 127
//	|       "zero"                           // Case 128
//	|       "zeroaxis"                       // Case 129
//	|       "zlabel"                         // Case 130
//	|       "zmtics"                         // Case 131
//	|       "zrange"                         // Case 132
//	|       "ztics"                          // Case 133
//	|       "zzeroaxis"                      // Case 134
type UnsetSpec struct {
	Case                 int
	Expression           *Expression
	ExpressionOpt        *ExpressionOpt
	Token                xc.Token
	UnsetLogscaleListOpt *UnsetLogscaleListOpt
}

func (n *UnsetSpec) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *UnsetSpec) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *UnsetSpec) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// Update represents data reduced by productions:
//
//	Update:
//	        "update" Expression
//	|       "update" Expression SimpleExpression  // Case 1
type Update struct {
	Case             int
	Expression       *Expression
	SimpleExpression *SimpleExpression
	Token            xc.Token
}

func (n *Update) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *Update) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *Update) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// UsingList represents data reduced by productions:
//
//	UsingList:
//	        Expression
//	|       UsingList ':' Expression  // Case 1
type UsingList struct {
	Case       int
	Expression *Expression
	Token      xc.Token
	UsingList  *UsingList
}

func (n *UsingList) reverse() *UsingList {
	if n == nil {
		return nil
	}

	na := n
	nb := na.UsingList
	for nb != nil {
		nc := nb.UsingList
		nb.UsingList = na
		na = nb
		nb = nc
	}
	n.UsingList = nil
	return na
}

func (n *UsingList) fragment() interface{} { return n.reverse() }

// String implements fmt.Stringer.
func (n *UsingList) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *UsingList) Pos() token.Pos {
	if n == nil {
		return 0
	}

	switch n.Case {
	case 0:
		return n.Expression.Pos()
	case 1:
		return n.UsingList.Pos()
	default:
		panic("internal error")
	}
}

// VariableDefinition represents data reduced by production:
//
//	VariableDefinition:
//	        IDENTIFIER '=' Expression
type VariableDefinition struct {
	Expression *Expression
	Token      xc.Token
	Token2     xc.Token
}

func (n *VariableDefinition) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *VariableDefinition) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *VariableDefinition) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}

// While represents data reduced by production:
//
//	While:
//	        "while" '(' Expression ')' '{' StatementList '}'
type While struct {
	Expression    *Expression
	StatementList *StatementList
	Token         xc.Token
	Token2        xc.Token
	Token3        xc.Token
	Token4        xc.Token
	Token5        xc.Token
}

func (n *While) fragment() interface{} { return n }

// String implements fmt.Stringer.
func (n *While) String() string {
	return PrettyString(n)
}

// Pos reports the position of the first component of n or zero if it's empty.
func (n *While) Pos() token.Pos {
	if n == nil {
		return 0
	}

	return n.Token.Pos()
}
