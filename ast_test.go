// CAUTION: Generated by yy - DO NOT EDIT.

// Copyright 2016 The Plot Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package plot

import (
	"fmt"
)

func ExampleAST() {
	fmt.Println(exampleAST(1, ""))
	// Output:
	// &plot.AST{
	// }
}

func ExampleAngleUnit() {
	fmt.Println(exampleAST(2, "plot ident_a binary rotation = ident_b deg"))
	// Output:
	// &plot.AngleUnit{
	// · Token: example2.go:1:40: IDENTIFIER "deg",
	// }
}

func ExampleAngleUnit_case1() {
	fmt.Println(exampleAST(3, "plot ident_a binary rotation = ident_b d"))
	// Output:
	// &plot.AngleUnit{
	// · Case: 1,
	// · Token: example3.go:1:40: IDENTIFIER "d",
	// }
}

func ExampleAngleUnit_case2() {
	fmt.Println(exampleAST(4, "plot ident_a binary rotation = ident_b pi"))
	// Output:
	// &plot.AngleUnit{
	// · Case: 2,
	// · Token: example4.go:1:40: IDENTIFIER "pi",
	// }
}

func ExampleArrowStyleList() {
	fmt.Println(exampleAST(5, "plot ident_a w vectors empty"))
	// Output:
	// &plot.ArrowStyleList{
	// · ArrowStyleListItem: &plot.ArrowStyleListItem{
	// · · Case: 6,
	// · · Token: example5.go:1:24: IDENTIFIER "empty",
	// · },
	// }
}

func ExampleArrowStyleList_case1() {
	fmt.Println(exampleAST(6, "plot ident_a w vectors empty empty"))
	// Output:
	// &plot.ArrowStyleList{
	// · ArrowStyleList: &plot.ArrowStyleList{
	// · · ArrowStyleListItem: &plot.ArrowStyleListItem{
	// · · · Case: 6,
	// · · · Token: example6.go:1:30: IDENTIFIER "empty",
	// · · },
	// · · Case: 1,
	// · },
	// · ArrowStyleListItem: &plot.ArrowStyleListItem{
	// · · Case: 6,
	// · · Token: example6.go:1:24: IDENTIFIER "empty",
	// · },
	// }
}

func ExampleArrowStyleListItem() {
	fmt.Println(exampleAST(7, "plot ident_a w vectors head"))
	// Output:
	// &plot.ArrowStyleListItem{
	// · Token: example7.go:1:24: IDENTIFIER "head",
	// }
}

func ExampleArrowStyleListItem_case01() {
	fmt.Println(exampleAST(8, "plot ident_a w vectors nohead"))
	// Output:
	// &plot.ArrowStyleListItem{
	// · Case: 1,
	// · Token: example8.go:1:24: IDENTIFIER "nohead",
	// }
}

func ExampleArrowStyleListItem_case02() {
	fmt.Println(exampleAST(9, "plot ident_a w vectors heads"))
	// Output:
	// &plot.ArrowStyleListItem{
	// · Case: 2,
	// · Token: example9.go:1:24: IDENTIFIER "heads",
	// }
}

func ExampleArrowStyleListItem_case03() {
	fmt.Println(exampleAST(10, "plot ident_a w vectors size ident_b"))
	// Output:
	// &plot.ArrowStyleListItem{
	// · Case: 3,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example10.go:1:29: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example10.go:1:24: IDENTIFIER "size",
	// }
}

func ExampleArrowStyleListItem_case04() {
	fmt.Println(exampleAST(11, "plot ident_a w vectors size ident_b fixed"))
	// Output:
	// &plot.ArrowStyleListItem{
	// · Case: 4,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example11.go:1:29: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example11.go:1:24: IDENTIFIER "size",
	// · Token2: example11.go:1:37: IDENTIFIER "fixed",
	// }
}

func ExampleArrowStyleListItem_case05() {
	fmt.Println(exampleAST(12, "plot ident_a w vectors filled"))
	// Output:
	// &plot.ArrowStyleListItem{
	// · Case: 5,
	// · Token: example12.go:1:24: IDENTIFIER "filled",
	// }
}

func ExampleArrowStyleListItem_case06() {
	fmt.Println(exampleAST(13, "plot ident_a w vectors empty"))
	// Output:
	// &plot.ArrowStyleListItem{
	// · Case: 6,
	// · Token: example13.go:1:24: IDENTIFIER "empty",
	// }
}

func ExampleArrowStyleListItem_case07() {
	fmt.Println(exampleAST(14, "plot ident_a w vectors nofilled"))
	// Output:
	// &plot.ArrowStyleListItem{
	// · Case: 7,
	// · Token: example14.go:1:24: IDENTIFIER "nofilled",
	// }
}

func ExampleArrowStyleListItem_case08() {
	fmt.Println(exampleAST(15, "plot ident_a w vectors noborder"))
	// Output:
	// &plot.ArrowStyleListItem{
	// · Case: 8,
	// · Token: example15.go:1:24: IDENTIFIER "noborder",
	// }
}

func ExampleArrowStyleListItem_case09() {
	fmt.Println(exampleAST(16, "plot ident_a w vectors front"))
	// Output:
	// &plot.ArrowStyleListItem{
	// · Case: 9,
	// · Token: example16.go:1:24: IDENTIFIER "front",
	// }
}

func ExampleArrowStyleListItem_case10() {
	fmt.Println(exampleAST(17, "plot ident_a w vectors nocontours"))
	// Output:
	// &plot.ArrowStyleListItem{
	// · Case: 10,
	// · LineStyleListItem: &plot.LineStyleListItem{
	// · · Case: 15,
	// · · Token: example17.go:1:24: IDENTIFIER "nocontours",
	// · },
	// }
}

func ExampleBinaryList() {
	fmt.Println(exampleAST(18, "plot ident_a binary flipx"))
	// Output:
	// &plot.BinaryList{
	// · BinaryListItem: &plot.BinaryListItem{
	// · · Case: 14,
	// · · Token: example18.go:1:21: IDENTIFIER "flipx",
	// · },
	// }
}

func ExampleBinaryList_case1() {
	fmt.Println(exampleAST(19, "plot ident_a binary flipx flipx"))
	// Output:
	// &plot.BinaryList{
	// · BinaryList: &plot.BinaryList{
	// · · BinaryListItem: &plot.BinaryListItem{
	// · · · Case: 14,
	// · · · Token: example19.go:1:27: IDENTIFIER "flipx",
	// · · },
	// · · Case: 1,
	// · },
	// · BinaryListItem: &plot.BinaryListItem{
	// · · Case: 14,
	// · · Token: example19.go:1:21: IDENTIFIER "flipx",
	// · },
	// }
}

func ExampleBinaryListItem() {
	fmt.Println(exampleAST(20, "plot ident_a binary array = ( ident_b )"))
	// Output:
	// &plot.BinaryListItem{
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example20.go:1:31: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example20.go:1:21: IDENTIFIER "array",
	// · Token2: example20.go:1:27: '=' "=",
	// · Token3: example20.go:1:29: '(' "(",
	// · Token4: example20.go:1:39: ')' ")",
	// }
}

func ExampleBinaryListItem_case01() {
	fmt.Println(exampleAST(21, "plot ident_a binary array = ident_b"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 1,
	// · ColonExpressionList: &plot.ColonExpressionList{
	// · · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · · Case: 24,
	// · · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · · Token: example21.go:1:29: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example21.go:1:21: IDENTIFIER "array",
	// · Token2: example21.go:1:27: '=' "=",
	// }
}

func ExampleBinaryListItem_case02() {
	fmt.Println(exampleAST(22, "plot ident_a binary center = ( ident_b )"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 2,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example22.go:1:32: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example22.go:1:21: IDENTIFIER "center",
	// · Token2: example22.go:1:28: '=' "=",
	// · Token3: example22.go:1:30: '(' "(",
	// · Token4: example22.go:1:40: ')' ")",
	// }
}

func ExampleBinaryListItem_case03() {
	fmt.Println(exampleAST(23, "plot ident_a binary dx = ident_b"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example23.go:1:26: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example23.go:1:21: IDENTIFIER "dx",
	// · Token2: example23.go:1:24: '=' "=",
	// }
}

func ExampleBinaryListItem_case04() {
	fmt.Println(exampleAST(24, "plot ident_a binary dy = ident_b"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example24.go:1:26: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example24.go:1:21: IDENTIFIER "dy",
	// · Token2: example24.go:1:24: '=' "=",
	// }
}

func ExampleBinaryListItem_case05() {
	fmt.Println(exampleAST(25, "plot ident_a binary dz = ident_b"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 5,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example25.go:1:26: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example25.go:1:21: IDENTIFIER "dz",
	// · Token2: example25.go:1:24: '=' "=",
	// }
}

func ExampleBinaryListItem_case06() {
	fmt.Println(exampleAST(26, "plot ident_a binary endian = big"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 6,
	// · Endianess: &plot.Endianess{
	// · · Token: example26.go:1:30: IDENTIFIER "big",
	// · },
	// · Token: example26.go:1:21: IDENTIFIER "endian",
	// · Token2: example26.go:1:28: '=' "=",
	// }
}

func ExampleBinaryListItem_case07() {
	fmt.Println(exampleAST(27, "plot ident_a binary filetype = auto"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 7,
	// · Token: example27.go:1:21: IDENTIFIER "filetype",
	// · Token2: example27.go:1:30: '=' "=",
	// · Token3: example27.go:1:32: IDENTIFIER "auto",
	// }
}

func ExampleBinaryListItem_case08() {
	fmt.Println(exampleAST(28, "plot ident_a binary filetype = avs"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 8,
	// · Token: example28.go:1:21: IDENTIFIER "filetype",
	// · Token2: example28.go:1:30: '=' "=",
	// · Token3: example28.go:1:32: IDENTIFIER "avs",
	// }
}

func ExampleBinaryListItem_case09() {
	fmt.Println(exampleAST(29, "plot ident_a binary filetype = edf"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 9,
	// · Token: example29.go:1:21: IDENTIFIER "filetype",
	// · Token2: example29.go:1:30: '=' "=",
	// · Token3: example29.go:1:32: IDENTIFIER "edf",
	// }
}

func ExampleBinaryListItem_case10() {
	fmt.Println(exampleAST(30, "plot ident_a binary filetype = png"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 10,
	// · Token: example30.go:1:21: IDENTIFIER "filetype",
	// · Token2: example30.go:1:30: '=' "=",
	// · Token3: example30.go:1:32: IDENTIFIER "png",
	// }
}

func ExampleBinaryListItem_case11() {
	fmt.Println(exampleAST(31, "plot ident_a binary flip = x"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 11,
	// · Token: example31.go:1:21: IDENTIFIER "flip",
	// · Token2: example31.go:1:26: '=' "=",
	// · Token3: example31.go:1:28: IDENTIFIER "x",
	// }
}

func ExampleBinaryListItem_case12() {
	fmt.Println(exampleAST(32, "plot ident_a binary flip = y"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 12,
	// · Token: example32.go:1:21: IDENTIFIER "flip",
	// · Token2: example32.go:1:26: '=' "=",
	// · Token3: example32.go:1:28: IDENTIFIER "y",
	// }
}

func ExampleBinaryListItem_case13() {
	fmt.Println(exampleAST(33, "plot ident_a binary flip = z"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 13,
	// · Token: example33.go:1:21: IDENTIFIER "flip",
	// · Token2: example33.go:1:26: '=' "=",
	// · Token3: example33.go:1:28: IDENTIFIER "z",
	// }
}

func ExampleBinaryListItem_case14() {
	fmt.Println(exampleAST(34, "plot ident_a binary flipx"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 14,
	// · Token: example34.go:1:21: IDENTIFIER "flipx",
	// }
}

func ExampleBinaryListItem_case15() {
	fmt.Println(exampleAST(35, "plot ident_a binary flipy"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 15,
	// · Token: example35.go:1:21: IDENTIFIER "flipy",
	// }
}

func ExampleBinaryListItem_case16() {
	fmt.Println(exampleAST(36, "plot ident_a binary flipz"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 16,
	// · Token: example36.go:1:21: IDENTIFIER "flipz",
	// }
}

func ExampleBinaryListItem_case17() {
	fmt.Println(exampleAST(37, "plot ident_a binary format = ident_b"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 17,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example37.go:1:30: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example37.go:1:21: IDENTIFIER "format",
	// · Token2: example37.go:1:28: '=' "=",
	// }
}

func ExampleBinaryListItem_case18() {
	fmt.Println(exampleAST(38, "plot ident_a binary general"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 18,
	// · Token: example38.go:1:21: IDENTIFIER "general",
	// }
}

func ExampleBinaryListItem_case19() {
	fmt.Println(exampleAST(39, "plot ident_a binary origin = ( ident_b )"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 19,
	// · OriginList: &plot.OriginList{
	// · · ExpressionList: &plot.ExpressionList{
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example39.go:1:32: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example39.go:1:30: '(' "(",
	// · · Token2: example39.go:1:40: ')' ")",
	// · },
	// · Token: example39.go:1:21: IDENTIFIER "origin",
	// · Token2: example39.go:1:28: '=' "=",
	// }
}

func ExampleBinaryListItem_case20() {
	fmt.Println(exampleAST(40, "plot ident_a binary perpendicular = ( ident_b )"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 20,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example40.go:1:39: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example40.go:1:21: IDENTIFIER "perpendicular",
	// · Token2: example40.go:1:35: '=' "=",
	// · Token3: example40.go:1:37: '(' "(",
	// · Token4: example40.go:1:47: ')' ")",
	// }
}

func ExampleBinaryListItem_case21() {
	fmt.Println(exampleAST(41, "plot ident_a binary record = ( ident_b )"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 21,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example41.go:1:32: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example41.go:1:21: IDENTIFIER "record",
	// · Token2: example41.go:1:28: '=' "=",
	// · Token3: example41.go:1:30: '(' "(",
	// · Token4: example41.go:1:40: ')' ")",
	// }
}

func ExampleBinaryListItem_case22() {
	fmt.Println(exampleAST(42, "plot ident_a binary record = ident_b"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 22,
	// · ColonExpressionList: &plot.ColonExpressionList{
	// · · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · · Case: 24,
	// · · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · · Token: example42.go:1:30: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example42.go:1:21: IDENTIFIER "record",
	// · Token2: example42.go:1:28: '=' "=",
	// }
}

func ExampleBinaryListItem_case23() {
	fmt.Println(exampleAST(43, "plot ident_a binary rot = ident_b"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 23,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example43.go:1:27: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example43.go:1:21: IDENTIFIER "rot",
	// · Token2: example43.go:1:25: '=' "=",
	// }
}

func ExampleBinaryListItem_case24() {
	fmt.Println(exampleAST(44, "plot ident_a binary rot = ident_b d"))
	// Output:
	// &plot.BinaryListItem{
	// · AngleUnit: &plot.AngleUnit{
	// · · Case: 1,
	// · · Token: example44.go:1:35: IDENTIFIER "d",
	// · },
	// · Case: 24,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example44.go:1:27: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example44.go:1:21: IDENTIFIER "rot",
	// · Token2: example44.go:1:25: '=' "=",
	// }
}

func ExampleBinaryListItem_case25() {
	fmt.Println(exampleAST(45, "plot ident_a binary rotate = ident_b"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 25,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example45.go:1:30: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example45.go:1:21: IDENTIFIER "rotate",
	// · Token2: example45.go:1:28: '=' "=",
	// }
}

func ExampleBinaryListItem_case26() {
	fmt.Println(exampleAST(46, "plot ident_a binary rotate = ident_b d"))
	// Output:
	// &plot.BinaryListItem{
	// · AngleUnit: &plot.AngleUnit{
	// · · Case: 1,
	// · · Token: example46.go:1:38: IDENTIFIER "d",
	// · },
	// · Case: 26,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example46.go:1:30: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example46.go:1:21: IDENTIFIER "rotate",
	// · Token2: example46.go:1:28: '=' "=",
	// }
}

func ExampleBinaryListItem_case27() {
	fmt.Println(exampleAST(47, "plot ident_a binary rotation = ident_b"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 27,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example47.go:1:32: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example47.go:1:21: IDENTIFIER "rotation",
	// · Token2: example47.go:1:30: '=' "=",
	// }
}

func ExampleBinaryListItem_case28() {
	fmt.Println(exampleAST(48, "plot ident_a binary rotation = ident_b d"))
	// Output:
	// &plot.BinaryListItem{
	// · AngleUnit: &plot.AngleUnit{
	// · · Case: 1,
	// · · Token: example48.go:1:40: IDENTIFIER "d",
	// · },
	// · Case: 28,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example48.go:1:32: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example48.go:1:21: IDENTIFIER "rotation",
	// · Token2: example48.go:1:30: '=' "=",
	// }
}

func ExampleBinaryListItem_case29() {
	fmt.Println(exampleAST(49, "plot ident_a binary scan = xy"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 29,
	// · Token: example49.go:1:21: IDENTIFIER "scan",
	// · Token2: example49.go:1:26: '=' "=",
	// · Token3: example49.go:1:28: IDENTIFIER "xy",
	// }
}

func ExampleBinaryListItem_case30() {
	fmt.Println(exampleAST(50, "plot ident_a binary scan = xyz"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 30,
	// · Token: example50.go:1:21: IDENTIFIER "scan",
	// · Token2: example50.go:1:26: '=' "=",
	// · Token3: example50.go:1:28: IDENTIFIER "xyz",
	// }
}

func ExampleBinaryListItem_case31() {
	fmt.Println(exampleAST(51, "plot ident_a binary scan = xzy"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 31,
	// · Token: example51.go:1:21: IDENTIFIER "scan",
	// · Token2: example51.go:1:26: '=' "=",
	// · Token3: example51.go:1:28: IDENTIFIER "xzy",
	// }
}

func ExampleBinaryListItem_case32() {
	fmt.Println(exampleAST(52, "plot ident_a binary scan = yx"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 32,
	// · Token: example52.go:1:21: IDENTIFIER "scan",
	// · Token2: example52.go:1:26: '=' "=",
	// · Token3: example52.go:1:28: IDENTIFIER "yx",
	// }
}

func ExampleBinaryListItem_case33() {
	fmt.Println(exampleAST(53, "plot ident_a binary scan = yxz"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 33,
	// · Token: example53.go:1:21: IDENTIFIER "scan",
	// · Token2: example53.go:1:26: '=' "=",
	// · Token3: example53.go:1:28: IDENTIFIER "yxz",
	// }
}

func ExampleBinaryListItem_case34() {
	fmt.Println(exampleAST(54, "plot ident_a binary scan = yzx"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 34,
	// · Token: example54.go:1:21: IDENTIFIER "scan",
	// · Token2: example54.go:1:26: '=' "=",
	// · Token3: example54.go:1:28: IDENTIFIER "yzx",
	// }
}

func ExampleBinaryListItem_case35() {
	fmt.Println(exampleAST(55, "plot ident_a binary scan = zxy"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 35,
	// · Token: example55.go:1:21: IDENTIFIER "scan",
	// · Token2: example55.go:1:26: '=' "=",
	// · Token3: example55.go:1:28: IDENTIFIER "zxy",
	// }
}

func ExampleBinaryListItem_case36() {
	fmt.Println(exampleAST(56, "plot ident_a binary scan = zyx"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 36,
	// · Token: example56.go:1:21: IDENTIFIER "scan",
	// · Token2: example56.go:1:26: '=' "=",
	// · Token3: example56.go:1:28: IDENTIFIER "zyx",
	// }
}

func ExampleBinaryListItem_case37() {
	fmt.Println(exampleAST(57, "plot ident_a binary transpose"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 37,
	// · Token: example57.go:1:21: IDENTIFIER "transpose",
	// }
}

func ExampleBinaryListItem_case38() {
	fmt.Println(exampleAST(58, "plot ident_a binary skip = ident_b"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 38,
	// · ColonExpressionList: &plot.ColonExpressionList{
	// · · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · · Case: 24,
	// · · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · · Token: example58.go:1:28: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example58.go:1:21: SKIPEQ "skip",
	// · Token2: example58.go:1:26: '=' "=",
	// }
}

func ExampleBinaryListItem_case39() {
	fmt.Println(exampleAST(59, "plot ident_a binary dt = ident_b"))
	// Output:
	// &plot.BinaryListItem{
	// · Case: 39,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example59.go:1:26: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example59.go:1:21: DTEQ "dt",
	// · Token2: example59.go:1:24: '=' "=",
	// }
}

func ExampleBinaryListOpt() {
	fmt.Println(exampleAST(60, "plot ident_a binary") == (*BinaryListOpt)(nil))
	// Output:
	// true
}

func ExampleBinaryListOpt_case1() {
	fmt.Println(exampleAST(61, "plot ident_a binary flipx"))
	// Output:
	// &plot.BinaryListOpt{
	// · BinaryList: &plot.BinaryList{
	// · · BinaryListItem: &plot.BinaryListItem{
	// · · · Case: 14,
	// · · · Token: example61.go:1:21: IDENTIFIER "flipx",
	// · · },
	// · },
	// }
}

func ExampleBind() {
	fmt.Println(exampleAST(62, "bind ident_a ident_b"))
	// Output:
	// &plot.Bind{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example62.go:1:6: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example62.go:1:14: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example62.go:1:1: IDENTIFIER "bind",
	// }
}

func ExampleBind_case1() {
	fmt.Println(exampleAST(63, "bind a ident_a ident_b"))
	// Output:
	// &plot.Bind{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example63.go:1:8: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example63.go:1:16: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example63.go:1:1: IDENTIFIER "bind",
	// · Token2: example63.go:1:6: IDENTIFIER "a",
	// }
}

func ExampleBind_case2() {
	fmt.Println(exampleAST(64, "bind all ident_a ident_b"))
	// Output:
	// &plot.Bind{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example64.go:1:10: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example64.go:1:18: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example64.go:1:1: IDENTIFIER "bind",
	// · Token2: example64.go:1:6: IDENTIFIER "all",
	// }
}

func ExampleBind_case3() {
	fmt.Println(exampleAST(65, "bind allwindows ident_a ident_b"))
	// Output:
	// &plot.Bind{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example65.go:1:17: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example65.go:1:25: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example65.go:1:1: IDENTIFIER "bind",
	// · Token2: example65.go:1:6: IDENTIFIER "allwindows",
	// }
}

func ExampleCall() {
	fmt.Println(exampleAST(66, "call ident_a"))
	// Output:
	// &plot.Call{
	// · SimpleExpressionList: &plot.SimpleExpressionList{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example66.go:1:6: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example66.go:1:1: IDENTIFIER "call",
	// }
}

func ExampleCd() {
	fmt.Println(exampleAST(67, "cd ident_a"))
	// Output:
	// &plot.Cd{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example67.go:1:4: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example67.go:1:1: IDENTIFIER "cd",
	// }
}

func ExampleClear() {
	fmt.Println(exampleAST(68, "clear"))
	// Output:
	// &plot.Clear{
	// · Token: example68.go:1:1: IDENTIFIER "clear",
	// }
}

func ExampleColonExpressionList() {
	fmt.Println(exampleAST(69, "plot ident_a in ident_b"))
	// Output:
	// &plot.ColonExpressionList{
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example69.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleColonExpressionList_case1() {
	fmt.Println(exampleAST(70, "plot ident_a index ident_b : ident_c"))
	// Output:
	// &plot.ColonExpressionList{
	// · ColonExpressionList: &plot.ColonExpressionList{
	// · · Case: 1,
	// · · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · · Case: 24,
	// · · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · · Token: example70.go:1:30: IDENTIFIER "ident_c",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example70.go:1:28: ':' ":",
	// · },
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example70.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleColonExpressionOptList() {
	fmt.Println(exampleAST(71, "plot ident_a every") == (*ColonExpressionOptList)(nil))
	// Output:
	// true
}

func ExampleColonExpressionOptList_case1() {
	fmt.Println(exampleAST(72, "plot ident_a every ident_b"))
	// Output:
	// &plot.ColonExpressionOptList{
	// · Case: 1,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example72.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleColonExpressionOptList_case2() {
	fmt.Println(exampleAST(73, "plot ident_a every :"))
	// Output:
	// &plot.ColonExpressionOptList{
	// · Case: 2,
	// · Token: example73.go:1:20: ':' ":",
	// }
}

func ExampleColonExpressionOptList_case3() {
	fmt.Println(exampleAST(74, "plot ident_a every : ident_b"))
	// Output:
	// &plot.ColonExpressionOptList{
	// · Case: 3,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example74.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example74.go:1:20: ':' ":",
	// }
}

func ExampleColorSpec() {
	fmt.Println(exampleAST(75, "plot ident_a lc bgnd"))
	// Output:
	// &plot.ColorSpec{
	// · Token: example75.go:1:17: IDENTIFIER "bgnd",
	// }
}

func ExampleColorSpec_case01() {
	fmt.Println(exampleAST(76, "plot ident_a lt black"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 1,
	// · Token: example76.go:1:17: IDENTIFIER "black",
	// }
}

func ExampleColorSpec_case02() {
	fmt.Println(exampleAST(77, "plot ident_a lt pal"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 2,
	// · Token: example77.go:1:17: IDENTIFIER "pal",
	// }
}

func ExampleColorSpec_case03() {
	fmt.Println(exampleAST(78, "plot ident_a lt pal cbrange ident_b"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example78.go:1:29: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example78.go:1:17: IDENTIFIER "pal",
	// · Token2: example78.go:1:21: IDENTIFIER "cbrange",
	// }
}

func ExampleColorSpec_case04() {
	fmt.Println(exampleAST(79, "plot ident_a lt pal frac ident_b"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example79.go:1:26: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example79.go:1:17: IDENTIFIER "pal",
	// · Token2: example79.go:1:21: IDENTIFIER "frac",
	// }
}

func ExampleColorSpec_case05() {
	fmt.Println(exampleAST(80, "plot ident_a lt pal z"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 5,
	// · Token: example80.go:1:17: IDENTIFIER "pal",
	// · Token2: example80.go:1:21: IDENTIFIER "z",
	// }
}

func ExampleColorSpec_case06() {
	fmt.Println(exampleAST(81, "plot ident_a linecolor palette"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 6,
	// · Token: example81.go:1:24: IDENTIFIER "palette",
	// }
}

func ExampleColorSpec_case07() {
	fmt.Println(exampleAST(82, "plot ident_a linecolor palette cbrange ident_b"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example82.go:1:40: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example82.go:1:24: IDENTIFIER "palette",
	// · Token2: example82.go:1:32: IDENTIFIER "cbrange",
	// }
}

func ExampleColorSpec_case08() {
	fmt.Println(exampleAST(83, "plot ident_a linecolor palette frac ident_b"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 8,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example83.go:1:37: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example83.go:1:24: IDENTIFIER "palette",
	// · Token2: example83.go:1:32: IDENTIFIER "frac",
	// }
}

func ExampleColorSpec_case09() {
	fmt.Println(exampleAST(84, "plot ident_a linecolor palette z"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 9,
	// · Token: example84.go:1:24: IDENTIFIER "palette",
	// · Token2: example84.go:1:32: IDENTIFIER "z",
	// }
}

func ExampleColorSpec_case10() {
	fmt.Println(exampleAST(85, "plot ident_a lt rgb var"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 10,
	// · Token: example85.go:1:17: IDENTIFIER "rgb",
	// · Token2: example85.go:1:21: IDENTIFIER "var",
	// }
}

func ExampleColorSpec_case11() {
	fmt.Println(exampleAST(86, "plot ident_a lt rgb variable"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 11,
	// · Token: example86.go:1:17: IDENTIFIER "rgb",
	// · Token2: example86.go:1:21: IDENTIFIER "variable",
	// }
}

func ExampleColorSpec_case12() {
	fmt.Println(exampleAST(87, "plot ident_a lt rgb ident_b"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 12,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example87.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example87.go:1:17: IDENTIFIER "rgb",
	// }
}

func ExampleColorSpec_case13() {
	fmt.Println(exampleAST(88, "plot ident_a linecolor rgbcolor var"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 13,
	// · Token: example88.go:1:24: IDENTIFIER "rgbcolor",
	// · Token2: example88.go:1:33: IDENTIFIER "var",
	// }
}

func ExampleColorSpec_case14() {
	fmt.Println(exampleAST(89, "plot ident_a linecolor rgbcolor variable"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 14,
	// · Token: example89.go:1:24: IDENTIFIER "rgbcolor",
	// · Token2: example89.go:1:33: IDENTIFIER "variable",
	// }
}

func ExampleColorSpec_case15() {
	fmt.Println(exampleAST(90, "plot ident_a linecolor rgbcolor ident_b"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example90.go:1:33: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example90.go:1:24: IDENTIFIER "rgbcolor",
	// }
}

func ExampleColorSpec_case16() {
	fmt.Println(exampleAST(91, "plot ident_a lt variable"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 16,
	// · Token: example91.go:1:17: IDENTIFIER "variable",
	// }
}

func ExampleColorSpec_case17() {
	fmt.Println(exampleAST(92, "plot ident_a linecolor ident_b"))
	// Output:
	// &plot.ColorSpec{
	// · Case: 17,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example92.go:1:24: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleComplexNumber() {
	fmt.Println(exampleAST(93, "load { ident_a , ident_b }"))
	// Output:
	// &plot.ComplexNumber{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example93.go:1:8: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example93.go:1:18: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example93.go:1:6: '{' "{",
	// · Token2: example93.go:1:16: ',' ",",
	// · Token3: example93.go:1:26: '}' "}",
	// }
}

func ExampleCoordinateSystemOpt() {
	fmt.Println(exampleAST(94, "plot ident_a w vectors size !") == (*CoordinateSystemOpt)(nil))
	// Output:
	// true
}

func ExampleCoordinateSystemOpt_case1() {
	fmt.Println(exampleAST(95, "set arrow from first !"))
	// Output:
	// &plot.CoordinateSystemOpt{
	// · Case: 1,
	// · Token: example95.go:1:16: IDENTIFIER "first",
	// }
}

func ExampleCoordinateSystemOpt_case2() {
	fmt.Println(exampleAST(96, "set multiplot scale second !"))
	// Output:
	// &plot.CoordinateSystemOpt{
	// · Case: 2,
	// · Token: example96.go:1:21: IDENTIFIER "second",
	// }
}

func ExampleCoordinateSystemOpt_case3() {
	fmt.Println(exampleAST(97, "set pm3d at graph !"))
	// Output:
	// &plot.CoordinateSystemOpt{
	// · Case: 3,
	// · Token: example97.go:1:13: IDENTIFIER "graph",
	// }
}

func ExampleCoordinateSystemOpt_case4() {
	fmt.Println(exampleAST(98, "set pm3d at screen !"))
	// Output:
	// &plot.CoordinateSystemOpt{
	// · Case: 4,
	// · Token: example98.go:1:13: IDENTIFIER "screen",
	// }
}

func ExampleCoordinateSystemOpt_case5() {
	fmt.Println(exampleAST(99, "set pm3d at char !"))
	// Output:
	// &plot.CoordinateSystemOpt{
	// · Case: 5,
	// · Token: example99.go:1:13: IDENTIFIER "char",
	// }
}

func ExampleCoordinateSystemOpt_case6() {
	fmt.Println(exampleAST(100, "set key at character !"))
	// Output:
	// &plot.CoordinateSystemOpt{
	// · Case: 6,
	// · Token: example100.go:1:12: IDENTIFIER "character",
	// }
}

func ExampleDashTypeSpec() {
	fmt.Println(exampleAST(101, "set dashtype solid"))
	// Output:
	// &plot.DashTypeSpec{
	// · Token: example101.go:1:14: IDENTIFIER "solid",
	// }
}

func ExampleDashTypeSpec_case1() {
	fmt.Println(exampleAST(102, "set dashtype ident_a"))
	// Output:
	// &plot.DashTypeSpec{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example102.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleDatafileModifiersList() {
	fmt.Println(exampleAST(103, "fit ident_a ident_b binary"))
	// Output:
	// &plot.DatafileModifiersList{
	// · DatafileModifiersListItem: &plot.DatafileModifiersListItem{
	// · · Token: example103.go:1:21: IDENTIFIER "binary",
	// · },
	// }
}

func ExampleDatafileModifiersList_case1() {
	fmt.Println(exampleAST(104, "fit ident_a ident_b binary binary"))
	// Output:
	// &plot.DatafileModifiersList{
	// · DatafileModifiersList: &plot.DatafileModifiersList{
	// · · Case: 1,
	// · · DatafileModifiersListItem: &plot.DatafileModifiersListItem{
	// · · · Token: example104.go:1:28: IDENTIFIER "binary",
	// · · },
	// · },
	// · DatafileModifiersListItem: &plot.DatafileModifiersListItem{
	// · · Token: example104.go:1:21: IDENTIFIER "binary",
	// · },
	// }
}

func ExampleDatafileModifiersListItem() {
	fmt.Println(exampleAST(105, "plot ident_a binary"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Token: example105.go:1:14: IDENTIFIER "binary",
	// }
}

func ExampleDatafileModifiersListItem_case01() {
	fmt.Println(exampleAST(106, "plot ident_a matrix"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 1,
	// · Token: example106.go:1:14: IDENTIFIER "matrix",
	// }
}

func ExampleDatafileModifiersListItem_case02() {
	fmt.Println(exampleAST(107, "plot ident_a nonuniform matrix"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 2,
	// · Token: example107.go:1:14: IDENTIFIER "nonuniform",
	// · Token2: example107.go:1:25: IDENTIFIER "matrix",
	// }
}

func ExampleDatafileModifiersListItem_case03() {
	fmt.Println(exampleAST(108, "plot ident_a in ident_b"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 3,
	// · ColonExpressionList: &plot.ColonExpressionList{
	// · · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · · Case: 24,
	// · · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · · Token: example108.go:1:17: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example108.go:1:14: IDENTIFIER "in",
	// }
}

func ExampleDatafileModifiersListItem_case04() {
	fmt.Println(exampleAST(109, "plot ident_a index ident_b"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 4,
	// · ColonExpressionList: &plot.ColonExpressionList{
	// · · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · · Case: 24,
	// · · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · · Token: example109.go:1:20: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example109.go:1:14: IDENTIFIER "index",
	// }
}

func ExampleDatafileModifiersListItem_case05() {
	fmt.Println(exampleAST(110, "plot ident_a every"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 5,
	// · Token: example110.go:1:14: IDENTIFIER "every",
	// }
}

func ExampleDatafileModifiersListItem_case06() {
	fmt.Println(exampleAST(111, "plot ident_a skip ident_b"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example111.go:1:19: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example111.go:1:14: IDENTIFIER "skip",
	// }
}

func ExampleDatafileModifiersListItem_case07() {
	fmt.Println(exampleAST(112, "plot ident_a u ident_b"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 7,
	// · Token: example112.go:1:14: IDENTIFIER "u",
	// · UsingList: &plot.UsingList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example112.go:1:16: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleDatafileModifiersListItem_case08() {
	fmt.Println(exampleAST(113, "plot ident_a u ident_b ident_c"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 8,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example113.go:1:24: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example113.go:1:14: IDENTIFIER "u",
	// · UsingList: &plot.UsingList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example113.go:1:16: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleDatafileModifiersListItem_case09() {
	fmt.Println(exampleAST(114, "plot ident_a using ident_b"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 9,
	// · Token: example114.go:1:14: IDENTIFIER "using",
	// · UsingList: &plot.UsingList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example114.go:1:20: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleDatafileModifiersListItem_case10() {
	fmt.Println(exampleAST(115, "plot ident_a using ident_b ident_c"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 10,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example115.go:1:28: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example115.go:1:14: IDENTIFIER "using",
	// · UsingList: &plot.UsingList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example115.go:1:20: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleDatafileModifiersListItem_case11() {
	fmt.Println(exampleAST(116, "plot ident_a sm acsplines"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 11,
	// · Smoothing: &plot.Smoothing{
	// · · Token: example116.go:1:17: IDENTIFIER "acsplines",
	// · },
	// · Token: example116.go:1:14: IDENTIFIER "sm",
	// }
}

func ExampleDatafileModifiersListItem_case12() {
	fmt.Println(exampleAST(117, "plot ident_a smooth acsplines"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 12,
	// · Smoothing: &plot.Smoothing{
	// · · Token: example117.go:1:21: IDENTIFIER "acsplines",
	// · },
	// · Token: example117.go:1:14: IDENTIFIER "smooth",
	// }
}

func ExampleDatafileModifiersListItem_case13() {
	fmt.Println(exampleAST(118, "plot ident_a volatile"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 13,
	// · Token: example118.go:1:14: IDENTIFIER "volatile",
	// }
}

func ExampleDatafileModifiersListItem_case14() {
	fmt.Println(exampleAST(119, "plot ident_a noautoscale"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 14,
	// · Token: example119.go:1:14: IDENTIFIER "noautoscale",
	// }
}

func ExampleDatafileModifiersListItem_case15() {
	fmt.Println(exampleAST(120, "plot ident_a columnheaders"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 15,
	// · Token: example120.go:1:14: IDENTIFIER "columnheaders",
	// }
}

func ExampleDatafileModifiersListItem_case16() {
	fmt.Println(exampleAST(121, "plot ident_a rowheaders"))
	// Output:
	// &plot.DatafileModifiersListItem{
	// · Case: 16,
	// · Token: example121.go:1:14: IDENTIFIER "rowheaders",
	// }
}

func ExampleDatafileModifiersListOpt() {
	fmt.Println(exampleAST(122, "set pal file ident_a") == (*DatafileModifiersListOpt)(nil))
	// Output:
	// true
}

func ExampleDatafileModifiersListOpt_case1() {
	fmt.Println(exampleAST(123, "fit ident_a ident_b binary"))
	// Output:
	// &plot.DatafileModifiersListOpt{
	// · DatafileModifiersList: &plot.DatafileModifiersList{
	// · · DatafileModifiersListItem: &plot.DatafileModifiersListItem{
	// · · · Token: example123.go:1:21: IDENTIFIER "binary",
	// · · },
	// · },
	// }
}

func ExampleDo() {
	fmt.Println(exampleAST(125, "do for [ ident_a : * ] { }"))
	// Output:
	// &plot.Do{
	// · IterationSpecifier: &plot.IterationSpecifier{
	// · · Case: 2,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example125.go:1:10: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example125.go:1:4: IDENTIFIER "for",
	// · · Token2: example125.go:1:8: '[' "[",
	// · · Token3: example125.go:1:18: ':' ":",
	// · · Token4: example125.go:1:20: '*' "*",
	// · · Token5: example125.go:1:22: ']' "]",
	// · },
	// · Token: example125.go:1:1: IDENTIFIER "do",
	// · Token2: example125.go:1:24: '{' "{",
	// · Token3: example125.go:1:26: '}' "}",
	// }
}

func ExampleElse() {
	fmt.Println(exampleAST(126, "else"))
	// Output:
	// &plot.Else{
	// · Token: example126.go:1:1: IDENTIFIER "else",
	// }
}

func ExampleEndConditionList() {
	fmt.Println(exampleAST(127, "pause mouse any"))
	// Output:
	// &plot.EndConditionList{
	// · EndConditionListItem: &plot.EndConditionListItem{
	// · · Token: example127.go:1:13: IDENTIFIER "any",
	// · },
	// }
}

func ExampleEndConditionList_case1() {
	fmt.Println(exampleAST(128, "pause mouse any , any"))
	// Output:
	// &plot.EndConditionList{
	// · EndConditionList: &plot.EndConditionList{
	// · · Case: 1,
	// · · EndConditionListItem: &plot.EndConditionListItem{
	// · · · Token: example128.go:1:19: IDENTIFIER "any",
	// · · },
	// · · Token: example128.go:1:17: ',' ",",
	// · },
	// · EndConditionListItem: &plot.EndConditionListItem{
	// · · Token: example128.go:1:13: IDENTIFIER "any",
	// · },
	// }
}

func ExampleEndConditionListItem() {
	fmt.Println(exampleAST(129, "pause mouse any"))
	// Output:
	// &plot.EndConditionListItem{
	// · Token: example129.go:1:13: IDENTIFIER "any",
	// }
}

func ExampleEndConditionListItem_case1() {
	fmt.Println(exampleAST(130, "pause mouse button1"))
	// Output:
	// &plot.EndConditionListItem{
	// · Case: 1,
	// · Token: example130.go:1:13: IDENTIFIER "button1",
	// }
}

func ExampleEndConditionListItem_case2() {
	fmt.Println(exampleAST(131, "pause mouse button2"))
	// Output:
	// &plot.EndConditionListItem{
	// · Case: 2,
	// · Token: example131.go:1:13: IDENTIFIER "button2",
	// }
}

func ExampleEndConditionListItem_case3() {
	fmt.Println(exampleAST(132, "pause mouse button3"))
	// Output:
	// &plot.EndConditionListItem{
	// · Case: 3,
	// · Token: example132.go:1:13: IDENTIFIER "button3",
	// }
}

func ExampleEndConditionListItem_case4() {
	fmt.Println(exampleAST(133, "pause mouse close"))
	// Output:
	// &plot.EndConditionListItem{
	// · Case: 4,
	// · Token: example133.go:1:13: IDENTIFIER "close",
	// }
}

func ExampleEndConditionListItem_case5() {
	fmt.Println(exampleAST(134, "pause mouse keypress"))
	// Output:
	// &plot.EndConditionListItem{
	// · Case: 5,
	// · Token: example134.go:1:13: IDENTIFIER "keypress",
	// }
}

func ExampleEndConditionListItem_case6() {
	fmt.Println(exampleAST(135, "pause mouse key"))
	// Output:
	// &plot.EndConditionListItem{
	// · Case: 6,
	// · Token: example135.go:1:13: IDENTIFIER "key",
	// }
}

func ExampleEndianess() {
	fmt.Println(exampleAST(136, "plot ident_a binary endian = big"))
	// Output:
	// &plot.Endianess{
	// · Token: example136.go:1:30: IDENTIFIER "big",
	// }
}

func ExampleEndianess_case1() {
	fmt.Println(exampleAST(137, "plot ident_a binary endian = default"))
	// Output:
	// &plot.Endianess{
	// · Case: 1,
	// · Token: example137.go:1:30: IDENTIFIER "default",
	// }
}

func ExampleEndianess_case2() {
	fmt.Println(exampleAST(138, "plot ident_a binary endian = little"))
	// Output:
	// &plot.Endianess{
	// · Case: 2,
	// · Token: example138.go:1:30: IDENTIFIER "little",
	// }
}

func ExampleEndianess_case3() {
	fmt.Println(exampleAST(139, "plot ident_a binary endian = middle"))
	// Output:
	// &plot.Endianess{
	// · Case: 3,
	// · Token: example139.go:1:30: IDENTIFIER "middle",
	// }
}

func ExampleEndianess_case4() {
	fmt.Println(exampleAST(140, "plot ident_a binary endian = swap"))
	// Output:
	// &plot.Endianess{
	// · Case: 4,
	// · Token: example140.go:1:30: IDENTIFIER "swap",
	// }
}

func ExampleEval() {
	fmt.Println(exampleAST(141, "eval ident_a"))
	// Output:
	// &plot.Eval{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example141.go:1:6: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example141.go:1:1: IDENTIFIER "eval",
	// }
}

func ExampleExit() {
	fmt.Println(exampleAST(142, "exit"))
	// Output:
	// &plot.Exit{
	// · Token: example142.go:1:1: IDENTIFIER "exit",
	// }
}

func ExampleExit_case1() {
	fmt.Println(exampleAST(143, "exit error ident_a"))
	// Output:
	// &plot.Exit{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example143.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example143.go:1:1: IDENTIFIER "exit",
	// · Token2: example143.go:1:6: IDENTIFIER "error",
	// }
}

func ExampleExit_case2() {
	fmt.Println(exampleAST(144, "exit gnuplot"))
	// Output:
	// &plot.Exit{
	// · Case: 2,
	// · Token: example144.go:1:1: IDENTIFIER "exit",
	// · Token2: example144.go:1:6: IDENTIFIER "gnuplot",
	// }
}

func ExampleExpression() {
	fmt.Println(exampleAST(145, "pause ident_a != ident_b"))
	// Output:
	// &plot.Expression{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example145.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example145.go:1:18: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example145.go:1:15: NOTEQ "!=",
	// }
}

func ExampleExpression_case01() {
	fmt.Println(exampleAST(146, "pause ident_a && ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example146.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example146.go:1:18: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example146.go:1:15: ANDAND "&&",
	// }
}

func ExampleExpression_case02() {
	fmt.Println(exampleAST(147, "pause ident_a ** ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example147.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example147.go:1:18: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example147.go:1:15: EXP "**",
	// }
}

func ExampleExpression_case03() {
	fmt.Println(exampleAST(148, "eval ident_a << ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example148.go:1:6: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example148.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example148.go:1:14: LSH "<<",
	// }
}

func ExampleExpression_case04() {
	fmt.Println(exampleAST(149, "pause ident_a <= ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example149.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example149.go:1:18: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example149.go:1:15: LEQ "<=",
	// }
}

func ExampleExpression_case05() {
	fmt.Println(exampleAST(150, "pause ident_a == ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 5,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example150.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example150.go:1:18: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example150.go:1:15: EQEQ "==",
	// }
}

func ExampleExpression_case06() {
	fmt.Println(exampleAST(151, "pause ident_a >= ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example151.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example151.go:1:18: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example151.go:1:15: GEQ ">=",
	// }
}

func ExampleExpression_case07() {
	fmt.Println(exampleAST(152, "pause ident_a >> ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example152.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example152.go:1:18: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example152.go:1:15: RSH ">>",
	// }
}

func ExampleExpression_case08() {
	fmt.Println(exampleAST(153, "pause ident_a eq ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 8,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example153.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example153.go:1:18: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example153.go:1:15: IDENTIFIER "eq",
	// }
}

func ExampleExpression_case09() {
	fmt.Println(exampleAST(154, "pause ident_a ne ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 9,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example154.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example154.go:1:18: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example154.go:1:15: IDENTIFIER "ne",
	// }
}

func ExampleExpression_case10() {
	fmt.Println(exampleAST(155, "pause ident_a || ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example155.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example155.go:1:18: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example155.go:1:15: OROR "||",
	// }
}

func ExampleExpression_case11() {
	fmt.Println(exampleAST(156, "plot ident_a % ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example156.go:1:6: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example156.go:1:16: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example156.go:1:14: '%' "%",
	// }
}

func ExampleExpression_case12() {
	fmt.Println(exampleAST(157, "plot ident_a & ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 12,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example157.go:1:6: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example157.go:1:16: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example157.go:1:14: '&' "&",
	// }
}

func ExampleExpression_case13() {
	fmt.Println(exampleAST(158, "plot ident_a * ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 13,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example158.go:1:6: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example158.go:1:16: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example158.go:1:14: '*' "*",
	// }
}

func ExampleExpression_case14() {
	fmt.Println(exampleAST(159, "plot ident_a + ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 14,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example159.go:1:6: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example159.go:1:16: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example159.go:1:14: '+' "+",
	// }
}

func ExampleExpression_case15() {
	fmt.Println(exampleAST(160, "pause ident_a - ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example160.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example160.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example160.go:1:15: '-' "-",
	// }
}

func ExampleExpression_case16() {
	fmt.Println(exampleAST(161, "pause ident_a . ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 16,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example161.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example161.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example161.go:1:15: '.' ".",
	// }
}

func ExampleExpression_case17() {
	fmt.Println(exampleAST(162, "pause ident_a / ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 17,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example162.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example162.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example162.go:1:15: '/' "/",
	// }
}

func ExampleExpression_case18() {
	fmt.Println(exampleAST(163, "pause ident_a < ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 18,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example163.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example163.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example163.go:1:15: '<' "<",
	// }
}

func ExampleExpression_case19() {
	fmt.Println(exampleAST(164, "pause ident_a = ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 19,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example164.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example164.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example164.go:1:15: '=' "=",
	// }
}

func ExampleExpression_case20() {
	fmt.Println(exampleAST(165, "update ident_a > ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 20,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example165.go:1:8: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example165.go:1:18: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example165.go:1:16: '>' ">",
	// }
}

func ExampleExpression_case21() {
	fmt.Println(exampleAST(166, "pause ident_a ? ident_b : ident_c"))
	// Output:
	// &plot.Expression{
	// · Case: 21,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example166.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example166.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression3: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example166.go:1:27: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example166.go:1:15: '?' "?",
	// · Token2: example166.go:1:25: ':' ":",
	// }
}

func ExampleExpression_case22() {
	fmt.Println(exampleAST(167, "pause ident_a ^ ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 22,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example167.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example167.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example167.go:1:15: '^' "^",
	// }
}

func ExampleExpression_case23() {
	fmt.Println(exampleAST(168, "pause ident_a | ident_b"))
	// Output:
	// &plot.Expression{
	// · Case: 23,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example168.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example168.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example168.go:1:15: '|' "|",
	// }
}

func ExampleExpression_case24() {
	fmt.Println(exampleAST(169, "pause ident_a"))
	// Output:
	// &plot.Expression{
	// · Case: 24,
	// · UnaryExpression: &plot.UnaryExpression{
	// · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · Operand: &plot.Operand{
	// · · · · Case: 1,
	// · · · · Token: example169.go:1:7: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleExpressionList() {
	fmt.Println(exampleAST(170, "print ident_a"))
	// Output:
	// &plot.ExpressionList{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example170.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleExpressionList_case1() {
	fmt.Println(exampleAST(171, "print ident_a , ident_b"))
	// Output:
	// &plot.ExpressionList{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example171.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList: &plot.ExpressionList{
	// · · Case: 1,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example171.go:1:17: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example171.go:1:15: ',' ",",
	// · },
	// }
}

func ExampleExpressionOpt() {
	fmt.Println(exampleAST(176, "unset arrow") == (*ExpressionOpt)(nil))
	// Output:
	// true
}

func ExampleExpressionOpt_case1() {
	fmt.Println(exampleAST(177, "unset arrow ident_a"))
	// Output:
	// &plot.ExpressionOpt{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example177.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleExpressionOptList() {
	fmt.Println(exampleAST(178, "set vi") == (*ExpressionOptList)(nil))
	// Output:
	// true
}

func ExampleExpressionOptList_case1() {
	fmt.Println(exampleAST(179, "set vi ident_a"))
	// Output:
	// &plot.ExpressionOptList{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example179.go:1:8: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleExpressionOptList_case2() {
	fmt.Println(exampleAST(180, "set vi ,"))
	// Output:
	// &plot.ExpressionOptList{
	// · Case: 2,
	// · Token: example180.go:1:8: ',' ",",
	// }
}

func ExampleExpressionOptList_case3() {
	fmt.Println(exampleAST(181, "set vi , ident_a"))
	// Output:
	// &plot.ExpressionOptList{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example181.go:1:10: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example181.go:1:8: ',' ",",
	// }
}

func ExampleExpressionUnitList() {
	fmt.Println(exampleAST(172, "set term pstex size ident_a"))
	// Output:
	// &plot.ExpressionUnitList{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example172.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleExpressionUnitList_case1() {
	fmt.Println(exampleAST(173, "set term pstex size ident_a bp"))
	// Output:
	// &plot.ExpressionUnitList{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example173.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Unit: &plot.Unit{
	// · · Case: 6,
	// · · Token: example173.go:1:29: IDENTIFIER "bp",
	// · },
	// }
}

func ExampleExpressionUnitList_case2() {
	fmt.Println(exampleAST(174, "set term pstex size ident_a , ident_b"))
	// Output:
	// &plot.ExpressionUnitList{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example174.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionUnitList: &plot.ExpressionUnitList{
	// · · Case: 2,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example174.go:1:31: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example174.go:1:29: ',' ",",
	// · },
	// }
}

func ExampleExpressionUnitList_case3() {
	fmt.Println(exampleAST(175, "set term pstex size ident_a , ident_b bp"))
	// Output:
	// &plot.ExpressionUnitList{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example175.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionUnitList: &plot.ExpressionUnitList{
	// · · Case: 3,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example175.go:1:31: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example175.go:1:29: ',' ",",
	// · · Unit: &plot.Unit{
	// · · · Case: 6,
	// · · · Token: example175.go:1:39: IDENTIFIER "bp",
	// · · },
	// · },
	// }
}

func ExampleFit() {
	fmt.Println(exampleAST(182, "fit ident_a ident_b via ident_c"))
	// Output:
	// &plot.Fit{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example182.go:1:5: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example182.go:1:25: IDENTIFIER "ident_c",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example182.go:1:13: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example182.go:1:1: IDENTIFIER "fit",
	// · Token2: example182.go:1:21: IDENTIFIER "via",
	// }
}

func ExampleFitOptionsList() {
	fmt.Println(exampleAST(183, "fit ident_a ident_b unitweights errors"))
	// Output:
	// &plot.FitOptionsList{
	// · FitOptionsListItem: &plot.FitOptionsListItem{
	// · · Token: example183.go:1:21: IDENTIFIER "unitweights",
	// · },
	// }
}

func ExampleFitOptionsList_case1() {
	fmt.Println(exampleAST(184, "fit ident_a ident_b unitweights unitweights errors"))
	// Output:
	// &plot.FitOptionsList{
	// · FitOptionsList: &plot.FitOptionsList{
	// · · Case: 1,
	// · · FitOptionsListItem: &plot.FitOptionsListItem{
	// · · · Token: example184.go:1:33: IDENTIFIER "unitweights",
	// · · },
	// · },
	// · FitOptionsListItem: &plot.FitOptionsListItem{
	// · · Token: example184.go:1:21: IDENTIFIER "unitweights",
	// · },
	// }
}

func ExampleFitOptionsListItem() {
	fmt.Println(exampleAST(185, "fit ident_a ident_b unitweights errors"))
	// Output:
	// &plot.FitOptionsListItem{
	// · Token: example185.go:1:21: IDENTIFIER "unitweights",
	// }
}

func ExampleFitOptionsListItem_case1() {
	fmt.Println(exampleAST(186, "fit ident_a ident_b xerror errors"))
	// Output:
	// &plot.FitOptionsListItem{
	// · Case: 1,
	// · Token: example186.go:1:21: IDENTIFIER "xerror",
	// }
}

func ExampleFitOptionsListItem_case2() {
	fmt.Println(exampleAST(187, "fit ident_a ident_b xyerror errors"))
	// Output:
	// &plot.FitOptionsListItem{
	// · Case: 2,
	// · Token: example187.go:1:21: IDENTIFIER "xyerror",
	// }
}

func ExampleFitOptionsListItem_case3() {
	fmt.Println(exampleAST(188, "fit ident_a ident_b yerror errors"))
	// Output:
	// &plot.FitOptionsListItem{
	// · Case: 3,
	// · Token: example188.go:1:21: IDENTIFIER "yerror",
	// }
}

func ExampleFitOptionsListItem_case4() {
	fmt.Println(exampleAST(189, "fit ident_a ident_b errors ident_c errors"))
	// Output:
	// &plot.FitOptionsListItem{
	// · Case: 4,
	// · IdentifierList: &plot.IdentifierList{
	// · · Token: example189.go:1:28: IDENTIFIER "ident_c",
	// · },
	// · Token: example189.go:1:21: IDENTIFIER "errors",
	// }
}

func ExampleFitOptionsListOpt() {
	fmt.Println(exampleAST(190, "fit ident_a ident_b via") == (*FitOptionsListOpt)(nil))
	// Output:
	// true
}

func ExampleFitOptionsListOpt_case1() {
	fmt.Println(exampleAST(191, "fit ident_a ident_b unitweights via"))
	// Output:
	// &plot.FitOptionsListOpt{
	// · FitOptionsList: &plot.FitOptionsList{
	// · · FitOptionsListItem: &plot.FitOptionsListItem{
	// · · · Token: example191.go:1:21: IDENTIFIER "unitweights",
	// · · },
	// · },
	// }
}

func ExampleFunctionDefinition() {
	fmt.Println(exampleAST(192, "ident_a ( ident_b ) = ident_c"))
	// Output:
	// &plot.FunctionDefinition{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example192.go:1:23: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · IdentifierList: &plot.IdentifierList{
	// · · Token: example192.go:1:11: IDENTIFIER "ident_b",
	// · },
	// · Token: example192.go:1:1: IDENTIFIER "ident_a",
	// · Token2: example192.go:1:9: '(' "(",
	// · Token3: example192.go:1:19: ')' ")",
	// · Token4: example192.go:1:21: '=' "=",
	// }
}

func ExampleIdentifierList() {
	fmt.Println(exampleAST(193, "ident_a ( ident_b"))
	// Output:
	// &plot.IdentifierList{
	// · Token: example193.go:1:11: IDENTIFIER "ident_b",
	// }
}

func ExampleIdentifierList_case1() {
	fmt.Println(exampleAST(194, "ident_a ( ident_b , ident_c"))
	// Output:
	// &plot.IdentifierList{
	// · IdentifierList: &plot.IdentifierList{
	// · · Case: 1,
	// · · Token: example194.go:1:19: ',' ",",
	// · · Token2: example194.go:1:21: IDENTIFIER "ident_c",
	// · },
	// · Token: example194.go:1:11: IDENTIFIER "ident_b",
	// }
}

func ExampleIdentifierOptList() {
	fmt.Println(exampleAST(195, "set dummy") == (*IdentifierOptList)(nil))
	// Output:
	// true
}

func ExampleIdentifierOptList_case1() {
	fmt.Println(exampleAST(196, "set dummy ident_a"))
	// Output:
	// &plot.IdentifierOptList{
	// · Case: 1,
	// · Token: example196.go:1:11: IDENTIFIER "ident_a",
	// }
}

func ExampleIdentifierOptList_case2() {
	fmt.Println(exampleAST(197, "set dummy ,"))
	// Output:
	// &plot.IdentifierOptList{
	// · Case: 2,
	// · Token: example197.go:1:11: ',' ",",
	// }
}

func ExampleIdentifierOptList_case3() {
	fmt.Println(exampleAST(198, "set dummy , ident_a"))
	// Output:
	// &plot.IdentifierOptList{
	// · Case: 3,
	// · Token: example198.go:1:11: ',' ",",
	// · Token2: example198.go:1:13: IDENTIFIER "ident_a",
	// }
}

func ExampleIf() {
	fmt.Println(exampleAST(199, "if ( ident_a ) { }"))
	// Output:
	// &plot.If{
	// · IfHeader: &plot.IfHeader{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example199.go:1:6: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example199.go:1:1: IDENTIFIER "if",
	// · · Token2: example199.go:1:4: '(' "(",
	// · · Token3: example199.go:1:14: ')' ")",
	// · · Token4: example199.go:1:16: '{' "{",
	// · · Token5: example199.go:1:18: '}' "}",
	// · },
	// }
}

func ExampleIf_case1() {
	fmt.Println(exampleAST(201, "if ( ident_a ) { } else { }"))
	// Output:
	// &plot.If{
	// · Case: 1,
	// · IfHeader: &plot.IfHeader{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example201.go:1:6: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example201.go:1:1: IDENTIFIER "if",
	// · · Token2: example201.go:1:4: '(' "(",
	// · · Token3: example201.go:1:14: ')' ")",
	// · · Token4: example201.go:1:16: '{' "{",
	// · · Token5: example201.go:1:18: '}' "}",
	// · },
	// · Token: example201.go:1:20: IDENTIFIER "else",
	// · Token2: example201.go:1:25: '{' "{",
	// · Token3: example201.go:1:27: '}' "}",
	// }
}

func ExampleIf_case2() {
	fmt.Println(exampleAST(202, "if ( ident_a )"))
	// Output:
	// &plot.If{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example202.go:1:6: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example202.go:1:1: IDENTIFIER "if",
	// · Token2: example202.go:1:4: '(' "(",
	// · Token3: example202.go:1:14: ')' ")",
	// }
}

func ExampleIfHeader() {
	fmt.Println(exampleAST(204, "if ( ident_a ) { }"))
	// Output:
	// &plot.IfHeader{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example204.go:1:6: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example204.go:1:1: IDENTIFIER "if",
	// · Token2: example204.go:1:4: '(' "(",
	// · Token3: example204.go:1:14: ')' ")",
	// · Token4: example204.go:1:16: '{' "{",
	// · Token5: example204.go:1:18: '}' "}",
	// }
}

func ExampleImport() {
	fmt.Println(exampleAST(205, "import ident_a ( ident_b ) from ident_c"))
	// Output:
	// &plot.Import{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example205.go:1:33: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · IdentifierList: &plot.IdentifierList{
	// · · Token: example205.go:1:18: IDENTIFIER "ident_b",
	// · },
	// · Token: example205.go:1:1: IDENTIFIER "import",
	// · Token2: example205.go:1:8: IDENTIFIER "ident_a",
	// · Token3: example205.go:1:16: '(' "(",
	// · Token4: example205.go:1:26: ')' ")",
	// · Token5: example205.go:1:28: IDENTIFIER "from",
	// }
}

func ExampleIterationSpecifier() {
	fmt.Println(exampleAST(206, "splot for [ ident_a : ident_b : ident_c ] !"))
	// Output:
	// &plot.IterationSpecifier{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example206.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example206.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression3: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example206.go:1:33: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example206.go:1:7: IDENTIFIER "for",
	// · Token2: example206.go:1:11: '[' "[",
	// · Token3: example206.go:1:21: ':' ":",
	// · Token4: example206.go:1:31: ':' ":",
	// · Token5: example206.go:1:41: ']' "]",
	// }
}

func ExampleIterationSpecifier_case1() {
	fmt.Println(exampleAST(207, "splot for [ ident_a : ident_b ] !"))
	// Output:
	// &plot.IterationSpecifier{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example207.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example207.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example207.go:1:7: IDENTIFIER "for",
	// · Token2: example207.go:1:11: '[' "[",
	// · Token3: example207.go:1:21: ':' ":",
	// · Token4: example207.go:1:31: ']' "]",
	// }
}

func ExampleIterationSpecifier_case2() {
	fmt.Println(exampleAST(208, "splot for [ ident_a : * ] !"))
	// Output:
	// &plot.IterationSpecifier{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example208.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example208.go:1:7: IDENTIFIER "for",
	// · Token2: example208.go:1:11: '[' "[",
	// · Token3: example208.go:1:21: ':' ":",
	// · Token4: example208.go:1:23: '*' "*",
	// · Token5: example208.go:1:25: ']' "]",
	// }
}

func ExampleIterationSpecifier_case3() {
	fmt.Println(exampleAST(209, "splot for [ ident_a in ident_b ] !"))
	// Output:
	// &plot.IterationSpecifier{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example209.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example209.go:1:24: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example209.go:1:7: IDENTIFIER "for",
	// · Token2: example209.go:1:11: '[' "[",
	// · Token3: example209.go:1:21: IDENTIFIER "in",
	// · Token4: example209.go:1:32: ']' "]",
	// }
}

func ExampleIterationSpecifierOpt() {
	fmt.Println(exampleAST(210, "plot !") == (*IterationSpecifierOpt)(nil))
	// Output:
	// true
}

func ExampleIterationSpecifierOpt_case1() {
	fmt.Println(exampleAST(211, "set for [ ident_a : * ] !"))
	// Output:
	// &plot.IterationSpecifierOpt{
	// · IterationSpecifier: &plot.IterationSpecifier{
	// · · Case: 2,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example211.go:1:11: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example211.go:1:5: IDENTIFIER "for",
	// · · Token2: example211.go:1:9: '[' "[",
	// · · Token3: example211.go:1:19: ':' ":",
	// · · Token4: example211.go:1:21: '*' "*",
	// · · Token5: example211.go:1:23: ']' "]",
	// · },
	// }
}

func ExampleLineStyleList() {
	fmt.Println(exampleAST(212, "set colorbox border nocontours"))
	// Output:
	// &plot.LineStyleList{
	// · LineStyleListItem: &plot.LineStyleListItem{
	// · · Case: 15,
	// · · Token: example212.go:1:21: IDENTIFIER "nocontours",
	// · },
	// }
}

func ExampleLineStyleList_case1() {
	fmt.Println(exampleAST(213, "set linetype ident_a nocontours nocontours"))
	// Output:
	// &plot.LineStyleList{
	// · LineStyleList: &plot.LineStyleList{
	// · · Case: 1,
	// · · LineStyleListItem: &plot.LineStyleListItem{
	// · · · Case: 15,
	// · · · Token: example213.go:1:33: IDENTIFIER "nocontours",
	// · · },
	// · },
	// · LineStyleListItem: &plot.LineStyleListItem{
	// · · Case: 15,
	// · · Token: example213.go:1:22: IDENTIFIER "nocontours",
	// · },
	// }
}

func ExampleLineStyleListItem() {
	fmt.Println(exampleAST(214, "plot ident_a linestyle ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example214.go:1:24: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example214.go:1:14: IDENTIFIER "linestyle",
	// }
}

func ExampleLineStyleListItem_case01() {
	fmt.Println(exampleAST(215, "plot ident_a ls ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example215.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example215.go:1:14: IDENTIFIER "ls",
	// }
}

func ExampleLineStyleListItem_case02() {
	fmt.Println(exampleAST(216, "plot ident_a linetype ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 2,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example216.go:1:23: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example216.go:1:14: IDENTIFIER "linetype",
	// }
}

func ExampleLineStyleListItem_case03() {
	fmt.Println(exampleAST(217, "plot ident_a lt ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 3,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example217.go:1:17: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example217.go:1:14: IDENTIFIER "lt",
	// }
}

func ExampleLineStyleListItem_case04() {
	fmt.Println(exampleAST(218, "plot ident_a linewidth ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example218.go:1:24: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example218.go:1:14: IDENTIFIER "linewidth",
	// }
}

func ExampleLineStyleListItem_case05() {
	fmt.Println(exampleAST(219, "plot ident_a lw ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 5,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example219.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example219.go:1:14: IDENTIFIER "lw",
	// }
}

func ExampleLineStyleListItem_case06() {
	fmt.Println(exampleAST(220, "plot ident_a linecolor ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 6,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example220.go:1:24: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example220.go:1:14: IDENTIFIER "linecolor",
	// }
}

func ExampleLineStyleListItem_case07() {
	fmt.Println(exampleAST(221, "plot ident_a lc ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 7,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example221.go:1:17: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example221.go:1:14: IDENTIFIER "lc",
	// }
}

func ExampleLineStyleListItem_case08() {
	fmt.Println(exampleAST(222, "plot ident_a pointtype ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 8,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example222.go:1:24: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example222.go:1:14: IDENTIFIER "pointtype",
	// }
}

func ExampleLineStyleListItem_case09() {
	fmt.Println(exampleAST(223, "plot ident_a pt ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 9,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example223.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example223.go:1:14: IDENTIFIER "pt",
	// }
}

func ExampleLineStyleListItem_case10() {
	fmt.Println(exampleAST(224, "plot ident_a pointsize ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example224.go:1:24: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example224.go:1:14: IDENTIFIER "pointsize",
	// }
}

func ExampleLineStyleListItem_case11() {
	fmt.Println(exampleAST(225, "plot ident_a ps ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example225.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example225.go:1:14: IDENTIFIER "ps",
	// }
}

func ExampleLineStyleListItem_case12() {
	fmt.Println(exampleAST(226, "plot ident_a fill bo"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 12,
	// · SetStyleFillSpecList: &plot.SetStyleFillSpecList{
	// · · SetStyleFillSpecListItem: &plot.SetStyleFillSpecListItem{
	// · · · Case: 5,
	// · · · Token: example226.go:1:19: IDENTIFIER "bo",
	// · · },
	// · },
	// · Token: example226.go:1:14: IDENTIFIER "fill",
	// }
}

func ExampleLineStyleListItem_case13() {
	fmt.Println(exampleAST(227, "plot ident_a fs bo"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 13,
	// · SetStyleFillSpecList: &plot.SetStyleFillSpecList{
	// · · SetStyleFillSpecListItem: &plot.SetStyleFillSpecListItem{
	// · · · Case: 5,
	// · · · Token: example227.go:1:17: IDENTIFIER "bo",
	// · · },
	// · },
	// · Token: example227.go:1:14: IDENTIFIER "fs",
	// }
}

func ExampleLineStyleListItem_case14() {
	fmt.Println(exampleAST(228, "plot ident_a nohidden3d"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 14,
	// · Token: example228.go:1:14: IDENTIFIER "nohidden3d",
	// }
}

func ExampleLineStyleListItem_case15() {
	fmt.Println(exampleAST(229, "plot ident_a nocontours"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 15,
	// · Token: example229.go:1:14: IDENTIFIER "nocontours",
	// }
}

func ExampleLineStyleListItem_case16() {
	fmt.Println(exampleAST(230, "plot ident_a nosurface"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 16,
	// · Token: example230.go:1:14: IDENTIFIER "nosurface",
	// }
}

func ExampleLineStyleListItem_case17() {
	fmt.Println(exampleAST(231, "plot ident_a palette"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 17,
	// · Token: example231.go:1:14: IDENTIFIER "palette",
	// }
}

func ExampleLineStyleListItem_case18() {
	fmt.Println(exampleAST(232, "plot ident_a dashtype ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 18,
	// · DashTypeSpec: &plot.DashTypeSpec{
	// · · Case: 1,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example232.go:1:23: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example232.go:1:14: IDENTIFIER "dashtype",
	// }
}

func ExampleLineStyleListItem_case19() {
	fmt.Println(exampleAST(233, "plot ident_a dt ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 19,
	// · DashTypeSpec: &plot.DashTypeSpec{
	// · · Case: 1,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example233.go:1:17: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example233.go:1:14: IDENTIFIER "dt",
	// }
}

func ExampleLineStyleListItem_case20() {
	fmt.Println(exampleAST(234, "plot ident_a pi ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 20,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example234.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example234.go:1:14: IDENTIFIER "pi",
	// }
}

func ExampleLineStyleListItem_case21() {
	fmt.Println(exampleAST(235, "plot ident_a pointinterval ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 21,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example235.go:1:28: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example235.go:1:14: IDENTIFIER "pointinterval",
	// }
}

func ExampleLineStyleListItem_case22() {
	fmt.Println(exampleAST(236, "plot ident_a tc ident_b"))
	// Output:
	// &plot.LineStyleListItem{
	// · Case: 22,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example236.go:1:17: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example236.go:1:14: IDENTIFIER "tc",
	// }
}

func ExampleLoad() {
	fmt.Println(exampleAST(237, "load ident_a"))
	// Output:
	// &plot.Load{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example237.go:1:6: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example237.go:1:1: IDENTIFIER "load",
	// }
}

func ExampleLower() {
	fmt.Println(exampleAST(238, "lower"))
	// Output:
	// &plot.Lower{
	// · Token: example238.go:1:1: IDENTIFIER "lower",
	// }
}

func ExampleLower_case1() {
	fmt.Println(exampleAST(239, "lower pm"))
	// Output:
	// &plot.Lower{
	// · Case: 1,
	// · PlotWindow: &plot.PlotWindow{
	// · · Token: example239.go:1:7: IDENTIFIER "pm",
	// · },
	// · Token: example239.go:1:1: IDENTIFIER "lower",
	// }
}

func ExampleNamedDataBlock() {
	fmt.Println(exampleAST(240, "$data << EOD\n1 2 3\nEOD\n"))
	// Output:
	// &plot.NamedDataBlock{
	// · Data: []uint8{ // len 6
	// · · 0: 49,
	// · · 1: 32,
	// · · 2: 50,
	// · · 3: 32,
	// · · 4: 51,
	// · · 5: 10,
	// · },
	// · Token: example240.go:1:1: IDENTIFIER "$data",
	// · Token2: example240.go:1:7: LSH "<<",
	// · Token3: example240.go:1:10: IDENTIFIER "EOD",
	// }
}

func ExampleNonParenthesizedExpression() {
	fmt.Println(exampleAST(241, "set rtics ident_a != ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example241.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example241.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example241.go:1:19: NOTEQ "!=",
	// }
}

func ExampleNonParenthesizedExpression_case01() {
	fmt.Println(exampleAST(242, "set rtics ident_a && ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 1,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example242.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example242.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example242.go:1:19: ANDAND "&&",
	// }
}

func ExampleNonParenthesizedExpression_case02() {
	fmt.Println(exampleAST(243, "set rtics ident_a ** ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 2,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example243.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example243.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example243.go:1:19: EXP "**",
	// }
}

func ExampleNonParenthesizedExpression_case03() {
	fmt.Println(exampleAST(244, "set rtics ident_a << ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 3,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example244.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example244.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example244.go:1:19: LSH "<<",
	// }
}

func ExampleNonParenthesizedExpression_case04() {
	fmt.Println(exampleAST(245, "set rtics ident_a <= ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 4,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example245.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example245.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example245.go:1:19: LEQ "<=",
	// }
}

func ExampleNonParenthesizedExpression_case05() {
	fmt.Println(exampleAST(246, "set rtics ident_a == ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 5,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example246.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example246.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example246.go:1:19: EQEQ "==",
	// }
}

func ExampleNonParenthesizedExpression_case06() {
	fmt.Println(exampleAST(247, "set rtics ident_a >= ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 6,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example247.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example247.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example247.go:1:19: GEQ ">=",
	// }
}

func ExampleNonParenthesizedExpression_case07() {
	fmt.Println(exampleAST(248, "set rtics ident_a >> ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 7,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example248.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example248.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example248.go:1:19: RSH ">>",
	// }
}

func ExampleNonParenthesizedExpression_case08() {
	fmt.Println(exampleAST(249, "set rtics ident_a eq ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 8,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example249.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example249.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example249.go:1:19: IDENTIFIER "eq",
	// }
}

func ExampleNonParenthesizedExpression_case09() {
	fmt.Println(exampleAST(250, "set rtics ident_a ne ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 9,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example250.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example250.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example250.go:1:19: IDENTIFIER "ne",
	// }
}

func ExampleNonParenthesizedExpression_case10() {
	fmt.Println(exampleAST(251, "set rtics ident_a || ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 10,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example251.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example251.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example251.go:1:19: OROR "||",
	// }
}

func ExampleNonParenthesizedExpression_case11() {
	fmt.Println(exampleAST(252, "set rtics ident_a % ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 11,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example252.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example252.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example252.go:1:19: '%' "%",
	// }
}

func ExampleNonParenthesizedExpression_case12() {
	fmt.Println(exampleAST(253, "set rtics ident_a & ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 12,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example253.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example253.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example253.go:1:19: '&' "&",
	// }
}

func ExampleNonParenthesizedExpression_case13() {
	fmt.Println(exampleAST(254, "set rtics ident_a * ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 13,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example254.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example254.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example254.go:1:19: '*' "*",
	// }
}

func ExampleNonParenthesizedExpression_case14() {
	fmt.Println(exampleAST(255, "set rtics ident_a + ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 14,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example255.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example255.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example255.go:1:19: '+' "+",
	// }
}

func ExampleNonParenthesizedExpression_case15() {
	fmt.Println(exampleAST(256, "set rtics ident_a - ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 15,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example256.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example256.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example256.go:1:19: '-' "-",
	// }
}

func ExampleNonParenthesizedExpression_case16() {
	fmt.Println(exampleAST(257, "set rtics ident_a . ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 16,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example257.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example257.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example257.go:1:19: '.' ".",
	// }
}

func ExampleNonParenthesizedExpression_case17() {
	fmt.Println(exampleAST(258, "set rtics ident_a / ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 17,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example258.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example258.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example258.go:1:19: '/' "/",
	// }
}

func ExampleNonParenthesizedExpression_case18() {
	fmt.Println(exampleAST(259, "set rtics ident_a < ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 18,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example259.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example259.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example259.go:1:19: '<' "<",
	// }
}

func ExampleNonParenthesizedExpression_case19() {
	fmt.Println(exampleAST(260, "set rtics ident_a = ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 19,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example260.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example260.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example260.go:1:19: '=' "=",
	// }
}

func ExampleNonParenthesizedExpression_case20() {
	fmt.Println(exampleAST(261, "set rtics ident_a > ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 20,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example261.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example261.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example261.go:1:19: '>' ">",
	// }
}

func ExampleNonParenthesizedExpression_case21() {
	fmt.Println(exampleAST(262, "set rtics ident_a ? ident_b : ident_c"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 21,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example262.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example262.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression3: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example262.go:1:31: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example262.go:1:19: '?' "?",
	// · Token2: example262.go:1:29: ':' ":",
	// }
}

func ExampleNonParenthesizedExpression_case22() {
	fmt.Println(exampleAST(263, "set rtics ident_a ^ ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 22,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example263.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example263.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example263.go:1:19: '^' "^",
	// }
}

func ExampleNonParenthesizedExpression_case23() {
	fmt.Println(exampleAST(264, "set rtics ident_a | ident_b"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 23,
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example264.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression2: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example264.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example264.go:1:19: '|' "|",
	// }
}

func ExampleNonParenthesizedExpression_case24() {
	fmt.Println(exampleAST(265, "set cbtics ident_a"))
	// Output:
	// &plot.NonParenthesizedExpression{
	// · Case: 24,
	// · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · Token: example265.go:1:12: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleNonParenthesizedOperand() {
	fmt.Println(exampleAST(266, "set ytics ident_a"))
	// Output:
	// &plot.NonParenthesizedOperand{
	// · Token: example266.go:1:11: IDENTIFIER "ident_a",
	// }
}

func ExampleNonParenthesizedOperand_case1() {
	fmt.Println(exampleAST(267, "set ztics 97"))
	// Output:
	// &plot.NonParenthesizedOperand{
	// · Case: 1,
	// · Token: example267.go:1:11: NUM_LIT "97",
	// }
}

func ExampleNonParenthesizedOperand_case2() {
	fmt.Println(exampleAST(268, "set y2tics 'a'"))
	// Output:
	// &plot.NonParenthesizedOperand{
	// · Case: 2,
	// · Token: example268.go:1:12: STRING_LIT "a",
	// }
}

func ExampleNonParenthesizedOperand_case3() {
	fmt.Println(exampleAST(269, "set tics { ident_a , ident_b }"))
	// Output:
	// &plot.NonParenthesizedOperand{
	// · Case: 3,
	// · ComplexNumber: &plot.ComplexNumber{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example269.go:1:12: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Expression2: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example269.go:1:22: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example269.go:1:10: '{' "{",
	// · · Token2: example269.go:1:20: ',' ",",
	// · · Token3: example269.go:1:30: '}' "}",
	// · },
	// }
}

func ExampleNonParenthesizedOperand_case4() {
	fmt.Println(exampleAST(270, "set ztics sum [ ident_a : ident_b ] ident_c"))
	// Output:
	// &plot.NonParenthesizedOperand{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example270.go:1:17: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example270.go:1:27: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression3: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example270.go:1:37: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example270.go:1:11: SUM "sum",
	// · Token2: example270.go:1:15: '[' "[",
	// · Token3: example270.go:1:25: ':' ":",
	// · Token4: example270.go:1:35: ']' "]",
	// }
}

func ExampleNonStringExpression() {
	fmt.Println(exampleAST(271, "set tics ( ident_a != ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example271.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example271.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example271.go:1:20: NOTEQ "!=",
	// }
}

func ExampleNonStringExpression_case01() {
	fmt.Println(exampleAST(272, "set tics ( ident_a && ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 1,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example272.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example272.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example272.go:1:20: ANDAND "&&",
	// }
}

func ExampleNonStringExpression_case02() {
	fmt.Println(exampleAST(273, "set tics ( ident_a ** ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 2,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example273.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example273.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example273.go:1:20: EXP "**",
	// }
}

func ExampleNonStringExpression_case03() {
	fmt.Println(exampleAST(274, "set tics ( ident_a << ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 3,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example274.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example274.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example274.go:1:20: LSH "<<",
	// }
}

func ExampleNonStringExpression_case04() {
	fmt.Println(exampleAST(275, "set tics ( ident_a <= ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 4,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example275.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example275.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example275.go:1:20: LEQ "<=",
	// }
}

func ExampleNonStringExpression_case05() {
	fmt.Println(exampleAST(276, "set tics ( ident_a == ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 5,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example276.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example276.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example276.go:1:20: EQEQ "==",
	// }
}

func ExampleNonStringExpression_case06() {
	fmt.Println(exampleAST(277, "set tics ( ident_a >= ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 6,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example277.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example277.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example277.go:1:20: GEQ ">=",
	// }
}

func ExampleNonStringExpression_case07() {
	fmt.Println(exampleAST(278, "set tics ( ident_a >> ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 7,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example278.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example278.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example278.go:1:20: RSH ">>",
	// }
}

func ExampleNonStringExpression_case08() {
	fmt.Println(exampleAST(279, "set tics ( ident_a eq ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 8,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example279.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example279.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example279.go:1:20: IDENTIFIER "eq",
	// }
}

func ExampleNonStringExpression_case09() {
	fmt.Println(exampleAST(280, "set tics ( ident_a ne ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 9,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example280.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example280.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example280.go:1:20: IDENTIFIER "ne",
	// }
}

func ExampleNonStringExpression_case10() {
	fmt.Println(exampleAST(281, "set tics ( ident_a || ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 10,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example281.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example281.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example281.go:1:20: OROR "||",
	// }
}

func ExampleNonStringExpression_case11() {
	fmt.Println(exampleAST(282, "set tics ( ident_a % ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 11,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example282.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example282.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example282.go:1:20: '%' "%",
	// }
}

func ExampleNonStringExpression_case12() {
	fmt.Println(exampleAST(283, "set tics ( ident_a & ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 12,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example283.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example283.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example283.go:1:20: '&' "&",
	// }
}

func ExampleNonStringExpression_case13() {
	fmt.Println(exampleAST(284, "set tics ( ident_a * ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 13,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example284.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example284.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example284.go:1:20: '*' "*",
	// }
}

func ExampleNonStringExpression_case14() {
	fmt.Println(exampleAST(285, "set tics ( ident_a + ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 14,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example285.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example285.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example285.go:1:20: '+' "+",
	// }
}

func ExampleNonStringExpression_case15() {
	fmt.Println(exampleAST(286, "set tics ( ident_a - ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 15,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example286.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example286.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example286.go:1:20: '-' "-",
	// }
}

func ExampleNonStringExpression_case16() {
	fmt.Println(exampleAST(287, "set tics ( ident_a . ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 16,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example287.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example287.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example287.go:1:20: '.' ".",
	// }
}

func ExampleNonStringExpression_case17() {
	fmt.Println(exampleAST(288, "set tics ( ident_a / ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 17,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example288.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example288.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example288.go:1:20: '/' "/",
	// }
}

func ExampleNonStringExpression_case18() {
	fmt.Println(exampleAST(289, "set tics ( ident_a < ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 18,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example289.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example289.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example289.go:1:20: '<' "<",
	// }
}

func ExampleNonStringExpression_case19() {
	fmt.Println(exampleAST(290, "set tics ( ident_a = ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 19,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example290.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example290.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example290.go:1:20: '=' "=",
	// }
}

func ExampleNonStringExpression_case20() {
	fmt.Println(exampleAST(291, "set tics ( ident_a > ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 20,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example291.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example291.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example291.go:1:20: '>' ">",
	// }
}

func ExampleNonStringExpression_case21() {
	fmt.Println(exampleAST(292, "set tics ( ident_a ? ident_b : ident_c )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 21,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example292.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example292.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression3: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example292.go:1:32: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example292.go:1:20: '?' "?",
	// · Token2: example292.go:1:30: ':' ":",
	// }
}

func ExampleNonStringExpression_case22() {
	fmt.Println(exampleAST(293, "set tics ( ident_a ^ ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 22,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example293.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example293.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example293.go:1:20: '^' "^",
	// }
}

func ExampleNonStringExpression_case23() {
	fmt.Println(exampleAST(294, "set tics ( ident_a | ident_b )"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 23,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example294.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonStringExpression2: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example294.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example294.go:1:20: '|' "|",
	// }
}

func ExampleNonStringExpression_case24() {
	fmt.Println(exampleAST(295, "set rtics ( ident_a !"))
	// Output:
	// &plot.NonStringExpression{
	// · Case: 24,
	// · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · Case: 1,
	// · · · · Token: example295.go:1:13: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleNonStringOperand() {
	fmt.Println(exampleAST(296, "set rtics ( ( ident_a ) !"))
	// Output:
	// &plot.NonStringOperand{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example296.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example296.go:1:13: '(' "(",
	// · Token2: example296.go:1:23: ')' ")",
	// }
}

func ExampleNonStringOperand_case1() {
	fmt.Println(exampleAST(297, "set rtics ( ident_a !"))
	// Output:
	// &plot.NonStringOperand{
	// · Case: 1,
	// · Token: example297.go:1:13: IDENTIFIER "ident_a",
	// }
}

func ExampleNonStringOperand_case2() {
	fmt.Println(exampleAST(298, "set rtics ( 97 !"))
	// Output:
	// &plot.NonStringOperand{
	// · Case: 2,
	// · Token: example298.go:1:13: NUM_LIT "97",
	// }
}

func ExampleNonStringOperand_case3() {
	fmt.Println(exampleAST(299, "set rtics ( { ident_a , ident_b } !"))
	// Output:
	// &plot.NonStringOperand{
	// · Case: 3,
	// · ComplexNumber: &plot.ComplexNumber{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example299.go:1:15: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Expression2: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example299.go:1:25: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example299.go:1:13: '{' "{",
	// · · Token2: example299.go:1:23: ',' ",",
	// · · Token3: example299.go:1:33: '}' "}",
	// · },
	// }
}

func ExampleOperand() {
	fmt.Println(exampleAST(300, "load ( ident_a )"))
	// Output:
	// &plot.Operand{
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example300.go:1:8: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example300.go:1:6: '(' "(",
	// · Token2: example300.go:1:16: ')' ")",
	// }
}

func ExampleOperand_case1() {
	fmt.Println(exampleAST(301, "load ident_a"))
	// Output:
	// &plot.Operand{
	// · Case: 1,
	// · Token: example301.go:1:6: IDENTIFIER "ident_a",
	// }
}

func ExampleOperand_case2() {
	fmt.Println(exampleAST(302, "bind 97"))
	// Output:
	// &plot.Operand{
	// · Case: 2,
	// · Token: example302.go:1:6: NUM_LIT "97",
	// }
}

func ExampleOperand_case3() {
	fmt.Println(exampleAST(303, "bind 'a'"))
	// Output:
	// &plot.Operand{
	// · Case: 3,
	// · Token: example303.go:1:6: STRING_LIT "a",
	// }
}

func ExampleOperand_case4() {
	fmt.Println(exampleAST(304, "cd { ident_a , ident_b }"))
	// Output:
	// &plot.Operand{
	// · Case: 4,
	// · ComplexNumber: &plot.ComplexNumber{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example304.go:1:6: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Expression2: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example304.go:1:16: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example304.go:1:4: '{' "{",
	// · · Token2: example304.go:1:14: ',' ",",
	// · · Token3: example304.go:1:24: '}' "}",
	// · },
	// }
}

func ExampleOperand_case5() {
	fmt.Println(exampleAST(305, "bind sum [ ident_a : ident_b ] ident_c"))
	// Output:
	// &plot.Operand{
	// · Case: 5,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example305.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example305.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression3: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example305.go:1:32: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example305.go:1:6: SUM "sum",
	// · Token2: example305.go:1:10: '[' "[",
	// · Token3: example305.go:1:20: ':' ":",
	// · Token4: example305.go:1:30: ']' "]",
	// }
}

func ExampleOriginList() {
	fmt.Println(exampleAST(306, "plot ident_a binary origin = ( ident_b )"))
	// Output:
	// &plot.OriginList{
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example306.go:1:32: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example306.go:1:30: '(' "(",
	// · Token2: example306.go:1:40: ')' ")",
	// }
}

func ExampleOriginList_case1() {
	fmt.Println(exampleAST(307, "plot ident_a binary origin = ( ident_b ) : ( ident_c )"))
	// Output:
	// &plot.OriginList{
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example307.go:1:32: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · OriginList: &plot.OriginList{
	// · · Case: 1,
	// · · ExpressionList: &plot.ExpressionList{
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example307.go:1:46: IDENTIFIER "ident_c",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example307.go:1:42: ':' ":",
	// · · Token2: example307.go:1:44: '(' "(",
	// · · Token3: example307.go:1:54: ')' ")",
	// · },
	// · Token: example307.go:1:30: '(' "(",
	// · Token2: example307.go:1:40: ')' ")",
	// }
}

func ExamplePause() {
	fmt.Println(exampleAST(308, "pause mouse any"))
	// Output:
	// &plot.Pause{
	// · EndConditionList: &plot.EndConditionList{
	// · · EndConditionListItem: &plot.EndConditionListItem{
	// · · · Token: example308.go:1:13: IDENTIFIER "any",
	// · · },
	// · },
	// · Token: example308.go:1:1: IDENTIFIER "pause",
	// · Token2: example308.go:1:7: IDENTIFIER "mouse",
	// }
}

func ExamplePause_case1() {
	fmt.Println(exampleAST(309, "pause mouse any ident_a"))
	// Output:
	// &plot.Pause{
	// · Case: 1,
	// · EndConditionList: &plot.EndConditionList{
	// · · EndConditionListItem: &plot.EndConditionListItem{
	// · · · Token: example309.go:1:13: IDENTIFIER "any",
	// · · },
	// · },
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example309.go:1:17: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example309.go:1:1: IDENTIFIER "pause",
	// · Token2: example309.go:1:7: IDENTIFIER "mouse",
	// }
}

func ExamplePause_case2() {
	fmt.Println(exampleAST(310, "pause mouse ident_a"))
	// Output:
	// &plot.Pause{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example310.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example310.go:1:1: IDENTIFIER "pause",
	// · Token2: example310.go:1:7: IDENTIFIER "mouse",
	// }
}

func ExamplePause_case3() {
	fmt.Println(exampleAST(311, "pause ident_a"))
	// Output:
	// &plot.Pause{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example311.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example311.go:1:1: IDENTIFIER "pause",
	// }
}

func ExamplePause_case4() {
	fmt.Println(exampleAST(312, "pause ident_a ident_b"))
	// Output:
	// &plot.Pause{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example312.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example312.go:1:15: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example312.go:1:1: IDENTIFIER "pause",
	// }
}

func ExamplePlot() {
	fmt.Println(exampleAST(313, "plot ident_a"))
	// Output:
	// &plot.Plot{
	// · PlotElementList: &plot.PlotElementList{
	// · · PlotElementListItem: &plot.PlotElementListItem{
	// · · · Case: 1,
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example313.go:1:6: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example313.go:1:1: IDENTIFIER "plot",
	// }
}

func ExamplePlotElementAxes() {
	fmt.Println(exampleAST(314, "plot ident_a axes x1y1"))
	// Output:
	// &plot.PlotElementAxes{
	// · Token: example314.go:1:14: IDENTIFIER "axes",
	// · Token2: example314.go:1:19: IDENTIFIER "x1y1",
	// }
}

func ExamplePlotElementAxes_case1() {
	fmt.Println(exampleAST(315, "plot ident_a axes x1y2"))
	// Output:
	// &plot.PlotElementAxes{
	// · Case: 1,
	// · Token: example315.go:1:14: IDENTIFIER "axes",
	// · Token2: example315.go:1:19: IDENTIFIER "x1y2",
	// }
}

func ExamplePlotElementAxes_case2() {
	fmt.Println(exampleAST(316, "plot ident_a axes x2y1"))
	// Output:
	// &plot.PlotElementAxes{
	// · Case: 2,
	// · Token: example316.go:1:14: IDENTIFIER "axes",
	// · Token2: example316.go:1:19: IDENTIFIER "x2y1",
	// }
}

func ExamplePlotElementAxes_case3() {
	fmt.Println(exampleAST(317, "plot ident_a axes x2y2"))
	// Output:
	// &plot.PlotElementAxes{
	// · Case: 3,
	// · Token: example317.go:1:14: IDENTIFIER "axes",
	// · Token2: example317.go:1:19: IDENTIFIER "x2y2",
	// }
}

func ExamplePlotElementList() {
	fmt.Println(exampleAST(318, "plot ident_a"))
	// Output:
	// &plot.PlotElementList{
	// · PlotElementListItem: &plot.PlotElementListItem{
	// · · Case: 1,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example318.go:1:6: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExamplePlotElementList_case1() {
	fmt.Println(exampleAST(319, "splot ident_a , ident_b"))
	// Output:
	// &plot.PlotElementList{
	// · PlotElementList: &plot.PlotElementList{
	// · · Case: 1,
	// · · PlotElementListItem: &plot.PlotElementListItem{
	// · · · Case: 1,
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example319.go:1:17: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example319.go:1:15: ',' ",",
	// · },
	// · PlotElementListItem: &plot.PlotElementListItem{
	// · · Case: 1,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example319.go:1:7: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExamplePlotElementListItem() {
	fmt.Println(exampleAST(320, "plot newhistogram"))
	// Output:
	// &plot.PlotElementListItem{
	// · Token: example320.go:1:6: IDENTIFIER "newhistogram",
	// }
}

func ExamplePlotElementListItem_case1() {
	fmt.Println(exampleAST(321, "plot ident_a"))
	// Output:
	// &plot.PlotElementListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example321.go:1:6: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExamplePlotElementListItem_case2() {
	fmt.Println(exampleAST(322, "plot sample [ ] ident_a"))
	// Output:
	// &plot.PlotElementListItem{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example322.go:1:17: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Ranges: &plot.Ranges{
	// · · Range: &plot.Range{
	// · · · Case: 2,
	// · · · Token: example322.go:1:13: '[' "[",
	// · · · Token2: example322.go:1:15: ']' "]",
	// · · },
	// · },
	// · Token: example322.go:1:6: IDENTIFIER "sample",
	// }
}

func ExamplePlotElementModifiersList() {
	fmt.Println(exampleAST(323, "plot ident_a binary"))
	// Output:
	// &plot.PlotElementModifiersList{
	// · PlotElementModifiersListItem: &plot.PlotElementModifiersListItem{
	// · · Case: 6,
	// · · DatafileModifiersListItem: &plot.DatafileModifiersListItem{
	// · · · Token: example323.go:1:14: IDENTIFIER "binary",
	// · · },
	// · },
	// }
}

func ExamplePlotElementModifiersList_case1() {
	fmt.Println(exampleAST(324, "plot ident_a binary binary"))
	// Output:
	// &plot.PlotElementModifiersList{
	// · PlotElementModifiersList: &plot.PlotElementModifiersList{
	// · · Case: 1,
	// · · PlotElementModifiersListItem: &plot.PlotElementModifiersListItem{
	// · · · Case: 6,
	// · · · DatafileModifiersListItem: &plot.DatafileModifiersListItem{
	// · · · · Token: example324.go:1:21: IDENTIFIER "binary",
	// · · · },
	// · · },
	// · },
	// · PlotElementModifiersListItem: &plot.PlotElementModifiersListItem{
	// · · Case: 6,
	// · · DatafileModifiersListItem: &plot.DatafileModifiersListItem{
	// · · · Token: example324.go:1:14: IDENTIFIER "binary",
	// · · },
	// · },
	// }
}

func ExamplePlotElementModifiersListItem() {
	fmt.Println(exampleAST(325, "plot ident_a axes x1y1"))
	// Output:
	// &plot.PlotElementModifiersListItem{
	// · PlotElementAxes: &plot.PlotElementAxes{
	// · · Token: example325.go:1:14: IDENTIFIER "axes",
	// · · Token2: example325.go:1:19: IDENTIFIER "x1y1",
	// · },
	// }
}

func ExamplePlotElementModifiersListItem_case1() {
	fmt.Println(exampleAST(326, "plot ident_a columnheader"))
	// Output:
	// &plot.PlotElementModifiersListItem{
	// · Case: 1,
	// · PlotElementTitle: &plot.PlotElementTitle{
	// · · Case: 1,
	// · · Token: example326.go:1:14: IDENTIFIER "columnheader",
	// · },
	// }
}

func ExamplePlotElementModifiersListItem_case2() {
	fmt.Println(exampleAST(327, "plot ident_a w boxerrorbars"))
	// Output:
	// &plot.PlotElementModifiersListItem{
	// · Case: 2,
	// · PlotElementStyle: &plot.PlotElementStyle{
	// · · Token: example327.go:1:16: IDENTIFIER "boxerrorbars",
	// · },
	// · Token: example327.go:1:14: IDENTIFIER "w",
	// }
}

func ExamplePlotElementModifiersListItem_case3() {
	fmt.Println(exampleAST(328, "plot ident_a with boxerrorbars"))
	// Output:
	// &plot.PlotElementModifiersListItem{
	// · Case: 3,
	// · PlotElementStyle: &plot.PlotElementStyle{
	// · · Token: example328.go:1:19: IDENTIFIER "boxerrorbars",
	// · },
	// · Token: example328.go:1:14: IDENTIFIER "with",
	// }
}

func ExamplePlotElementModifiersListItem_case4() {
	fmt.Println(exampleAST(329, "plot ident_a nocontours"))
	// Output:
	// &plot.PlotElementModifiersListItem{
	// · Case: 4,
	// · LineStyleListItem: &plot.LineStyleListItem{
	// · · Case: 15,
	// · · Token: example329.go:1:14: IDENTIFIER "nocontours",
	// · },
	// }
}

func ExamplePlotElementModifiersListItem_case5() {
	fmt.Println(exampleAST(330, "plot ident_a whiskerbars"))
	// Output:
	// &plot.PlotElementModifiersListItem{
	// · Case: 5,
	// · Token: example330.go:1:14: IDENTIFIER "whiskerbars",
	// }
}

func ExamplePlotElementModifiersListItem_case6() {
	fmt.Println(exampleAST(331, "plot ident_a binary"))
	// Output:
	// &plot.PlotElementModifiersListItem{
	// · Case: 6,
	// · DatafileModifiersListItem: &plot.DatafileModifiersListItem{
	// · · Token: example331.go:1:14: IDENTIFIER "binary",
	// · },
	// }
}

func ExamplePlotElementModifiersListOpt() {
	fmt.Println(exampleAST(332, "plot ident_a") == (*PlotElementModifiersListOpt)(nil))
	// Output:
	// true
}

func ExamplePlotElementModifiersListOpt_case1() {
	fmt.Println(exampleAST(333, "plot ident_a binary"))
	// Output:
	// &plot.PlotElementModifiersListOpt{
	// · PlotElementModifiersList: &plot.PlotElementModifiersList{
	// · · PlotElementModifiersListItem: &plot.PlotElementModifiersListItem{
	// · · · Case: 6,
	// · · · DatafileModifiersListItem: &plot.DatafileModifiersListItem{
	// · · · · Token: example333.go:1:14: IDENTIFIER "binary",
	// · · · },
	// · · },
	// · },
	// }
}

func ExamplePlotElementStyle() {
	fmt.Println(exampleAST(334, "plot ident_a with boxerrorbars"))
	// Output:
	// &plot.PlotElementStyle{
	// · Token: example334.go:1:19: IDENTIFIER "boxerrorbars",
	// }
}

func ExamplePlotElementStyle_case01() {
	fmt.Println(exampleAST(335, "plot ident_a w boxes"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 1,
	// · Token: example335.go:1:16: IDENTIFIER "boxes",
	// }
}

func ExamplePlotElementStyle_case02() {
	fmt.Println(exampleAST(336, "plot ident_a with boxplot"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 2,
	// · Token: example336.go:1:19: IDENTIFIER "boxplot",
	// }
}

func ExamplePlotElementStyle_case03() {
	fmt.Println(exampleAST(337, "plot ident_a w boxxyerrorbars"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 3,
	// · Token: example337.go:1:16: IDENTIFIER "boxxyerrorbars",
	// }
}

func ExamplePlotElementStyle_case04() {
	fmt.Println(exampleAST(338, "plot ident_a with candlesticks"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 4,
	// · Token: example338.go:1:19: IDENTIFIER "candlesticks",
	// }
}

func ExamplePlotElementStyle_case05() {
	fmt.Println(exampleAST(339, "plot ident_a w circles"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 5,
	// · Token: example339.go:1:16: IDENTIFIER "circles",
	// }
}

func ExamplePlotElementStyle_case06() {
	fmt.Println(exampleAST(340, "plot ident_a with dots"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 6,
	// · Token: example340.go:1:19: IDENTIFIER "dots",
	// }
}

func ExamplePlotElementStyle_case07() {
	fmt.Println(exampleAST(341, "plot ident_a w ellipses"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 7,
	// · Token: example341.go:1:16: IDENTIFIER "ellipses",
	// }
}

func ExamplePlotElementStyle_case08() {
	fmt.Println(exampleAST(342, "plot ident_a w e"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 8,
	// · Token: example342.go:1:16: IDENTIFIER "e",
	// }
}

func ExamplePlotElementStyle_case09() {
	fmt.Println(exampleAST(343, "plot ident_a with errorbars"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 9,
	// · Token: example343.go:1:19: IDENTIFIER "errorbars",
	// }
}

func ExamplePlotElementStyle_case10() {
	fmt.Println(exampleAST(344, "plot ident_a with errorlines"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 10,
	// · Token: example344.go:1:19: IDENTIFIER "errorlines",
	// }
}

func ExamplePlotElementStyle_case11() {
	fmt.Println(exampleAST(345, "plot ident_a w filledcurves"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 11,
	// · Token: example345.go:1:16: IDENTIFIER "filledcurves",
	// }
}

func ExamplePlotElementStyle_case12() {
	fmt.Println(exampleAST(346, "plot ident_a w financebars"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 12,
	// · Token: example346.go:1:16: IDENTIFIER "financebars",
	// }
}

func ExamplePlotElementStyle_case13() {
	fmt.Println(exampleAST(347, "plot ident_a w fsteps"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 13,
	// · Token: example347.go:1:16: IDENTIFIER "fsteps",
	// }
}

func ExamplePlotElementStyle_case14() {
	fmt.Println(exampleAST(348, "plot ident_a w histeps"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 14,
	// · Token: example348.go:1:16: IDENTIFIER "histeps",
	// }
}

func ExamplePlotElementStyle_case15() {
	fmt.Println(exampleAST(349, "plot ident_a with his"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 15,
	// · Token: example349.go:1:19: IDENTIFIER "his",
	// }
}

func ExamplePlotElementStyle_case16() {
	fmt.Println(exampleAST(350, "plot ident_a with histogram"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 16,
	// · Token: example350.go:1:19: IDENTIFIER "histogram",
	// }
}

func ExamplePlotElementStyle_case17() {
	fmt.Println(exampleAST(351, "plot ident_a w histograms"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 17,
	// · Token: example351.go:1:16: IDENTIFIER "histograms",
	// }
}

func ExamplePlotElementStyle_case18() {
	fmt.Println(exampleAST(352, "plot ident_a with image"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 18,
	// · Token: example352.go:1:19: IDENTIFIER "image",
	// }
}

func ExamplePlotElementStyle_case19() {
	fmt.Println(exampleAST(353, "plot ident_a with image pixels"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 19,
	// · Token: example353.go:1:19: IDENTIFIER "image",
	// · Token2: example353.go:1:25: IDENTIFIER "pixels",
	// }
}

func ExamplePlotElementStyle_case20() {
	fmt.Println(exampleAST(354, "plot ident_a w impulses"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 20,
	// · Token: example354.go:1:16: IDENTIFIER "impulses",
	// }
}

func ExamplePlotElementStyle_case21() {
	fmt.Println(exampleAST(355, "plot ident_a w labels"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 21,
	// · Token: example355.go:1:16: IDENTIFIER "labels",
	// }
}

func ExamplePlotElementStyle_case22() {
	fmt.Println(exampleAST(356, "plot ident_a w labels back"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 22,
	// · PlotElementStyleLabelsSpecList: &plot.PlotElementStyleLabelsSpecList{
	// · · PlotElementStyleLabelsSpecListItem: &plot.PlotElementStyleLabelsSpecListItem{
	// · · · Case: 10,
	// · · · Token: example356.go:1:23: IDENTIFIER "back",
	// · · },
	// · },
	// · Token: example356.go:1:16: IDENTIFIER "labels",
	// }
}

func ExamplePlotElementStyle_case23() {
	fmt.Println(exampleAST(357, "plot ident_a w l"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 23,
	// · Token: example357.go:1:16: IDENTIFIER "l",
	// }
}

func ExamplePlotElementStyle_case24() {
	fmt.Println(exampleAST(358, "plot ident_a with line"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 24,
	// · Token: example358.go:1:19: IDENTIFIER "line",
	// }
}

func ExamplePlotElementStyle_case25() {
	fmt.Println(exampleAST(359, "plot ident_a with lines"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 25,
	// · Token: example359.go:1:19: IDENTIFIER "lines",
	// }
}

func ExamplePlotElementStyle_case26() {
	fmt.Println(exampleAST(360, "plot ident_a w lp"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 26,
	// · Token: example360.go:1:16: IDENTIFIER "lp",
	// }
}

func ExamplePlotElementStyle_case27() {
	fmt.Println(exampleAST(361, "plot ident_a with linespoints"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 27,
	// · Token: example361.go:1:19: IDENTIFIER "linespoints",
	// }
}

func ExamplePlotElementStyle_case28() {
	fmt.Println(exampleAST(362, "plot ident_a w parallel"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 28,
	// · Token: example362.go:1:16: IDENTIFIER "parallel",
	// }
}

func ExamplePlotElementStyle_case29() {
	fmt.Println(exampleAST(363, "plot ident_a w parallelaxes"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 29,
	// · Token: example363.go:1:16: IDENTIFIER "parallelaxes",
	// }
}

func ExamplePlotElementStyle_case30() {
	fmt.Println(exampleAST(364, "plot ident_a w pm3d"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 30,
	// · Token: example364.go:1:16: IDENTIFIER "pm3d",
	// }
}

func ExamplePlotElementStyle_case31() {
	fmt.Println(exampleAST(365, "plot ident_a w points"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 31,
	// · Token: example365.go:1:16: IDENTIFIER "points",
	// }
}

func ExamplePlotElementStyle_case32() {
	fmt.Println(exampleAST(366, "plot ident_a with rgbalpha"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 32,
	// · Token: example366.go:1:19: IDENTIFIER "rgbalpha",
	// }
}

func ExamplePlotElementStyle_case33() {
	fmt.Println(exampleAST(367, "plot ident_a w rgbimage"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 33,
	// · Token: example367.go:1:16: IDENTIFIER "rgbimage",
	// }
}

func ExamplePlotElementStyle_case34() {
	fmt.Println(exampleAST(368, "plot ident_a w steps"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 34,
	// · Token: example368.go:1:16: IDENTIFIER "steps",
	// }
}

func ExamplePlotElementStyle_case35() {
	fmt.Println(exampleAST(369, "plot ident_a w surface"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 35,
	// · Token: example369.go:1:16: IDENTIFIER "surface",
	// }
}

func ExamplePlotElementStyle_case36() {
	fmt.Println(exampleAST(370, "plot ident_a w vectors"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 36,
	// · Token: example370.go:1:16: IDENTIFIER "vectors",
	// }
}

func ExamplePlotElementStyle_case37() {
	fmt.Println(exampleAST(371, "plot ident_a w xerr"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 37,
	// · Token: example371.go:1:16: IDENTIFIER "xerr",
	// }
}

func ExamplePlotElementStyle_case38() {
	fmt.Println(exampleAST(372, "plot ident_a with xerrorbar"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 38,
	// · Token: example372.go:1:19: IDENTIFIER "xerrorbar",
	// }
}

func ExamplePlotElementStyle_case39() {
	fmt.Println(exampleAST(373, "plot ident_a w xerrorlines"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 39,
	// · Token: example373.go:1:16: IDENTIFIER "xerrorlines",
	// }
}

func ExamplePlotElementStyle_case40() {
	fmt.Println(exampleAST(374, "plot ident_a w xyerr"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 40,
	// · Token: example374.go:1:16: IDENTIFIER "xyerr",
	// }
}

func ExamplePlotElementStyle_case41() {
	fmt.Println(exampleAST(375, "plot ident_a w xyerrorbars"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 41,
	// · Token: example375.go:1:16: IDENTIFIER "xyerrorbars",
	// }
}

func ExamplePlotElementStyle_case42() {
	fmt.Println(exampleAST(376, "plot ident_a w xyerrorlines"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 42,
	// · Token: example376.go:1:16: IDENTIFIER "xyerrorlines",
	// }
}

func ExamplePlotElementStyle_case43() {
	fmt.Println(exampleAST(377, "plot ident_a w yerr"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 43,
	// · Token: example377.go:1:16: IDENTIFIER "yerr",
	// }
}

func ExamplePlotElementStyle_case44() {
	fmt.Println(exampleAST(378, "plot ident_a w yerrorbars"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 44,
	// · Token: example378.go:1:16: IDENTIFIER "yerrorbars",
	// }
}

func ExamplePlotElementStyle_case45() {
	fmt.Println(exampleAST(379, "plot ident_a w yerrorlines"))
	// Output:
	// &plot.PlotElementStyle{
	// · Case: 45,
	// · Token: example379.go:1:16: IDENTIFIER "yerrorlines",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecList() {
	fmt.Println(exampleAST(402, "plot ident_a w filledcurves above"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecList{
	// · PlotElementStyleFilledcurvesSpecListItem: &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · · Case: 1,
	// · · Token: example402.go:1:29: IDENTIFIER "above",
	// · },
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecList_case1() {
	fmt.Println(exampleAST(403, "plot ident_a w filledcurves above above"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecList{
	// · PlotElementStyleFilledcurvesSpecList: &plot.PlotElementStyleFilledcurvesSpecList{
	// · · Case: 1,
	// · · PlotElementStyleFilledcurvesSpecListItem: &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · · · Case: 1,
	// · · · Token: example403.go:1:35: IDENTIFIER "above",
	// · · },
	// · },
	// · PlotElementStyleFilledcurvesSpecListItem: &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · · Case: 1,
	// · · Token: example403.go:1:29: IDENTIFIER "above",
	// · },
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem() {
	fmt.Println(exampleAST(404, "plot ident_a w filledcurves closed"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Token: example404.go:1:29: IDENTIFIER "closed",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem_case01() {
	fmt.Println(exampleAST(405, "plot ident_a w filledcurves above"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Case: 1,
	// · Token: example405.go:1:29: IDENTIFIER "above",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem_case02() {
	fmt.Println(exampleAST(406, "plot ident_a w filledcurves below"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Case: 2,
	// · Token: example406.go:1:29: IDENTIFIER "below",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem_case03() {
	fmt.Println(exampleAST(407, "plot ident_a w filledcurves x1"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Case: 3,
	// · Token: example407.go:1:29: IDENTIFIER "x1",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem_case04() {
	fmt.Println(exampleAST(408, "plot ident_a w filledcurves x2"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Case: 4,
	// · Token: example408.go:1:29: IDENTIFIER "x2",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem_case05() {
	fmt.Println(exampleAST(409, "plot ident_a w filledcurves y"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Case: 5,
	// · Token: example409.go:1:29: IDENTIFIER "y",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem_case06() {
	fmt.Println(exampleAST(410, "plot ident_a w filledcurves y1"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Case: 6,
	// · Token: example410.go:1:29: IDENTIFIER "y1",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem_case07() {
	fmt.Println(exampleAST(411, "plot ident_a w filledcurves y2"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Case: 7,
	// · Token: example411.go:1:29: IDENTIFIER "y2",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem_case08() {
	fmt.Println(exampleAST(412, "plot ident_a w filledcurves r"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Case: 8,
	// · Token: example412.go:1:29: IDENTIFIER "r",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem_case09() {
	fmt.Println(exampleAST(413, "plot ident_a w filledcurves x1 = ident_b"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Case: 9,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example413.go:1:34: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example413.go:1:29: IDENTIFIER "x1",
	// · Token2: example413.go:1:32: '=' "=",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem_case10() {
	fmt.Println(exampleAST(414, "plot ident_a w filledcurves x2 = ident_b"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example414.go:1:34: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example414.go:1:29: IDENTIFIER "x2",
	// · Token2: example414.go:1:32: '=' "=",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem_case11() {
	fmt.Println(exampleAST(415, "plot ident_a w filledcurves y = ident_b"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example415.go:1:33: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example415.go:1:29: IDENTIFIER "y",
	// · Token2: example415.go:1:31: '=' "=",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem_case12() {
	fmt.Println(exampleAST(416, "plot ident_a w filledcurves y1 = ident_b"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Case: 12,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example416.go:1:34: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example416.go:1:29: IDENTIFIER "y1",
	// · Token2: example416.go:1:32: '=' "=",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem_case13() {
	fmt.Println(exampleAST(417, "plot ident_a w filledcurves y2 = ident_b"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Case: 13,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example417.go:1:34: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example417.go:1:29: IDENTIFIER "y2",
	// · Token2: example417.go:1:32: '=' "=",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem_case14() {
	fmt.Println(exampleAST(418, "plot ident_a w filledcurves r = ident_b"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Case: 14,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example418.go:1:33: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example418.go:1:29: IDENTIFIER "r",
	// · Token2: example418.go:1:31: '=' "=",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListItem_case15() {
	fmt.Println(exampleAST(419, "plot ident_a w filledcurves xy = ident_b , ident_c"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example419.go:1:34: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example419.go:1:44: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example419.go:1:29: IDENTIFIER "xy",
	// · Token2: example419.go:1:32: '=' "=",
	// · Token3: example419.go:1:42: ',' ",",
	// }
}

func ExamplePlotElementStyleFilledcurvesSpecListOpt() {
	fmt.Println(exampleAST(420, "plot ident_a w filledcurves") == (*PlotElementStyleFilledcurvesSpecListOpt)(nil))
	// Output:
	// true
}

func ExamplePlotElementStyleFilledcurvesSpecListOpt_case1() {
	fmt.Println(exampleAST(421, "plot ident_a w filledcurves above"))
	// Output:
	// &plot.PlotElementStyleFilledcurvesSpecListOpt{
	// · PlotElementStyleFilledcurvesSpecList: &plot.PlotElementStyleFilledcurvesSpecList{
	// · · PlotElementStyleFilledcurvesSpecListItem: &plot.PlotElementStyleFilledcurvesSpecListItem{
	// · · · Case: 1,
	// · · · Token: example421.go:1:29: IDENTIFIER "above",
	// · · },
	// · },
	// }
}

func ExamplePlotElementStyleHistogramsList() {
	fmt.Println(exampleAST(422, "set style histogram boxed"))
	// Output:
	// &plot.PlotElementStyleHistogramsList{
	// · PlotElementStyleHistogramsListItem: &plot.PlotElementStyleHistogramsListItem{
	// · · Case: 14,
	// · · Token: example422.go:1:21: IDENTIFIER "boxed",
	// · },
	// }
}

func ExamplePlotElementStyleHistogramsList_case1() {
	fmt.Println(exampleAST(423, "set style histogram boxed boxed"))
	// Output:
	// &plot.PlotElementStyleHistogramsList{
	// · PlotElementStyleHistogramsList: &plot.PlotElementStyleHistogramsList{
	// · · Case: 1,
	// · · PlotElementStyleHistogramsListItem: &plot.PlotElementStyleHistogramsListItem{
	// · · · Case: 14,
	// · · · Token: example423.go:1:27: IDENTIFIER "boxed",
	// · · },
	// · },
	// · PlotElementStyleHistogramsListItem: &plot.PlotElementStyleHistogramsListItem{
	// · · Case: 14,
	// · · Token: example423.go:1:21: IDENTIFIER "boxed",
	// · },
	// }
}

func ExamplePlotElementStyleHistogramsListItem() {
	fmt.Println(exampleAST(424, "set style histogram cluster"))
	// Output:
	// &plot.PlotElementStyleHistogramsListItem{
	// · Token: example424.go:1:21: IDENTIFIER "cluster",
	// }
}

func ExamplePlotElementStyleHistogramsListItem_case01() {
	fmt.Println(exampleAST(425, "set style histogram clustered"))
	// Output:
	// &plot.PlotElementStyleHistogramsListItem{
	// · Case: 1,
	// · Token: example425.go:1:21: IDENTIFIER "clustered",
	// }
}

func ExamplePlotElementStyleHistogramsListItem_case02() {
	fmt.Println(exampleAST(426, "set style histogram gap ident_a"))
	// Output:
	// &plot.PlotElementStyleHistogramsListItem{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example426.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example426.go:1:21: IDENTIFIER "gap",
	// }
}

func ExamplePlotElementStyleHistogramsListItem_case03() {
	fmt.Println(exampleAST(427, "set style histogram gap ident_a ident_b"))
	// Output:
	// &plot.PlotElementStyleHistogramsListItem{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example427.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example427.go:1:33: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example427.go:1:21: IDENTIFIER "gap",
	// }
}

func ExamplePlotElementStyleHistogramsListItem_case04() {
	fmt.Println(exampleAST(428, "set style histogram errorbars"))
	// Output:
	// &plot.PlotElementStyleHistogramsListItem{
	// · Case: 4,
	// · Token: example428.go:1:21: IDENTIFIER "errorbars",
	// }
}

func ExamplePlotElementStyleHistogramsListItem_case05() {
	fmt.Println(exampleAST(429, "set style histogram rows"))
	// Output:
	// &plot.PlotElementStyleHistogramsListItem{
	// · Case: 5,
	// · Token: example429.go:1:21: IDENTIFIER "rows",
	// }
}

func ExamplePlotElementStyleHistogramsListItem_case06() {
	fmt.Println(exampleAST(430, "set style histogram rowstacked"))
	// Output:
	// &plot.PlotElementStyleHistogramsListItem{
	// · Case: 6,
	// · Token: example430.go:1:21: IDENTIFIER "rowstacked",
	// }
}

func ExamplePlotElementStyleHistogramsListItem_case07() {
	fmt.Println(exampleAST(431, "set style histogram columns"))
	// Output:
	// &plot.PlotElementStyleHistogramsListItem{
	// · Case: 7,
	// · Token: example431.go:1:21: IDENTIFIER "columns",
	// }
}

func ExamplePlotElementStyleHistogramsListItem_case08() {
	fmt.Println(exampleAST(432, "set style histogram columnstacked"))
	// Output:
	// &plot.PlotElementStyleHistogramsListItem{
	// · Case: 8,
	// · Token: example432.go:1:21: IDENTIFIER "columnstacked",
	// }
}

func ExamplePlotElementStyleHistogramsListItem_case09() {
	fmt.Println(exampleAST(433, "set style histogram title"))
	// Output:
	// &plot.PlotElementStyleHistogramsListItem{
	// · Case: 9,
	// · Token: example433.go:1:21: IDENTIFIER "title",
	// }
}

func ExamplePlotElementStyleHistogramsListItem_case10() {
	fmt.Println(exampleAST(434, "set style histogram font ident_a"))
	// Output:
	// &plot.PlotElementStyleHistogramsListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example434.go:1:26: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example434.go:1:21: IDENTIFIER "font",
	// }
}

func ExamplePlotElementStyleHistogramsListItem_case11() {
	fmt.Println(exampleAST(435, "set style histogram tc ident_a"))
	// Output:
	// &plot.PlotElementStyleHistogramsListItem{
	// · Case: 11,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example435.go:1:24: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example435.go:1:21: IDENTIFIER "tc",
	// }
}

func ExamplePlotElementStyleHistogramsListItem_case12() {
	fmt.Println(exampleAST(436, "set style histogram textcolor ident_a"))
	// Output:
	// &plot.PlotElementStyleHistogramsListItem{
	// · Case: 12,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example436.go:1:31: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example436.go:1:21: IDENTIFIER "textcolor",
	// }
}

func ExamplePlotElementStyleHistogramsListItem_case13() {
	fmt.Println(exampleAST(437, "set style histogram offset ident_a"))
	// Output:
	// &plot.PlotElementStyleHistogramsListItem{
	// · Case: 13,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example437.go:1:28: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example437.go:1:21: IDENTIFIER "offset",
	// }
}

func ExamplePlotElementStyleHistogramsListItem_case14() {
	fmt.Println(exampleAST(438, "set style histogram boxed"))
	// Output:
	// &plot.PlotElementStyleHistogramsListItem{
	// · Case: 14,
	// · Token: example438.go:1:21: IDENTIFIER "boxed",
	// }
}

func ExamplePlotElementStyleHistogramsListOpt() {
	fmt.Println(exampleAST(439, "plot ident_a with his") == (*PlotElementStyleHistogramsListOpt)(nil))
	// Output:
	// true
}

func ExamplePlotElementStyleHistogramsListOpt_case1() {
	fmt.Println(exampleAST(440, "set style histogram boxed"))
	// Output:
	// &plot.PlotElementStyleHistogramsListOpt{
	// · PlotElementStyleHistogramsList: &plot.PlotElementStyleHistogramsList{
	// · · PlotElementStyleHistogramsListItem: &plot.PlotElementStyleHistogramsListItem{
	// · · · Case: 14,
	// · · · Token: example440.go:1:21: IDENTIFIER "boxed",
	// · · },
	// · },
	// }
}

func ExamplePlotElementStyleLabelsSpecList() {
	fmt.Println(exampleAST(380, "plot ident_a w labels back"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecList{
	// · PlotElementStyleLabelsSpecListItem: &plot.PlotElementStyleLabelsSpecListItem{
	// · · Case: 10,
	// · · Token: example380.go:1:23: IDENTIFIER "back",
	// · },
	// }
}

func ExamplePlotElementStyleLabelsSpecList_case1() {
	fmt.Println(exampleAST(381, "plot ident_a w labels back back"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecList{
	// · PlotElementStyleLabelsSpecList: &plot.PlotElementStyleLabelsSpecList{
	// · · Case: 1,
	// · · PlotElementStyleLabelsSpecListItem: &plot.PlotElementStyleLabelsSpecListItem{
	// · · · Case: 10,
	// · · · Token: example381.go:1:28: IDENTIFIER "back",
	// · · },
	// · },
	// · PlotElementStyleLabelsSpecListItem: &plot.PlotElementStyleLabelsSpecListItem{
	// · · Case: 10,
	// · · Token: example381.go:1:23: IDENTIFIER "back",
	// · },
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem() {
	fmt.Println(exampleAST(382, "plot ident_a w labels at ident_b"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example382.go:1:26: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example382.go:1:23: IDENTIFIER "at",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case01() {
	fmt.Println(exampleAST(383, "plot ident_a w labels left"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 1,
	// · Token: example383.go:1:23: IDENTIFIER "left",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case02() {
	fmt.Println(exampleAST(384, "plot ident_a w labels center"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 2,
	// · Token: example384.go:1:23: IDENTIFIER "center",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case03() {
	fmt.Println(exampleAST(385, "plot ident_a w labels right"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 3,
	// · Token: example385.go:1:23: IDENTIFIER "right",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case04() {
	fmt.Println(exampleAST(386, "plot ident_a w labels norotate"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 4,
	// · Token: example386.go:1:23: IDENTIFIER "norotate",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case05() {
	fmt.Println(exampleAST(387, "plot ident_a w labels rotate"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 5,
	// · Token: example387.go:1:23: IDENTIFIER "rotate",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case06() {
	fmt.Println(exampleAST(388, "plot ident_a w labels rotate by ident_b"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example388.go:1:33: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example388.go:1:23: IDENTIFIER "rotate",
	// · Token2: example388.go:1:30: IDENTIFIER "by",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case07() {
	fmt.Println(exampleAST(389, "plot ident_a w labels font ident_b"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example389.go:1:28: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example389.go:1:23: IDENTIFIER "font",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case08() {
	fmt.Println(exampleAST(390, "plot ident_a w labels noenhanced"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 8,
	// · Token: example390.go:1:23: IDENTIFIER "noenhanced",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case09() {
	fmt.Println(exampleAST(391, "plot ident_a w labels front"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 9,
	// · Token: example391.go:1:23: IDENTIFIER "front",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case10() {
	fmt.Println(exampleAST(392, "plot ident_a w labels back"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 10,
	// · Token: example392.go:1:23: IDENTIFIER "back",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case11() {
	fmt.Println(exampleAST(393, "plot ident_a w labels textcolor ident_b"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 11,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example393.go:1:33: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example393.go:1:23: IDENTIFIER "textcolor",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case12() {
	fmt.Println(exampleAST(394, "plot ident_a w labels point"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 12,
	// · Token: example394.go:1:23: IDENTIFIER "point",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case13() {
	fmt.Println(exampleAST(395, "plot ident_a w labels nopoint"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 13,
	// · Token: example395.go:1:23: IDENTIFIER "nopoint",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case14() {
	fmt.Println(exampleAST(396, "plot ident_a w labels offset ident_b"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 14,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example396.go:1:30: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example396.go:1:23: IDENTIFIER "offset",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case15() {
	fmt.Println(exampleAST(397, "plot ident_a w labels offset ident_b , ident_c"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example397.go:1:30: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example397.go:1:40: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example397.go:1:23: IDENTIFIER "offset",
	// · Token2: example397.go:1:38: ',' ",",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case16() {
	fmt.Println(exampleAST(398, "plot ident_a w labels boxed"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 16,
	// · Token: example398.go:1:23: IDENTIFIER "boxed",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case17() {
	fmt.Println(exampleAST(399, "plot ident_a w labels hypertext"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 17,
	// · Token: example399.go:1:23: IDENTIFIER "hypertext",
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case18() {
	fmt.Println(exampleAST(400, "plot ident_a w labels nocontours"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 18,
	// · LineStyleListItem: &plot.LineStyleListItem{
	// · · Case: 15,
	// · · Token: example400.go:1:23: IDENTIFIER "nocontours",
	// · },
	// }
}

func ExamplePlotElementStyleLabelsSpecListItem_case19() {
	fmt.Println(exampleAST(401, "plot ident_a w labels notitle"))
	// Output:
	// &plot.PlotElementStyleLabelsSpecListItem{
	// · Case: 19,
	// · Token: example401.go:1:23: IDENTIFIER "notitle",
	// }
}

func ExamplePlotElementStyleVectorsSpecOpt() {
	fmt.Println(exampleAST(441, "plot ident_a w vectors") == (*PlotElementStyleVectorsSpecOpt)(nil))
	// Output:
	// true
}

func ExamplePlotElementStyleVectorsSpecOpt_case1() {
	fmt.Println(exampleAST(442, "plot ident_a w vectors arrowstyle variable"))
	// Output:
	// &plot.PlotElementStyleVectorsSpecOpt{
	// · Case: 1,
	// · Token: example442.go:1:24: IDENTIFIER "arrowstyle",
	// · Token2: example442.go:1:35: IDENTIFIER "variable",
	// }
}

func ExamplePlotElementStyleVectorsSpecOpt_case2() {
	fmt.Println(exampleAST(443, "plot ident_a w vectors arrowstyle ident_b"))
	// Output:
	// &plot.PlotElementStyleVectorsSpecOpt{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example443.go:1:35: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example443.go:1:24: IDENTIFIER "arrowstyle",
	// }
}

func ExamplePlotElementStyleVectorsSpecOpt_case3() {
	fmt.Println(exampleAST(444, "plot ident_a w vectors as variable"))
	// Output:
	// &plot.PlotElementStyleVectorsSpecOpt{
	// · Case: 3,
	// · Token: example444.go:1:24: IDENTIFIER "as",
	// · Token2: example444.go:1:27: IDENTIFIER "variable",
	// }
}

func ExamplePlotElementStyleVectorsSpecOpt_case4() {
	fmt.Println(exampleAST(445, "plot ident_a w vectors as ident_b"))
	// Output:
	// &plot.PlotElementStyleVectorsSpecOpt{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example445.go:1:27: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example445.go:1:24: IDENTIFIER "as",
	// }
}

func ExamplePlotElementStyleVectorsSpecOpt_case5() {
	fmt.Println(exampleAST(446, "plot ident_a w vectors empty"))
	// Output:
	// &plot.PlotElementStyleVectorsSpecOpt{
	// · ArrowStyleList: &plot.ArrowStyleList{
	// · · ArrowStyleListItem: &plot.ArrowStyleListItem{
	// · · · Case: 6,
	// · · · Token: example446.go:1:24: IDENTIFIER "empty",
	// · · },
	// · },
	// · Case: 5,
	// }
}

func ExamplePlotElementTitle() {
	fmt.Println(exampleAST(447, "plot ident_a notitle"))
	// Output:
	// &plot.PlotElementTitle{
	// · Token: example447.go:1:14: IDENTIFIER "notitle",
	// }
}

func ExamplePlotElementTitle_case1() {
	fmt.Println(exampleAST(448, "plot ident_a columnheader"))
	// Output:
	// &plot.PlotElementTitle{
	// · Case: 1,
	// · Token: example448.go:1:14: IDENTIFIER "columnheader",
	// }
}

func ExamplePlotElementTitle_case2() {
	fmt.Println(exampleAST(449, "plot ident_a t ident_b"))
	// Output:
	// &plot.PlotElementTitle{
	// · Case: 2,
	// · PlotElementTitleSpec: &plot.PlotElementTitleSpec{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example449.go:1:16: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example449.go:1:14: IDENTIFIER "t",
	// }
}

func ExamplePlotElementTitle_case3() {
	fmt.Println(exampleAST(450, "plot ident_a ti ident_b"))
	// Output:
	// &plot.PlotElementTitle{
	// · Case: 3,
	// · PlotElementTitleSpec: &plot.PlotElementTitleSpec{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example450.go:1:17: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example450.go:1:14: IDENTIFIER "ti",
	// }
}

func ExamplePlotElementTitle_case4() {
	fmt.Println(exampleAST(451, "plot ident_a title ident_b"))
	// Output:
	// &plot.PlotElementTitle{
	// · Case: 4,
	// · PlotElementTitleSpec: &plot.PlotElementTitleSpec{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example451.go:1:20: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example451.go:1:14: IDENTIFIER "title",
	// }
}

func ExamplePlotElementTitlePosOpt() {
	fmt.Println(exampleAST(455, "plot ident_a columnheader") == (*PlotElementTitlePosOpt)(nil))
	// Output:
	// true
}

func ExamplePlotElementTitlePosOpt_case1() {
	fmt.Println(exampleAST(456, "plot ident_a columnheader at beginning"))
	// Output:
	// &plot.PlotElementTitlePosOpt{
	// · Case: 1,
	// · Token: example456.go:1:27: IDENTIFIER "at",
	// · Token2: example456.go:1:30: IDENTIFIER "beginning",
	// }
}

func ExamplePlotElementTitlePosOpt_case2() {
	fmt.Println(exampleAST(457, "plot ident_a columnheader at end"))
	// Output:
	// &plot.PlotElementTitlePosOpt{
	// · Case: 2,
	// · Token: example457.go:1:27: IDENTIFIER "at",
	// · Token2: example457.go:1:30: IDENTIFIER "end",
	// }
}

func ExamplePlotElementTitleSpec() {
	fmt.Println(exampleAST(452, "plot ident_a ti ident_b"))
	// Output:
	// &plot.PlotElementTitleSpec{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example452.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExamplePlotElementTitleSpec_case1() {
	fmt.Println(exampleAST(453, "plot ident_a t column ( ident_b )"))
	// Output:
	// &plot.PlotElementTitleSpec{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example453.go:1:25: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example453.go:1:16: IDENTIFIER "column",
	// · Token2: example453.go:1:23: '(' "(",
	// · Token3: example453.go:1:33: ')' ")",
	// }
}

func ExamplePlotElementTitleSpec_case2() {
	fmt.Println(exampleAST(454, "plot ident_a t columnheader ( ident_b )"))
	// Output:
	// &plot.PlotElementTitleSpec{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example454.go:1:31: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example454.go:1:16: IDENTIFIER "columnheader",
	// · Token2: example454.go:1:29: '(' "(",
	// · Token3: example454.go:1:39: ')' ")",
	// }
}

func ExamplePlotNewhistogramSpecList() {
	fmt.Println(exampleAST(458, "plot newhistogram ident_a"))
	// Output:
	// &plot.PlotNewhistogramSpecList{
	// · PlotNewhistogramSpecListItem: &plot.PlotNewhistogramSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example458.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExamplePlotNewhistogramSpecList_case1() {
	fmt.Println(exampleAST(459, "plot newhistogram ident_a ident_b"))
	// Output:
	// &plot.PlotNewhistogramSpecList{
	// · PlotNewhistogramSpecList: &plot.PlotNewhistogramSpecList{
	// · · Case: 1,
	// · · PlotNewhistogramSpecListItem: &plot.PlotNewhistogramSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example459.go:1:27: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · PlotNewhistogramSpecListItem: &plot.PlotNewhistogramSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example459.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExamplePlotNewhistogramSpecListItem() {
	fmt.Println(exampleAST(460, "plot newhistogram ident_a"))
	// Output:
	// &plot.PlotNewhistogramSpecListItem{
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example460.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExamplePlotNewhistogramSpecListItem_case1() {
	fmt.Println(exampleAST(461, "plot newhistogram font ident_a"))
	// Output:
	// &plot.PlotNewhistogramSpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example461.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example461.go:1:19: IDENTIFIER "font",
	// }
}

func ExamplePlotNewhistogramSpecListItem_case2() {
	fmt.Println(exampleAST(462, "plot newhistogram tc ident_a"))
	// Output:
	// &plot.PlotNewhistogramSpecListItem{
	// · Case: 2,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example462.go:1:22: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example462.go:1:19: IDENTIFIER "tc",
	// }
}

func ExamplePlotNewhistogramSpecListItem_case3() {
	fmt.Println(exampleAST(463, "plot newhistogram textcolor ident_a"))
	// Output:
	// &plot.PlotNewhistogramSpecListItem{
	// · Case: 3,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example463.go:1:29: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example463.go:1:19: IDENTIFIER "textcolor",
	// }
}

func ExamplePlotNewhistogramSpecListItem_case4() {
	fmt.Println(exampleAST(464, "plot newhistogram lt ident_a"))
	// Output:
	// &plot.PlotNewhistogramSpecListItem{
	// · Case: 4,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example464.go:1:22: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example464.go:1:19: IDENTIFIER "lt",
	// }
}

func ExamplePlotNewhistogramSpecListItem_case5() {
	fmt.Println(exampleAST(465, "plot newhistogram linetype ident_a"))
	// Output:
	// &plot.PlotNewhistogramSpecListItem{
	// · Case: 5,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example465.go:1:28: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example465.go:1:19: IDENTIFIER "linetype",
	// }
}

func ExamplePlotNewhistogramSpecListItem_case6() {
	fmt.Println(exampleAST(466, "plot newhistogram fs bo"))
	// Output:
	// &plot.PlotNewhistogramSpecListItem{
	// · Case: 6,
	// · SetStyleFillSpecList: &plot.SetStyleFillSpecList{
	// · · SetStyleFillSpecListItem: &plot.SetStyleFillSpecListItem{
	// · · · Case: 5,
	// · · · Token: example466.go:1:22: IDENTIFIER "bo",
	// · · },
	// · },
	// · Token: example466.go:1:19: IDENTIFIER "fs",
	// }
}

func ExamplePlotNewhistogramSpecListItem_case7() {
	fmt.Println(exampleAST(467, "plot newhistogram fillstyle bo"))
	// Output:
	// &plot.PlotNewhistogramSpecListItem{
	// · Case: 7,
	// · SetStyleFillSpecList: &plot.SetStyleFillSpecList{
	// · · SetStyleFillSpecListItem: &plot.SetStyleFillSpecListItem{
	// · · · Case: 5,
	// · · · Token: example467.go:1:29: IDENTIFIER "bo",
	// · · },
	// · },
	// · Token: example467.go:1:19: IDENTIFIER "fillstyle",
	// }
}

func ExamplePlotNewhistogramSpecListItem_case8() {
	fmt.Println(exampleAST(468, "plot newhistogram at ident_a"))
	// Output:
	// &plot.PlotNewhistogramSpecListItem{
	// · Case: 8,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example468.go:1:22: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example468.go:1:19: IDENTIFIER "at",
	// }
}

func ExamplePlotNewhistogramSpecListOpt() {
	fmt.Println(exampleAST(469, "plot newhistogram") == (*PlotNewhistogramSpecListOpt)(nil))
	// Output:
	// true
}

func ExamplePlotNewhistogramSpecListOpt_case1() {
	fmt.Println(exampleAST(470, "plot newhistogram ident_a"))
	// Output:
	// &plot.PlotNewhistogramSpecListOpt{
	// · PlotNewhistogramSpecList: &plot.PlotNewhistogramSpecList{
	// · · PlotNewhistogramSpecListItem: &plot.PlotNewhistogramSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example470.go:1:19: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExamplePlotWindow() {
	fmt.Println(exampleAST(471, "lower pm"))
	// Output:
	// &plot.PlotWindow{
	// · Token: example471.go:1:7: IDENTIFIER "pm",
	// }
}

func ExamplePlotWindow_case1() {
	fmt.Println(exampleAST(472, "lower win"))
	// Output:
	// &plot.PlotWindow{
	// · Case: 1,
	// · Token: example472.go:1:7: IDENTIFIER "win",
	// }
}

func ExamplePlotWindow_case2() {
	fmt.Println(exampleAST(473, "lower wxt"))
	// Output:
	// &plot.PlotWindow{
	// · Case: 2,
	// · Token: example473.go:1:7: IDENTIFIER "wxt",
	// }
}

func ExamplePlotWindow_case3() {
	fmt.Println(exampleAST(474, "lower x11"))
	// Output:
	// &plot.PlotWindow{
	// · Case: 3,
	// · Token: example474.go:1:7: IDENTIFIER "x11",
	// }
}

func ExamplePosition() {
	fmt.Println(exampleAST(475, "plot newhistogram at ident_a"))
	// Output:
	// &plot.Position{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example475.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExamplePosition_case1() {
	fmt.Println(exampleAST(476, "plot newhistogram at ident_a , ident_b"))
	// Output:
	// &plot.Position{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example476.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example476.go:1:32: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example476.go:1:30: ',' ",",
	// }
}

func ExamplePosition_case2() {
	fmt.Println(exampleAST(477, "plot newhistogram at ident_a , ident_b , ident_c"))
	// Output:
	// &plot.Position{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example477.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example477.go:1:32: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression3: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example477.go:1:42: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example477.go:1:30: ',' ",",
	// · Token2: example477.go:1:40: ',' ",",
	// }
}

func ExamplePosition_case3() {
	fmt.Println(exampleAST(478, "plot newhistogram at ident_a , ident_b , ident_c , ident_d"))
	// Output:
	// &plot.Position{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example478.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example478.go:1:32: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression3: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example478.go:1:42: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression4: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example478.go:1:52: IDENTIFIER "ident_d",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example478.go:1:30: ',' ",",
	// · Token2: example478.go:1:40: ',' ",",
	// · Token3: example478.go:1:50: ',' ",",
	// }
}

func ExamplePrimaryExpression() {
	fmt.Println(exampleAST(479, "load ident_a"))
	// Output:
	// &plot.PrimaryExpression{
	// · Operand: &plot.Operand{
	// · · Case: 1,
	// · · Token: example479.go:1:6: IDENTIFIER "ident_a",
	// · },
	// }
}

func ExamplePrimaryExpression_case1() {
	fmt.Println(exampleAST(480, "load ident_a ( ident_b )"))
	// Output:
	// &plot.PrimaryExpression{
	// · Case: 1,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example480.go:1:16: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example480.go:1:6: IDENTIFIER "ident_a",
	// · Token2: example480.go:1:14: '(' "(",
	// · Token3: example480.go:1:24: ')' ")",
	// }
}

func ExamplePrimaryExpression_case2() {
	fmt.Println(exampleAST(481, "bind ident_a [ : ]"))
	// Output:
	// &plot.PrimaryExpression{
	// · Case: 2,
	// · PrimaryExpression: &plot.PrimaryExpression{
	// · · Operand: &plot.Operand{
	// · · · Case: 1,
	// · · · Token: example481.go:1:6: IDENTIFIER "ident_a",
	// · · },
	// · },
	// · Token: example481.go:1:14: '[' "[",
	// · Token2: example481.go:1:16: ':' ":",
	// · Token3: example481.go:1:18: ']' "]",
	// }
}

func ExamplePrimaryNonParenthesizedExpression() {
	fmt.Println(exampleAST(482, "set cbtics ident_a"))
	// Output:
	// &plot.PrimaryNonParenthesizedExpression{
	// · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · Token: example482.go:1:12: IDENTIFIER "ident_a",
	// · },
	// }
}

func ExamplePrimaryNonParenthesizedExpression_case1() {
	fmt.Println(exampleAST(483, "set ytics ident_a ( ident_b )"))
	// Output:
	// &plot.PrimaryNonParenthesizedExpression{
	// · Case: 1,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example483.go:1:21: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example483.go:1:11: IDENTIFIER "ident_a",
	// · Token2: example483.go:1:19: '(' "(",
	// · Token3: example483.go:1:29: ')' ")",
	// }
}

func ExamplePrimaryNonParenthesizedExpression_case2() {
	fmt.Println(exampleAST(484, "set ztics ident_a [ : ]"))
	// Output:
	// &plot.PrimaryNonParenthesizedExpression{
	// · Case: 2,
	// · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · Token: example484.go:1:11: IDENTIFIER "ident_a",
	// · · },
	// · },
	// · Token: example484.go:1:19: '[' "[",
	// · Token2: example484.go:1:21: ':' ":",
	// · Token3: example484.go:1:23: ']' "]",
	// }
}

func ExamplePrimaryNonStringExpression() {
	fmt.Println(exampleAST(485, "set rtics ( ident_a !"))
	// Output:
	// &plot.PrimaryNonStringExpression{
	// · NonStringOperand: &plot.NonStringOperand{
	// · · Case: 1,
	// · · Token: example485.go:1:13: IDENTIFIER "ident_a",
	// · },
	// }
}

func ExamplePrimaryNonStringExpression_case1() {
	fmt.Println(exampleAST(486, "set rtics ( ident_a ( ident_b ) !"))
	// Output:
	// &plot.PrimaryNonStringExpression{
	// · Case: 1,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example486.go:1:23: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example486.go:1:13: IDENTIFIER "ident_a",
	// · Token2: example486.go:1:21: '(' "(",
	// · Token3: example486.go:1:31: ')' ")",
	// }
}

func ExamplePrimaryNonStringExpression_case2() {
	fmt.Println(exampleAST(487, "set rtics ( ident_a [ : ] !"))
	// Output:
	// &plot.PrimaryNonStringExpression{
	// · Case: 2,
	// · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · NonStringOperand: &plot.NonStringOperand{
	// · · · Case: 1,
	// · · · Token: example487.go:1:13: IDENTIFIER "ident_a",
	// · · },
	// · },
	// · Token: example487.go:1:21: '[' "[",
	// · Token2: example487.go:1:23: ':' ":",
	// · Token3: example487.go:1:25: ']' "]",
	// }
}

func ExamplePrint() {
	fmt.Println(exampleAST(488, "print ident_a"))
	// Output:
	// &plot.Print{
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example488.go:1:7: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example488.go:1:1: IDENTIFIER "print",
	// }
}

func ExampleRange() {
	fmt.Println(exampleAST(489, "stats [ : ]"))
	// Output:
	// &plot.Range{
	// · Token: example489.go:1:7: '[' "[",
	// · Token2: example489.go:1:9: ':' ":",
	// · Token3: example489.go:1:11: ']' "]",
	// }
}

func ExampleRange_case1() {
	fmt.Println(exampleAST(490, "stats [ : * ]"))
	// Output:
	// &plot.Range{
	// · Case: 1,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example490.go:1:11: '*' "*",
	// · },
	// · Token: example490.go:1:7: '[' "[",
	// · Token2: example490.go:1:9: ':' ":",
	// · Token3: example490.go:1:13: ']' "]",
	// }
}

func ExampleRange_case2() {
	fmt.Println(exampleAST(491, "stats [ ]"))
	// Output:
	// &plot.Range{
	// · Case: 2,
	// · Token: example491.go:1:7: '[' "[",
	// · Token2: example491.go:1:9: ']' "]",
	// }
}

func ExampleRange_case3() {
	fmt.Println(exampleAST(492, "stats [ * : ]"))
	// Output:
	// &plot.Range{
	// · Case: 3,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example492.go:1:9: '*' "*",
	// · },
	// · Token: example492.go:1:7: '[' "[",
	// · Token2: example492.go:1:11: ':' ":",
	// · Token3: example492.go:1:13: ']' "]",
	// }
}

func ExampleRange_case4() {
	fmt.Println(exampleAST(493, "stats [ * : * ]"))
	// Output:
	// &plot.Range{
	// · Case: 4,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example493.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example493.go:1:13: '*' "*",
	// · },
	// · Token: example493.go:1:7: '[' "[",
	// · Token2: example493.go:1:11: ':' ":",
	// · Token3: example493.go:1:15: ']' "]",
	// }
}

func ExampleRangeExpression() {
	fmt.Println(exampleAST(494, "stats [ * %"))
	// Output:
	// &plot.RangeExpression{
	// · Token: example494.go:1:9: '*' "*",
	// }
}

func ExampleRangeExpression_case01() {
	fmt.Println(exampleAST(495, "stats [ * != * &"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 1,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example495.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example495.go:1:14: '*' "*",
	// · },
	// · Token: example495.go:1:11: NOTEQ "!=",
	// }
}

func ExampleRangeExpression_case02() {
	fmt.Println(exampleAST(496, "stats [ * && * :"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 2,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example496.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example496.go:1:14: '*' "*",
	// · },
	// · Token: example496.go:1:11: ANDAND "&&",
	// }
}

func ExampleRangeExpression_case03() {
	fmt.Println(exampleAST(497, "stats [ * ** * %"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 3,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example497.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example497.go:1:14: '*' "*",
	// · },
	// · Token: example497.go:1:11: EXP "**",
	// }
}

func ExampleRangeExpression_case04() {
	fmt.Println(exampleAST(498, "stats [ * << * &"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 4,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example498.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example498.go:1:14: '*' "*",
	// · },
	// · Token: example498.go:1:11: LSH "<<",
	// }
}

func ExampleRangeExpression_case05() {
	fmt.Println(exampleAST(499, "stats [ * <= * &"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 5,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example499.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example499.go:1:14: '*' "*",
	// · },
	// · Token: example499.go:1:11: LEQ "<=",
	// }
}

func ExampleRangeExpression_case06() {
	fmt.Println(exampleAST(500, "stats [ * == * &"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 6,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example500.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example500.go:1:14: '*' "*",
	// · },
	// · Token: example500.go:1:11: EQEQ "==",
	// }
}

func ExampleRangeExpression_case07() {
	fmt.Println(exampleAST(501, "stats [ * >= * &"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 7,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example501.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example501.go:1:14: '*' "*",
	// · },
	// · Token: example501.go:1:11: GEQ ">=",
	// }
}

func ExampleRangeExpression_case08() {
	fmt.Println(exampleAST(502, "stats [ * >> * &"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 8,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example502.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example502.go:1:14: '*' "*",
	// · },
	// · Token: example502.go:1:11: RSH ">>",
	// }
}

func ExampleRangeExpression_case09() {
	fmt.Println(exampleAST(503, "stats [ * eq * &"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 9,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example503.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example503.go:1:14: '*' "*",
	// · },
	// · Token: example503.go:1:11: IDENTIFIER "eq",
	// }
}

func ExampleRangeExpression_case10() {
	fmt.Println(exampleAST(504, "stats [ * ne * &"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 10,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example504.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example504.go:1:14: '*' "*",
	// · },
	// · Token: example504.go:1:11: IDENTIFIER "ne",
	// }
}

func ExampleRangeExpression_case11() {
	fmt.Println(exampleAST(505, "stats [ * || * :"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 11,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example505.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example505.go:1:14: '*' "*",
	// · },
	// · Token: example505.go:1:11: OROR "||",
	// }
}

func ExampleRangeExpression_case12() {
	fmt.Println(exampleAST(506, "stats [ * % * %"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 12,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example506.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example506.go:1:13: '*' "*",
	// · },
	// · Token: example506.go:1:11: '%' "%",
	// }
}

func ExampleRangeExpression_case13() {
	fmt.Println(exampleAST(507, "stats [ * & * &"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 13,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example507.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example507.go:1:13: '*' "*",
	// · },
	// · Token: example507.go:1:11: '&' "&",
	// }
}

func ExampleRangeExpression_case14() {
	fmt.Println(exampleAST(508, "stats [ * * * %"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 14,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example508.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example508.go:1:13: '*' "*",
	// · },
	// · Token: example508.go:1:11: '*' "*",
	// }
}

func ExampleRangeExpression_case15() {
	fmt.Println(exampleAST(509, "stats [ * + * &"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 15,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example509.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example509.go:1:13: '*' "*",
	// · },
	// · Token: example509.go:1:11: '+' "+",
	// }
}

func ExampleRangeExpression_case16() {
	fmt.Println(exampleAST(510, "stats [ * - * &"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 16,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example510.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example510.go:1:13: '*' "*",
	// · },
	// · Token: example510.go:1:11: '-' "-",
	// }
}

func ExampleRangeExpression_case17() {
	fmt.Println(exampleAST(511, "stats [ * . * &"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 17,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example511.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example511.go:1:13: '*' "*",
	// · },
	// · Token: example511.go:1:11: '.' ".",
	// }
}

func ExampleRangeExpression_case18() {
	fmt.Println(exampleAST(512, "stats [ * / * %"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 18,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example512.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example512.go:1:13: '*' "*",
	// · },
	// · Token: example512.go:1:11: '/' "/",
	// }
}

func ExampleRangeExpression_case19() {
	fmt.Println(exampleAST(513, "stats [ * < * &"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 19,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example513.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example513.go:1:13: '*' "*",
	// · },
	// · Token: example513.go:1:11: '<' "<",
	// }
}

func ExampleRangeExpression_case20() {
	fmt.Println(exampleAST(514, "stats [ * = * :"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 20,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example514.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example514.go:1:13: '*' "*",
	// · },
	// · Token: example514.go:1:11: '=' "=",
	// }
}

func ExampleRangeExpression_case21() {
	fmt.Println(exampleAST(515, "stats [ * > * &"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 21,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example515.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example515.go:1:13: '*' "*",
	// · },
	// · Token: example515.go:1:11: '>' ">",
	// }
}

func ExampleRangeExpression_case22() {
	fmt.Println(exampleAST(516, "stats [ * ? * : * :"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 22,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example516.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example516.go:1:13: '*' "*",
	// · },
	// · RangeExpression3: &plot.RangeExpression{
	// · · Token: example516.go:1:17: '*' "*",
	// · },
	// · Token: example516.go:1:11: '?' "?",
	// · Token2: example516.go:1:15: ':' ":",
	// }
}

func ExampleRangeExpression_case23() {
	fmt.Println(exampleAST(517, "stats [ * ^ * :"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 23,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example517.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example517.go:1:13: '*' "*",
	// · },
	// · Token: example517.go:1:11: '^' "^",
	// }
}

func ExampleRangeExpression_case24() {
	fmt.Println(exampleAST(518, "stats [ * | * :"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 24,
	// · RangeExpression: &plot.RangeExpression{
	// · · Token: example518.go:1:9: '*' "*",
	// · },
	// · RangeExpression2: &plot.RangeExpression{
	// · · Token: example518.go:1:13: '*' "*",
	// · },
	// · Token: example518.go:1:11: '|' "|",
	// }
}

func ExampleRangeExpression_case25() {
	fmt.Println(exampleAST(519, "stats [ ident_a %"))
	// Output:
	// &plot.RangeExpression{
	// · Case: 25,
	// · UnaryExpression: &plot.UnaryExpression{
	// · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · Operand: &plot.Operand{
	// · · · · Case: 1,
	// · · · · Token: example519.go:1:9: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleRanges() {
	fmt.Println(exampleAST(520, "stats [ ] !"))
	// Output:
	// &plot.Ranges{
	// · Range: &plot.Range{
	// · · Case: 2,
	// · · Token: example520.go:1:7: '[' "[",
	// · · Token2: example520.go:1:9: ']' "]",
	// · },
	// }
}

func ExampleRanges_case1() {
	fmt.Println(exampleAST(521, "stats [ ] [ ] !"))
	// Output:
	// &plot.Ranges{
	// · Case: 1,
	// · Range: &plot.Range{
	// · · Case: 2,
	// · · Token: example521.go:1:11: '[' "[",
	// · · Token2: example521.go:1:13: ']' "]",
	// · },
	// · Ranges: &plot.Ranges{
	// · · Range: &plot.Range{
	// · · · Case: 2,
	// · · · Token: example521.go:1:7: '[' "[",
	// · · · Token2: example521.go:1:9: ']' "]",
	// · · },
	// · },
	// }
}

func ExampleRangesOpt() {
	fmt.Println(exampleAST(522, "fit !") == (*RangesOpt)(nil))
	// Output:
	// true
}

func ExampleRangesOpt_case1() {
	fmt.Println(exampleAST(523, "stats [ ] !"))
	// Output:
	// &plot.RangesOpt{
	// · Ranges: &plot.Ranges{
	// · · Range: &plot.Range{
	// · · · Case: 2,
	// · · · Token: example523.go:1:7: '[' "[",
	// · · · Token2: example523.go:1:9: ']' "]",
	// · · },
	// · },
	// }
}

func ExampleReplot() {
	fmt.Println(exampleAST(524, "rep"))
	// Output:
	// &plot.Replot{
	// · Token: example524.go:1:1: IDENTIFIER "rep",
	// }
}

func ExampleReplot_case1() {
	fmt.Println(exampleAST(525, "rep ident_a"))
	// Output:
	// &plot.Replot{
	// · Case: 1,
	// · PlotElementList: &plot.PlotElementList{
	// · · PlotElementListItem: &plot.PlotElementListItem{
	// · · · Case: 1,
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example525.go:1:5: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example525.go:1:1: IDENTIFIER "rep",
	// }
}

func ExampleReplot_case2() {
	fmt.Println(exampleAST(526, "replot"))
	// Output:
	// &plot.Replot{
	// · Case: 2,
	// · Token: example526.go:1:1: IDENTIFIER "replot",
	// }
}

func ExampleReplot_case3() {
	fmt.Println(exampleAST(527, "replot ident_a"))
	// Output:
	// &plot.Replot{
	// · Case: 3,
	// · PlotElementList: &plot.PlotElementList{
	// · · PlotElementListItem: &plot.PlotElementListItem{
	// · · · Case: 1,
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example527.go:1:8: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example527.go:1:1: IDENTIFIER "replot",
	// }
}

func ExampleReread() {
	fmt.Println(exampleAST(528, "reread"))
	// Output:
	// &plot.Reread{
	// · Token: example528.go:1:1: IDENTIFIER "reread",
	// }
}

func ExampleReset() {
	fmt.Println(exampleAST(529, "reset"))
	// Output:
	// &plot.Reset{
	// · Token: example529.go:1:1: IDENTIFIER "reset",
	// }
}

func ExampleReset_case1() {
	fmt.Println(exampleAST(530, "reset bind"))
	// Output:
	// &plot.Reset{
	// · Case: 1,
	// · Token: example530.go:1:1: IDENTIFIER "reset",
	// · Token2: example530.go:1:7: IDENTIFIER "bind",
	// }
}

func ExampleReset_case2() {
	fmt.Println(exampleAST(531, "reset errors"))
	// Output:
	// &plot.Reset{
	// · Case: 2,
	// · Token: example531.go:1:1: IDENTIFIER "reset",
	// · Token2: example531.go:1:7: IDENTIFIER "errors",
	// }
}

func ExampleReset_case3() {
	fmt.Println(exampleAST(532, "reset session"))
	// Output:
	// &plot.Reset{
	// · Case: 3,
	// · Token: example532.go:1:1: IDENTIFIER "reset",
	// · Token2: example532.go:1:7: IDENTIFIER "session",
	// }
}

func ExampleSet() {
	fmt.Println(exampleAST(533, "set auto"))
	// Output:
	// &plot.Set{
	// · SetSpec: &plot.SetSpec{
	// · · Case: 3,
	// · · Token: example533.go:1:5: IDENTIFIER "auto",
	// · },
	// · Token: example533.go:1:1: IDENTIFIER "set",
	// }
}

func ExampleSetAnglesSpec() {
	fmt.Println(exampleAST(677, "set angle degrees"))
	// Output:
	// &plot.SetAnglesSpec{
	// · Token: example677.go:1:11: IDENTIFIER "degrees",
	// }
}

func ExampleSetAnglesSpec_case1() {
	fmt.Println(exampleAST(678, "set angles radians"))
	// Output:
	// &plot.SetAnglesSpec{
	// · Case: 1,
	// · Token: example678.go:1:12: IDENTIFIER "radians",
	// }
}

func ExampleSetAnglesSpec_case2() {
	fmt.Println(exampleAST(679, "set angle rad"))
	// Output:
	// &plot.SetAnglesSpec{
	// · Case: 2,
	// · Token: example679.go:1:11: IDENTIFIER "rad",
	// }
}

func ExampleSetArrowSpec() {
	fmt.Println(exampleAST(680, "set arrow arrowstyle"))
	// Output:
	// &plot.SetArrowSpec{
	// · SetArrowSpecList: &plot.SetArrowSpecList{
	// · · SetArrowSpecListItem: &plot.SetArrowSpecListItem{
	// · · · Case: 17,
	// · · · Token: example680.go:1:11: IDENTIFIER "arrowstyle",
	// · · },
	// · },
	// }
}

func ExampleSetArrowSpecList() {
	fmt.Println(exampleAST(681, "set arrow arrowstyle"))
	// Output:
	// &plot.SetArrowSpecList{
	// · SetArrowSpecListItem: &plot.SetArrowSpecListItem{
	// · · Case: 17,
	// · · Token: example681.go:1:11: IDENTIFIER "arrowstyle",
	// · },
	// }
}

func ExampleSetArrowSpecList_case1() {
	fmt.Println(exampleAST(682, "set arrow arrowstyle arrowstyle"))
	// Output:
	// &plot.SetArrowSpecList{
	// · SetArrowSpecList: &plot.SetArrowSpecList{
	// · · Case: 1,
	// · · SetArrowSpecListItem: &plot.SetArrowSpecListItem{
	// · · · Case: 17,
	// · · · Token: example682.go:1:22: IDENTIFIER "arrowstyle",
	// · · },
	// · },
	// · SetArrowSpecListItem: &plot.SetArrowSpecListItem{
	// · · Case: 17,
	// · · Token: example682.go:1:11: IDENTIFIER "arrowstyle",
	// · },
	// }
}

func ExampleSetArrowSpecListItem() {
	fmt.Println(exampleAST(683, "set arrow head"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Token: example683.go:1:11: IDENTIFIER "head",
	// }
}

func ExampleSetArrowSpecListItem_case01() {
	fmt.Println(exampleAST(684, "set arrow nohead"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 1,
	// · Token: example684.go:1:11: IDENTIFIER "nohead",
	// }
}

func ExampleSetArrowSpecListItem_case02() {
	fmt.Println(exampleAST(685, "set arrow backhead"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 2,
	// · Token: example685.go:1:11: IDENTIFIER "backhead",
	// }
}

func ExampleSetArrowSpecListItem_case03() {
	fmt.Println(exampleAST(686, "set arrow heads"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 3,
	// · Token: example686.go:1:11: IDENTIFIER "heads",
	// }
}

func ExampleSetArrowSpecListItem_case04() {
	fmt.Println(exampleAST(687, "set arrow size ident_a , ident_b"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example687.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example687.go:1:26: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example687.go:1:11: IDENTIFIER "size",
	// · Token2: example687.go:1:24: ',' ",",
	// }
}

func ExampleSetArrowSpecListItem_case05() {
	fmt.Println(exampleAST(688, "set arrow size ident_a , ident_b , ident_c"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 5,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example688.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example688.go:1:26: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression3: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example688.go:1:36: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example688.go:1:11: IDENTIFIER "size",
	// · Token2: example688.go:1:24: ',' ",",
	// · Token3: example688.go:1:34: ',' ",",
	// }
}

func ExampleSetArrowSpecListItem_case06() {
	fmt.Println(exampleAST(689, "set arrow fill"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 6,
	// · Token: example689.go:1:11: IDENTIFIER "fill",
	// }
}

func ExampleSetArrowSpecListItem_case07() {
	fmt.Println(exampleAST(690, "set arrow filled"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 7,
	// · Token: example690.go:1:11: IDENTIFIER "filled",
	// }
}

func ExampleSetArrowSpecListItem_case08() {
	fmt.Println(exampleAST(691, "set arrow nofilled"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 8,
	// · Token: example691.go:1:11: IDENTIFIER "nofilled",
	// }
}

func ExampleSetArrowSpecListItem_case09() {
	fmt.Println(exampleAST(692, "set arrow empty"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 9,
	// · Token: example692.go:1:11: IDENTIFIER "empty",
	// }
}

func ExampleSetArrowSpecListItem_case10() {
	fmt.Println(exampleAST(693, "set arrow noborder"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 10,
	// · Token: example693.go:1:11: IDENTIFIER "noborder",
	// }
}

func ExampleSetArrowSpecListItem_case11() {
	fmt.Println(exampleAST(694, "set arrow front"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 11,
	// · Token: example694.go:1:11: IDENTIFIER "front",
	// }
}

func ExampleSetArrowSpecListItem_case12() {
	fmt.Println(exampleAST(695, "set arrow back"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 12,
	// · Token: example695.go:1:11: IDENTIFIER "back",
	// }
}

func ExampleSetArrowSpecListItem_case13() {
	fmt.Println(exampleAST(696, "set arrow nocontours"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 13,
	// · LineStyleListItem: &plot.LineStyleListItem{
	// · · Case: 15,
	// · · Token: example696.go:1:11: IDENTIFIER "nocontours",
	// · },
	// }
}

func ExampleSetArrowSpecListItem_case14() {
	fmt.Println(exampleAST(697, "set arrow from ident_a to ident_b"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 14,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example697.go:1:16: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Position2: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example697.go:1:27: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example697.go:1:11: IDENTIFIER "from",
	// · Token2: example697.go:1:24: IDENTIFIER "to",
	// }
}

func ExampleSetArrowSpecListItem_case15() {
	fmt.Println(exampleAST(698, "set arrow from ident_a rto ident_b"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 15,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example698.go:1:16: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Position2: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example698.go:1:28: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example698.go:1:11: IDENTIFIER "from",
	// · Token2: example698.go:1:24: IDENTIFIER "rto",
	// }
}

func ExampleSetArrowSpecListItem_case16() {
	fmt.Println(exampleAST(699, "set arrow from ident_a length ident_b angle ident_c"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 16,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example699.go:1:16: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Position2: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example699.go:1:31: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Position3: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example699.go:1:45: IDENTIFIER "ident_c",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example699.go:1:11: IDENTIFIER "from",
	// · Token2: example699.go:1:24: IDENTIFIER "length",
	// · Token3: example699.go:1:39: IDENTIFIER "angle",
	// }
}

func ExampleSetArrowSpecListItem_case17() {
	fmt.Println(exampleAST(700, "set arrow arrowstyle"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 17,
	// · Token: example700.go:1:11: IDENTIFIER "arrowstyle",
	// }
}

func ExampleSetArrowSpecListItem_case18() {
	fmt.Println(exampleAST(701, "set arrow as ident_a"))
	// Output:
	// &plot.SetArrowSpecListItem{
	// · Case: 18,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example701.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example701.go:1:11: IDENTIFIER "as",
	// }
}

func ExampleSetAutoscaleAxes() {
	fmt.Println(exampleAST(702, "set auto cb"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Token: example702.go:1:10: IDENTIFIER "cb",
	// }
}

func ExampleSetAutoscaleAxes_case01() {
	fmt.Println(exampleAST(703, "set auto cbfix"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 1,
	// · Token: example703.go:1:10: IDENTIFIER "cbfix",
	// }
}

func ExampleSetAutoscaleAxes_case02() {
	fmt.Println(exampleAST(704, "set auto cbfixmax"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 2,
	// · Token: example704.go:1:10: IDENTIFIER "cbfixmax",
	// }
}

func ExampleSetAutoscaleAxes_case03() {
	fmt.Println(exampleAST(705, "set auto cbfixmin"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 3,
	// · Token: example705.go:1:10: IDENTIFIER "cbfixmin",
	// }
}

func ExampleSetAutoscaleAxes_case04() {
	fmt.Println(exampleAST(706, "set auto cbmax"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 4,
	// · Token: example706.go:1:10: IDENTIFIER "cbmax",
	// }
}

func ExampleSetAutoscaleAxes_case05() {
	fmt.Println(exampleAST(707, "set auto cbmin"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 5,
	// · Token: example707.go:1:10: IDENTIFIER "cbmin",
	// }
}

func ExampleSetAutoscaleAxes_case06() {
	fmt.Println(exampleAST(708, "set auto x"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 6,
	// · Token: example708.go:1:10: IDENTIFIER "x",
	// }
}

func ExampleSetAutoscaleAxes_case07() {
	fmt.Println(exampleAST(709, "set autoscale x2"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 7,
	// · Token: example709.go:1:15: IDENTIFIER "x2",
	// }
}

func ExampleSetAutoscaleAxes_case08() {
	fmt.Println(exampleAST(710, "set auto x2fix"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 8,
	// · Token: example710.go:1:10: IDENTIFIER "x2fix",
	// }
}

func ExampleSetAutoscaleAxes_case09() {
	fmt.Println(exampleAST(711, "set auto x2fixmax"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 9,
	// · Token: example711.go:1:10: IDENTIFIER "x2fixmax",
	// }
}

func ExampleSetAutoscaleAxes_case10() {
	fmt.Println(exampleAST(712, "set auto x2fixmin"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 10,
	// · Token: example712.go:1:10: IDENTIFIER "x2fixmin",
	// }
}

func ExampleSetAutoscaleAxes_case11() {
	fmt.Println(exampleAST(713, "set auto x2max"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 11,
	// · Token: example713.go:1:10: IDENTIFIER "x2max",
	// }
}

func ExampleSetAutoscaleAxes_case12() {
	fmt.Println(exampleAST(714, "set auto x2min"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 12,
	// · Token: example714.go:1:10: IDENTIFIER "x2min",
	// }
}

func ExampleSetAutoscaleAxes_case13() {
	fmt.Println(exampleAST(715, "set auto xfix"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 13,
	// · Token: example715.go:1:10: IDENTIFIER "xfix",
	// }
}

func ExampleSetAutoscaleAxes_case14() {
	fmt.Println(exampleAST(716, "set auto xfixmax"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 14,
	// · Token: example716.go:1:10: IDENTIFIER "xfixmax",
	// }
}

func ExampleSetAutoscaleAxes_case15() {
	fmt.Println(exampleAST(717, "set auto xfixmin"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 15,
	// · Token: example717.go:1:10: IDENTIFIER "xfixmin",
	// }
}

func ExampleSetAutoscaleAxes_case16() {
	fmt.Println(exampleAST(718, "set auto xmax"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 16,
	// · Token: example718.go:1:10: IDENTIFIER "xmax",
	// }
}

func ExampleSetAutoscaleAxes_case17() {
	fmt.Println(exampleAST(719, "set auto xmin"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 17,
	// · Token: example719.go:1:10: IDENTIFIER "xmin",
	// }
}

func ExampleSetAutoscaleAxes_case18() {
	fmt.Println(exampleAST(720, "set auto xy"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 18,
	// · Token: example720.go:1:10: IDENTIFIER "xy",
	// }
}

func ExampleSetAutoscaleAxes_case19() {
	fmt.Println(exampleAST(721, "set auto xyfix"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 19,
	// · Token: example721.go:1:10: IDENTIFIER "xyfix",
	// }
}

func ExampleSetAutoscaleAxes_case20() {
	fmt.Println(exampleAST(722, "set auto xyfixmax"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 20,
	// · Token: example722.go:1:10: IDENTIFIER "xyfixmax",
	// }
}

func ExampleSetAutoscaleAxes_case21() {
	fmt.Println(exampleAST(723, "set auto xyfixmin"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 21,
	// · Token: example723.go:1:10: IDENTIFIER "xyfixmin",
	// }
}

func ExampleSetAutoscaleAxes_case22() {
	fmt.Println(exampleAST(724, "set auto y"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 22,
	// · Token: example724.go:1:10: IDENTIFIER "y",
	// }
}

func ExampleSetAutoscaleAxes_case23() {
	fmt.Println(exampleAST(725, "set auto y2"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 23,
	// · Token: example725.go:1:10: IDENTIFIER "y2",
	// }
}

func ExampleSetAutoscaleAxes_case24() {
	fmt.Println(exampleAST(726, "set auto y2fix"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 24,
	// · Token: example726.go:1:10: IDENTIFIER "y2fix",
	// }
}

func ExampleSetAutoscaleAxes_case25() {
	fmt.Println(exampleAST(727, "set auto y2fixmax"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 25,
	// · Token: example727.go:1:10: IDENTIFIER "y2fixmax",
	// }
}

func ExampleSetAutoscaleAxes_case26() {
	fmt.Println(exampleAST(728, "set auto y2fixmin"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 26,
	// · Token: example728.go:1:10: IDENTIFIER "y2fixmin",
	// }
}

func ExampleSetAutoscaleAxes_case27() {
	fmt.Println(exampleAST(729, "set auto y2max"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 27,
	// · Token: example729.go:1:10: IDENTIFIER "y2max",
	// }
}

func ExampleSetAutoscaleAxes_case28() {
	fmt.Println(exampleAST(730, "set auto y2min"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 28,
	// · Token: example730.go:1:10: IDENTIFIER "y2min",
	// }
}

func ExampleSetAutoscaleAxes_case29() {
	fmt.Println(exampleAST(731, "set autoscale yfix"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 29,
	// · Token: example731.go:1:15: IDENTIFIER "yfix",
	// }
}

func ExampleSetAutoscaleAxes_case30() {
	fmt.Println(exampleAST(732, "set auto yfixmax"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 30,
	// · Token: example732.go:1:10: IDENTIFIER "yfixmax",
	// }
}

func ExampleSetAutoscaleAxes_case31() {
	fmt.Println(exampleAST(733, "set auto yfixmin"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 31,
	// · Token: example733.go:1:10: IDENTIFIER "yfixmin",
	// }
}

func ExampleSetAutoscaleAxes_case32() {
	fmt.Println(exampleAST(734, "set auto ymax"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 32,
	// · Token: example734.go:1:10: IDENTIFIER "ymax",
	// }
}

func ExampleSetAutoscaleAxes_case33() {
	fmt.Println(exampleAST(735, "set auto ymin"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 33,
	// · Token: example735.go:1:10: IDENTIFIER "ymin",
	// }
}

func ExampleSetAutoscaleAxes_case34() {
	fmt.Println(exampleAST(736, "set auto z"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 34,
	// · Token: example736.go:1:10: IDENTIFIER "z",
	// }
}

func ExampleSetAutoscaleAxes_case35() {
	fmt.Println(exampleAST(737, "set auto zfix"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 35,
	// · Token: example737.go:1:10: IDENTIFIER "zfix",
	// }
}

func ExampleSetAutoscaleAxes_case36() {
	fmt.Println(exampleAST(738, "set auto zfixmax"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 36,
	// · Token: example738.go:1:10: IDENTIFIER "zfixmax",
	// }
}

func ExampleSetAutoscaleAxes_case37() {
	fmt.Println(exampleAST(739, "set auto zfixmin"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 37,
	// · Token: example739.go:1:10: IDENTIFIER "zfixmin",
	// }
}

func ExampleSetAutoscaleAxes_case38() {
	fmt.Println(exampleAST(740, "set auto zmax"))
	// Output:
	// &plot.SetAutoscaleAxes{
	// · Case: 38,
	// · Token: example740.go:1:10: IDENTIFIER "zmax",
	// }
}

func ExampleSetAutoscaleSpecList() {
	fmt.Println(exampleAST(741, "set auto cb"))
	// Output:
	// &plot.SetAutoscaleSpecList{
	// · SetAutoscaleSpecListItem: &plot.SetAutoscaleSpecListItem{
	// · · Case: 3,
	// · · SetAutoscaleAxes: &plot.SetAutoscaleAxes{
	// · · · Token: example741.go:1:10: IDENTIFIER "cb",
	// · · },
	// · },
	// }
}

func ExampleSetAutoscaleSpecList_case1() {
	fmt.Println(exampleAST(742, "set autoscale cb cb"))
	// Output:
	// &plot.SetAutoscaleSpecList{
	// · SetAutoscaleSpecList: &plot.SetAutoscaleSpecList{
	// · · Case: 1,
	// · · SetAutoscaleSpecListItem: &plot.SetAutoscaleSpecListItem{
	// · · · Case: 3,
	// · · · SetAutoscaleAxes: &plot.SetAutoscaleAxes{
	// · · · · Token: example742.go:1:18: IDENTIFIER "cb",
	// · · · },
	// · · },
	// · },
	// · SetAutoscaleSpecListItem: &plot.SetAutoscaleSpecListItem{
	// · · Case: 3,
	// · · SetAutoscaleAxes: &plot.SetAutoscaleAxes{
	// · · · Token: example742.go:1:15: IDENTIFIER "cb",
	// · · },
	// · },
	// }
}

func ExampleSetAutoscaleSpecListItem() {
	fmt.Println(exampleAST(745, "set auto fix"))
	// Output:
	// &plot.SetAutoscaleSpecListItem{
	// · Token: example745.go:1:10: IDENTIFIER "fix",
	// }
}

func ExampleSetAutoscaleSpecListItem_case1() {
	fmt.Println(exampleAST(746, "set auto keepfix"))
	// Output:
	// &plot.SetAutoscaleSpecListItem{
	// · Case: 1,
	// · Token: example746.go:1:10: IDENTIFIER "keepfix",
	// }
}

func ExampleSetAutoscaleSpecListItem_case2() {
	fmt.Println(exampleAST(747, "set auto noextend"))
	// Output:
	// &plot.SetAutoscaleSpecListItem{
	// · Case: 2,
	// · Token: example747.go:1:10: IDENTIFIER "noextend",
	// }
}

func ExampleSetAutoscaleSpecListItem_case3() {
	fmt.Println(exampleAST(748, "set auto cb"))
	// Output:
	// &plot.SetAutoscaleSpecListItem{
	// · Case: 3,
	// · SetAutoscaleAxes: &plot.SetAutoscaleAxes{
	// · · Token: example748.go:1:10: IDENTIFIER "cb",
	// · },
	// }
}

func ExampleSetAutoscaleSpecListOpt() {
	fmt.Println(exampleAST(743, "set auto") == (*SetAutoscaleSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetAutoscaleSpecListOpt_case1() {
	fmt.Println(exampleAST(744, "set autoscale cb"))
	// Output:
	// &plot.SetAutoscaleSpecListOpt{
	// · SetAutoscaleSpecList: &plot.SetAutoscaleSpecList{
	// · · SetAutoscaleSpecListItem: &plot.SetAutoscaleSpecListItem{
	// · · · Case: 3,
	// · · · SetAutoscaleAxes: &plot.SetAutoscaleAxes{
	// · · · · Token: example744.go:1:15: IDENTIFIER "cb",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetBarsSpecList() {
	fmt.Println(exampleAST(749, "set bars ident_a"))
	// Output:
	// &plot.SetBarsSpecList{
	// · SetBarsSpecListItem: &plot.SetBarsSpecListItem{
	// · · Case: 3,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example749.go:1:10: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetBarsSpecList_case1() {
	fmt.Println(exampleAST(750, "set bars ident_a ident_b"))
	// Output:
	// &plot.SetBarsSpecList{
	// · SetBarsSpecList: &plot.SetBarsSpecList{
	// · · Case: 1,
	// · · SetBarsSpecListItem: &plot.SetBarsSpecListItem{
	// · · · Case: 3,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example750.go:1:18: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetBarsSpecListItem: &plot.SetBarsSpecListItem{
	// · · Case: 3,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example750.go:1:10: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetBarsSpecListItem() {
	fmt.Println(exampleAST(751, "set bars small"))
	// Output:
	// &plot.SetBarsSpecListItem{
	// · Token: example751.go:1:10: IDENTIFIER "small",
	// }
}

func ExampleSetBarsSpecListItem_case1() {
	fmt.Println(exampleAST(752, "set bars large"))
	// Output:
	// &plot.SetBarsSpecListItem{
	// · Case: 1,
	// · Token: example752.go:1:10: IDENTIFIER "large",
	// }
}

func ExampleSetBarsSpecListItem_case2() {
	fmt.Println(exampleAST(753, "set bars fullwidth"))
	// Output:
	// &plot.SetBarsSpecListItem{
	// · Case: 2,
	// · Token: example753.go:1:10: IDENTIFIER "fullwidth",
	// }
}

func ExampleSetBarsSpecListItem_case3() {
	fmt.Println(exampleAST(754, "set bars ident_a"))
	// Output:
	// &plot.SetBarsSpecListItem{
	// · Case: 3,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example754.go:1:10: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetBarsSpecListItem_case4() {
	fmt.Println(exampleAST(755, "set bars front"))
	// Output:
	// &plot.SetBarsSpecListItem{
	// · Case: 4,
	// · Token: example755.go:1:10: IDENTIFIER "front",
	// }
}

func ExampleSetBarsSpecListItem_case5() {
	fmt.Println(exampleAST(756, "set bars back"))
	// Output:
	// &plot.SetBarsSpecListItem{
	// · Case: 5,
	// · Token: example756.go:1:10: IDENTIFIER "back",
	// }
}

func ExampleSetBarsSpecListOpt() {
	fmt.Println(exampleAST(757, "set bars") == (*SetBarsSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetBarsSpecListOpt_case1() {
	fmt.Println(exampleAST(758, "set bars ident_a"))
	// Output:
	// &plot.SetBarsSpecListOpt{
	// · SetBarsSpecList: &plot.SetBarsSpecList{
	// · · SetBarsSpecListItem: &plot.SetBarsSpecListItem{
	// · · · Case: 3,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example758.go:1:10: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetBmarginSpecOpt() {
	fmt.Println(exampleAST(759, "set bmargin") == (*SetBmarginSpecOpt)(nil))
	// Output:
	// true
}

func ExampleSetBmarginSpecOpt_case1() {
	fmt.Println(exampleAST(760, "set tmargin at screen ident_a"))
	// Output:
	// &plot.SetBmarginSpecOpt{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example760.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example760.go:1:13: IDENTIFIER "at",
	// · Token2: example760.go:1:16: IDENTIFIER "screen",
	// }
}

func ExampleSetBmarginSpecOpt_case2() {
	fmt.Println(exampleAST(761, "set rmargin ident_a"))
	// Output:
	// &plot.SetBmarginSpecOpt{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example761.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetBorderSpec() {
	fmt.Println(exampleAST(762, "set border 1 front"))
	// Output:
	// &plot.SetBorderSpec{
	// · ExpressionOpt: &plot.ExpressionOpt{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 2,
	// · · · · · · Token: example762.go:1:12: NUM_LIT "1",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetBorderSpecListOpt: &plot.SetBorderSpecListOpt{
	// · · SetBorderSpecList: &plot.SetBorderSpecList{
	// · · · SetBorderSpecListItem: &plot.SetBorderSpecListItem{
	// · · · · Token: example762.go:1:14: IDENTIFIER "front",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetBorderSpecList() {
	fmt.Println(exampleAST(763, "set border back"))
	// Output:
	// &plot.SetBorderSpecList{
	// · SetBorderSpecListItem: &plot.SetBorderSpecListItem{
	// · · Case: 1,
	// · · Token: example763.go:1:12: IDENTIFIER "back",
	// · },
	// }
}

func ExampleSetBorderSpecList_case1() {
	fmt.Println(exampleAST(764, "set border back back"))
	// Output:
	// &plot.SetBorderSpecList{
	// · SetBorderSpecList: &plot.SetBorderSpecList{
	// · · Case: 1,
	// · · SetBorderSpecListItem: &plot.SetBorderSpecListItem{
	// · · · Case: 1,
	// · · · Token: example764.go:1:17: IDENTIFIER "back",
	// · · },
	// · },
	// · SetBorderSpecListItem: &plot.SetBorderSpecListItem{
	// · · Case: 1,
	// · · Token: example764.go:1:12: IDENTIFIER "back",
	// · },
	// }
}

func ExampleSetBorderSpecListItem() {
	fmt.Println(exampleAST(765, "set border front"))
	// Output:
	// &plot.SetBorderSpecListItem{
	// · Token: example765.go:1:12: IDENTIFIER "front",
	// }
}

func ExampleSetBorderSpecListItem_case1() {
	fmt.Println(exampleAST(766, "set border back"))
	// Output:
	// &plot.SetBorderSpecListItem{
	// · Case: 1,
	// · Token: example766.go:1:12: IDENTIFIER "back",
	// }
}

func ExampleSetBorderSpecListItem_case2() {
	fmt.Println(exampleAST(767, "set border behind"))
	// Output:
	// &plot.SetBorderSpecListItem{
	// · Case: 2,
	// · Token: example767.go:1:12: IDENTIFIER "behind",
	// }
}

func ExampleSetBorderSpecListItem_case3() {
	fmt.Println(exampleAST(768, "set border nocontours"))
	// Output:
	// &plot.SetBorderSpecListItem{
	// · Case: 3,
	// · LineStyleListItem: &plot.LineStyleListItem{
	// · · Case: 15,
	// · · Token: example768.go:1:12: IDENTIFIER "nocontours",
	// · },
	// }
}

func ExampleSetBorderSpecListOpt() {
	fmt.Println(exampleAST(769, "set border") == (*SetBorderSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetBorderSpecListOpt_case1() {
	fmt.Println(exampleAST(770, "set border back"))
	// Output:
	// &plot.SetBorderSpecListOpt{
	// · SetBorderSpecList: &plot.SetBorderSpecList{
	// · · SetBorderSpecListItem: &plot.SetBorderSpecListItem{
	// · · · Case: 1,
	// · · · Token: example770.go:1:12: IDENTIFIER "back",
	// · · },
	// · },
	// }
}

func ExampleSetBoxwidthSpec() {
	fmt.Println(exampleAST(771, "set boxwidth ident_a"))
	// Output:
	// &plot.SetBoxwidthSpec{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example771.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetBoxwidthSpec_case1() {
	fmt.Println(exampleAST(772, "set boxwidth ident_a absolute"))
	// Output:
	// &plot.SetBoxwidthSpec{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example772.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example772.go:1:22: IDENTIFIER "absolute",
	// }
}

func ExampleSetBoxwidthSpec_case2() {
	fmt.Println(exampleAST(773, "set boxwidth ident_a relative"))
	// Output:
	// &plot.SetBoxwidthSpec{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example773.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example773.go:1:22: IDENTIFIER "relative",
	// }
}

func ExampleSetClipSpecOpt() {
	fmt.Println(exampleAST(774, "set clip") == (*SetClipSpecOpt)(nil))
	// Output:
	// true
}

func ExampleSetClipSpecOpt_case1() {
	fmt.Println(exampleAST(775, "set clip points"))
	// Output:
	// &plot.SetClipSpecOpt{
	// · Case: 1,
	// · Token: example775.go:1:10: IDENTIFIER "points",
	// }
}

func ExampleSetClipSpecOpt_case2() {
	fmt.Println(exampleAST(776, "set clip one"))
	// Output:
	// &plot.SetClipSpecOpt{
	// · Case: 2,
	// · Token: example776.go:1:10: IDENTIFIER "one",
	// }
}

func ExampleSetClipSpecOpt_case3() {
	fmt.Println(exampleAST(777, "set clip two"))
	// Output:
	// &plot.SetClipSpecOpt{
	// · Case: 3,
	// · Token: example777.go:1:10: IDENTIFIER "two",
	// }
}

func ExampleSetCntrlabelSpecList() {
	fmt.Println(exampleAST(778, "set cntrlabel onecolor"))
	// Output:
	// &plot.SetCntrlabelSpecList{
	// · SetCntrlabelSpecListItem: &plot.SetCntrlabelSpecListItem{
	// · · Case: 4,
	// · · Token: example778.go:1:15: IDENTIFIER "onecolor",
	// · },
	// }
}

func ExampleSetCntrlabelSpecList_case1() {
	fmt.Println(exampleAST(779, "set cntrlabel onecolor onecolor"))
	// Output:
	// &plot.SetCntrlabelSpecList{
	// · SetCntrlabelSpecList: &plot.SetCntrlabelSpecList{
	// · · Case: 1,
	// · · SetCntrlabelSpecListItem: &plot.SetCntrlabelSpecListItem{
	// · · · Case: 4,
	// · · · Token: example779.go:1:24: IDENTIFIER "onecolor",
	// · · },
	// · },
	// · SetCntrlabelSpecListItem: &plot.SetCntrlabelSpecListItem{
	// · · Case: 4,
	// · · Token: example779.go:1:15: IDENTIFIER "onecolor",
	// · },
	// }
}

func ExampleSetCntrlabelSpecListItem() {
	fmt.Println(exampleAST(780, "set cntrlabel format ident_a"))
	// Output:
	// &plot.SetCntrlabelSpecListItem{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example780.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example780.go:1:15: IDENTIFIER "format",
	// }
}

func ExampleSetCntrlabelSpecListItem_case1() {
	fmt.Println(exampleAST(781, "set cntrlabel font ident_a"))
	// Output:
	// &plot.SetCntrlabelSpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example781.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example781.go:1:15: IDENTIFIER "font",
	// }
}

func ExampleSetCntrlabelSpecListItem_case2() {
	fmt.Println(exampleAST(782, "set cntrlabel start ident_a"))
	// Output:
	// &plot.SetCntrlabelSpecListItem{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example782.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example782.go:1:15: IDENTIFIER "start",
	// }
}

func ExampleSetCntrlabelSpecListItem_case3() {
	fmt.Println(exampleAST(783, "set cntrlabel interval ident_a"))
	// Output:
	// &plot.SetCntrlabelSpecListItem{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example783.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example783.go:1:15: IDENTIFIER "interval",
	// }
}

func ExampleSetCntrlabelSpecListItem_case4() {
	fmt.Println(exampleAST(784, "set cntrlabel onecolor"))
	// Output:
	// &plot.SetCntrlabelSpecListItem{
	// · Case: 4,
	// · Token: example784.go:1:15: IDENTIFIER "onecolor",
	// }
}

func ExampleSetCntrparamSpecList() {
	fmt.Println(exampleAST(785, "set cntrp bspline"))
	// Output:
	// &plot.SetCntrparamSpecList{
	// · SetCntrparamSpecListItem: &plot.SetCntrparamSpecListItem{
	// · · Case: 2,
	// · · Token: example785.go:1:11: IDENTIFIER "bspline",
	// · },
	// }
}

func ExampleSetCntrparamSpecList_case1() {
	fmt.Println(exampleAST(786, "set cntrparam bspline bspline"))
	// Output:
	// &plot.SetCntrparamSpecList{
	// · SetCntrparamSpecList: &plot.SetCntrparamSpecList{
	// · · Case: 1,
	// · · SetCntrparamSpecListItem: &plot.SetCntrparamSpecListItem{
	// · · · Case: 2,
	// · · · Token: example786.go:1:23: IDENTIFIER "bspline",
	// · · },
	// · },
	// · SetCntrparamSpecListItem: &plot.SetCntrparamSpecListItem{
	// · · Case: 2,
	// · · Token: example786.go:1:15: IDENTIFIER "bspline",
	// · },
	// }
}

func ExampleSetCntrparamSpecListItem() {
	fmt.Println(exampleAST(787, "set cntrp linear"))
	// Output:
	// &plot.SetCntrparamSpecListItem{
	// · Token: example787.go:1:11: IDENTIFIER "linear",
	// }
}

func ExampleSetCntrparamSpecListItem_case01() {
	fmt.Println(exampleAST(788, "set cntrparam cubicspline"))
	// Output:
	// &plot.SetCntrparamSpecListItem{
	// · Case: 1,
	// · Token: example788.go:1:15: IDENTIFIER "cubicspline",
	// }
}

func ExampleSetCntrparamSpecListItem_case02() {
	fmt.Println(exampleAST(789, "set cntrp bspline"))
	// Output:
	// &plot.SetCntrparamSpecListItem{
	// · Case: 2,
	// · Token: example789.go:1:11: IDENTIFIER "bspline",
	// }
}

func ExampleSetCntrparamSpecListItem_case03() {
	fmt.Println(exampleAST(790, "set cntrp points ident_a"))
	// Output:
	// &plot.SetCntrparamSpecListItem{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example790.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example790.go:1:11: IDENTIFIER "points",
	// }
}

func ExampleSetCntrparamSpecListItem_case04() {
	fmt.Println(exampleAST(791, "set cntrparam order ident_a"))
	// Output:
	// &plot.SetCntrparamSpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example791.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example791.go:1:15: IDENTIFIER "order",
	// }
}

func ExampleSetCntrparamSpecListItem_case05() {
	fmt.Println(exampleAST(792, "set cntrparam level auto ident_a"))
	// Output:
	// &plot.SetCntrparamSpecListItem{
	// · Case: 5,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example792.go:1:26: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example792.go:1:15: IDENTIFIER "level",
	// · Token2: example792.go:1:21: IDENTIFIER "auto",
	// }
}

func ExampleSetCntrparamSpecListItem_case06() {
	fmt.Println(exampleAST(793, "set cntrparam level ident_a"))
	// Output:
	// &plot.SetCntrparamSpecListItem{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example793.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example793.go:1:15: IDENTIFIER "level",
	// }
}

func ExampleSetCntrparamSpecListItem_case07() {
	fmt.Println(exampleAST(794, "set cntrparam level discrete ident_a"))
	// Output:
	// &plot.SetCntrparamSpecListItem{
	// · Case: 7,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example794.go:1:30: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example794.go:1:15: IDENTIFIER "level",
	// · Token2: example794.go:1:21: IDENTIFIER "discrete",
	// }
}

func ExampleSetCntrparamSpecListItem_case08() {
	fmt.Println(exampleAST(795, "set cntrparam level incr ident_a"))
	// Output:
	// &plot.SetCntrparamSpecListItem{
	// · Case: 8,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example795.go:1:26: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example795.go:1:15: IDENTIFIER "level",
	// · Token2: example795.go:1:21: IDENTIFIER "incr",
	// }
}

func ExampleSetCntrparamSpecListItem_case09() {
	fmt.Println(exampleAST(796, "set cntrparam level incremental ident_a"))
	// Output:
	// &plot.SetCntrparamSpecListItem{
	// · Case: 9,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example796.go:1:33: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example796.go:1:15: IDENTIFIER "level",
	// · Token2: example796.go:1:21: IDENTIFIER "incremental",
	// }
}

func ExampleSetCntrparamSpecListItem_case10() {
	fmt.Println(exampleAST(797, "set cntrp levels auto ident_a"))
	// Output:
	// &plot.SetCntrparamSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example797.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example797.go:1:11: IDENTIFIER "levels",
	// · Token2: example797.go:1:18: IDENTIFIER "auto",
	// }
}

func ExampleSetCntrparamSpecListItem_case11() {
	fmt.Println(exampleAST(798, "set cntrp levels ident_a"))
	// Output:
	// &plot.SetCntrparamSpecListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example798.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example798.go:1:11: IDENTIFIER "levels",
	// }
}

func ExampleSetCntrparamSpecListItem_case12() {
	fmt.Println(exampleAST(799, "set cntrp levels discrete ident_a"))
	// Output:
	// &plot.SetCntrparamSpecListItem{
	// · Case: 12,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example799.go:1:27: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example799.go:1:11: IDENTIFIER "levels",
	// · Token2: example799.go:1:18: IDENTIFIER "discrete",
	// }
}

func ExampleSetCntrparamSpecListItem_case13() {
	fmt.Println(exampleAST(800, "set cntrp levels incr ident_a"))
	// Output:
	// &plot.SetCntrparamSpecListItem{
	// · Case: 13,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example800.go:1:23: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example800.go:1:11: IDENTIFIER "levels",
	// · Token2: example800.go:1:18: IDENTIFIER "incr",
	// }
}

func ExampleSetCntrparamSpecListItem_case14() {
	fmt.Println(exampleAST(801, "set cntrp levels incremental ident_a"))
	// Output:
	// &plot.SetCntrparamSpecListItem{
	// · Case: 14,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example801.go:1:30: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example801.go:1:11: IDENTIFIER "levels",
	// · Token2: example801.go:1:18: IDENTIFIER "incremental",
	// }
}

func ExampleSetColorboxSpecList() {
	fmt.Println(exampleAST(806, "set colorbox back"))
	// Output:
	// &plot.SetColorboxSpecList{
	// · SetColorboxSpecListItem: &plot.SetColorboxSpecListItem{
	// · · Case: 7,
	// · · Token: example806.go:1:14: IDENTIFIER "back",
	// · },
	// }
}

func ExampleSetColorboxSpecList_case1() {
	fmt.Println(exampleAST(807, "set colorbox back back"))
	// Output:
	// &plot.SetColorboxSpecList{
	// · SetColorboxSpecList: &plot.SetColorboxSpecList{
	// · · Case: 1,
	// · · SetColorboxSpecListItem: &plot.SetColorboxSpecListItem{
	// · · · Case: 7,
	// · · · Token: example807.go:1:19: IDENTIFIER "back",
	// · · },
	// · },
	// · SetColorboxSpecListItem: &plot.SetColorboxSpecListItem{
	// · · Case: 7,
	// · · Token: example807.go:1:14: IDENTIFIER "back",
	// · },
	// }
}

func ExampleSetColorboxSpecListItem() {
	fmt.Println(exampleAST(808, "set colorbox vertical"))
	// Output:
	// &plot.SetColorboxSpecListItem{
	// · Token: example808.go:1:14: IDENTIFIER "vertical",
	// }
}

func ExampleSetColorboxSpecListItem_case01() {
	fmt.Println(exampleAST(809, "set colorbox horizontal"))
	// Output:
	// &plot.SetColorboxSpecListItem{
	// · Case: 1,
	// · Token: example809.go:1:14: IDENTIFIER "horizontal",
	// }
}

func ExampleSetColorboxSpecListItem_case02() {
	fmt.Println(exampleAST(810, "set colorbox default"))
	// Output:
	// &plot.SetColorboxSpecListItem{
	// · Case: 2,
	// · Token: example810.go:1:14: IDENTIFIER "default",
	// }
}

func ExampleSetColorboxSpecListItem_case03() {
	fmt.Println(exampleAST(811, "set colorbox user"))
	// Output:
	// &plot.SetColorboxSpecListItem{
	// · Case: 3,
	// · Token: example811.go:1:14: IDENTIFIER "user",
	// }
}

func ExampleSetColorboxSpecListItem_case04() {
	fmt.Println(exampleAST(812, "set colorbox origin ident_a , ident_b"))
	// Output:
	// &plot.SetColorboxSpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example812.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example812.go:1:31: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example812.go:1:14: IDENTIFIER "origin",
	// · Token2: example812.go:1:29: ',' ",",
	// }
}

func ExampleSetColorboxSpecListItem_case05() {
	fmt.Println(exampleAST(813, "set colorbox size ident_a , ident_b"))
	// Output:
	// &plot.SetColorboxSpecListItem{
	// · Case: 5,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example813.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example813.go:1:29: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example813.go:1:14: IDENTIFIER "size",
	// · Token2: example813.go:1:27: ',' ",",
	// }
}

func ExampleSetColorboxSpecListItem_case06() {
	fmt.Println(exampleAST(814, "set colorbox front"))
	// Output:
	// &plot.SetColorboxSpecListItem{
	// · Case: 6,
	// · Token: example814.go:1:14: IDENTIFIER "front",
	// }
}

func ExampleSetColorboxSpecListItem_case07() {
	fmt.Println(exampleAST(815, "set colorbox back"))
	// Output:
	// &plot.SetColorboxSpecListItem{
	// · Case: 7,
	// · Token: example815.go:1:14: IDENTIFIER "back",
	// }
}

func ExampleSetColorboxSpecListItem_case08() {
	fmt.Println(exampleAST(816, "set colorbox noborder"))
	// Output:
	// &plot.SetColorboxSpecListItem{
	// · Case: 8,
	// · Token: example816.go:1:14: IDENTIFIER "noborder",
	// }
}

func ExampleSetColorboxSpecListItem_case09() {
	fmt.Println(exampleAST(817, "set colorbox bdefault"))
	// Output:
	// &plot.SetColorboxSpecListItem{
	// · Case: 9,
	// · Token: example817.go:1:14: IDENTIFIER "bdefault",
	// }
}

func ExampleSetColorboxSpecListItem_case10() {
	fmt.Println(exampleAST(818, "set colorbox border nocontours"))
	// Output:
	// &plot.SetColorboxSpecListItem{
	// · Case: 10,
	// · LineStyleList: &plot.LineStyleList{
	// · · LineStyleListItem: &plot.LineStyleListItem{
	// · · · Case: 15,
	// · · · Token: example818.go:1:21: IDENTIFIER "nocontours",
	// · · },
	// · },
	// · Token: example818.go:1:14: IDENTIFIER "border",
	// }
}

func ExampleSetColorboxSpecListOpt() {
	fmt.Println(exampleAST(819, "set colorbox") == (*SetColorboxSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetColorboxSpecListOpt_case1() {
	fmt.Println(exampleAST(820, "set colorbox back"))
	// Output:
	// &plot.SetColorboxSpecListOpt{
	// · SetColorboxSpecList: &plot.SetColorboxSpecList{
	// · · SetColorboxSpecListItem: &plot.SetColorboxSpecListItem{
	// · · · Case: 7,
	// · · · Token: example820.go:1:14: IDENTIFIER "back",
	// · · },
	// · },
	// }
}

func ExampleSetColorsequenceSpecOpt() {
	fmt.Println(exampleAST(802, "set colorsequence") == (*SetColorsequenceSpecOpt)(nil))
	// Output:
	// true
}

func ExampleSetColorsequenceSpecOpt_case1() {
	fmt.Println(exampleAST(803, "set colorsequence default"))
	// Output:
	// &plot.SetColorsequenceSpecOpt{
	// · Case: 1,
	// · Token: example803.go:1:19: IDENTIFIER "default",
	// }
}

func ExampleSetColorsequenceSpecOpt_case2() {
	fmt.Println(exampleAST(804, "set colorsequence classic"))
	// Output:
	// &plot.SetColorsequenceSpecOpt{
	// · Case: 2,
	// · Token: example804.go:1:19: IDENTIFIER "classic",
	// }
}

func ExampleSetColorsequenceSpecOpt_case3() {
	fmt.Println(exampleAST(805, "set colorsequence podo"))
	// Output:
	// &plot.SetColorsequenceSpecOpt{
	// · Case: 3,
	// · Token: example805.go:1:19: IDENTIFIER "podo",
	// }
}

func ExampleSetContourSpec() {
	fmt.Println(exampleAST(821, "set contour") == (*SetContourSpec)(nil))
	// Output:
	// true
}

func ExampleSetContourSpec_case1() {
	fmt.Println(exampleAST(822, "set contour base"))
	// Output:
	// &plot.SetContourSpec{
	// · Case: 1,
	// · Token: example822.go:1:13: IDENTIFIER "base",
	// }
}

func ExampleSetContourSpec_case2() {
	fmt.Println(exampleAST(823, "set contour surface"))
	// Output:
	// &plot.SetContourSpec{
	// · Case: 2,
	// · Token: example823.go:1:13: IDENTIFIER "surface",
	// }
}

func ExampleSetContourSpec_case3() {
	fmt.Println(exampleAST(824, "set contour both"))
	// Output:
	// &plot.SetContourSpec{
	// · Case: 3,
	// · Token: example824.go:1:13: IDENTIFIER "both",
	// }
}

func ExampleSetDatafileSeperatorSpecOpt() {
	fmt.Println(exampleAST(856, "set datafile sep") == (*SetDatafileSeperatorSpecOpt)(nil))
	// Output:
	// true
}

func ExampleSetDatafileSeperatorSpecOpt_case1() {
	fmt.Println(exampleAST(857, "set datafile sep whitespace"))
	// Output:
	// &plot.SetDatafileSeperatorSpecOpt{
	// · Case: 1,
	// · Token: example857.go:1:18: IDENTIFIER "whitespace",
	// }
}

func ExampleSetDatafileSeperatorSpecOpt_case2() {
	fmt.Println(exampleAST(858, "set datafile sep tab"))
	// Output:
	// &plot.SetDatafileSeperatorSpecOpt{
	// · Case: 2,
	// · Token: example858.go:1:18: IDENTIFIER "tab",
	// }
}

func ExampleSetDatafileSeperatorSpecOpt_case3() {
	fmt.Println(exampleAST(859, "set datafile separator comma"))
	// Output:
	// &plot.SetDatafileSeperatorSpecOpt{
	// · Case: 3,
	// · Token: example859.go:1:24: IDENTIFIER "comma",
	// }
}

func ExampleSetDatafileSeperatorSpecOpt_case4() {
	fmt.Println(exampleAST(860, "set datafile sep ident_a"))
	// Output:
	// &plot.SetDatafileSeperatorSpecOpt{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example860.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetDatafileSpec() {
	fmt.Println(exampleAST(847, "set datafile fortran"))
	// Output:
	// &plot.SetDatafileSpec{
	// · Token: example847.go:1:14: IDENTIFIER "fortran",
	// }
}

func ExampleSetDatafileSpec_case1() {
	fmt.Println(exampleAST(848, "set datafile nofpe trap"))
	// Output:
	// &plot.SetDatafileSpec{
	// · Case: 1,
	// · Token: example848.go:1:14: IDENTIFIER "nofpe",
	// · Token2: example848.go:1:20: IDENTIFIER "trap",
	// }
}

func ExampleSetDatafileSpec_case2() {
	fmt.Println(exampleAST(849, "set datafile missing ident_a"))
	// Output:
	// &plot.SetDatafileSpec{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example849.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example849.go:1:14: IDENTIFIER "missing",
	// }
}

func ExampleSetDatafileSpec_case3() {
	fmt.Println(exampleAST(850, "set datafile sep"))
	// Output:
	// &plot.SetDatafileSpec{
	// · Case: 3,
	// · Token: example850.go:1:14: IDENTIFIER "sep",
	// }
}

func ExampleSetDatafileSpec_case4() {
	fmt.Println(exampleAST(851, "set datafile separator"))
	// Output:
	// &plot.SetDatafileSpec{
	// · Case: 4,
	// · Token: example851.go:1:14: IDENTIFIER "separator",
	// }
}

func ExampleSetDatafileSpec_case5() {
	fmt.Println(exampleAST(852, "set datafile commentschars"))
	// Output:
	// &plot.SetDatafileSpec{
	// · Case: 5,
	// · Token: example852.go:1:14: IDENTIFIER "commentschars",
	// }
}

func ExampleSetDatafileSpec_case6() {
	fmt.Println(exampleAST(853, "set datafile commentschars ident_a"))
	// Output:
	// &plot.SetDatafileSpec{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example853.go:1:28: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example853.go:1:14: IDENTIFIER "commentschars",
	// }
}

func ExampleSetDatafileSpec_case7() {
	fmt.Println(exampleAST(854, "set datafile binary"))
	// Output:
	// &plot.SetDatafileSpec{
	// · Case: 7,
	// · Token: example854.go:1:14: IDENTIFIER "binary",
	// }
}

func ExampleSetDatafileSpec_case8() {
	fmt.Println(exampleAST(855, "set datafile binary flipx"))
	// Output:
	// &plot.SetDatafileSpec{
	// · BinaryList: &plot.BinaryList{
	// · · BinaryListItem: &plot.BinaryListItem{
	// · · · Case: 14,
	// · · · Token: example855.go:1:21: IDENTIFIER "flipx",
	// · · },
	// · },
	// · Case: 8,
	// · Token: example855.go:1:14: IDENTIFIER "binary",
	// }
}

func ExampleSetDecimalsignSpecOpt() {
	fmt.Println(exampleAST(861, "set decimalsign") == (*SetDecimalsignSpecOpt)(nil))
	// Output:
	// true
}

func ExampleSetDecimalsignSpecOpt_case1() {
	fmt.Println(exampleAST(862, "set decimalsign ident_a"))
	// Output:
	// &plot.SetDecimalsignSpecOpt{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example862.go:1:17: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetDecimalsignSpecOpt_case2() {
	fmt.Println(exampleAST(863, "set decimalsign locale"))
	// Output:
	// &plot.SetDecimalsignSpecOpt{
	// · Case: 2,
	// · Token: example863.go:1:17: IDENTIFIER "locale",
	// }
}

func ExampleSetDecimalsignSpecOpt_case3() {
	fmt.Println(exampleAST(864, "set decimalsign locale ident_a"))
	// Output:
	// &plot.SetDecimalsignSpecOpt{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example864.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example864.go:1:17: IDENTIFIER "locale",
	// }
}

func ExampleSetDgrid3dSpecList() {
	fmt.Println(exampleAST(865, "set dgrid3d ,"))
	// Output:
	// &plot.SetDgrid3dSpecList{
	// · SetDgrid3dSpecListItem: &plot.SetDgrid3dSpecListItem{
	// · · Case: 1,
	// · · Token: example865.go:1:13: ',' ",",
	// · },
	// }
}

func ExampleSetDgrid3dSpecList_case1() {
	fmt.Println(exampleAST(866, "set dgrid3d , ,"))
	// Output:
	// &plot.SetDgrid3dSpecList{
	// · SetDgrid3dSpecList: &plot.SetDgrid3dSpecList{
	// · · Case: 1,
	// · · SetDgrid3dSpecListItem: &plot.SetDgrid3dSpecListItem{
	// · · · Case: 1,
	// · · · Token: example866.go:1:15: ',' ",",
	// · · },
	// · },
	// · SetDgrid3dSpecListItem: &plot.SetDgrid3dSpecListItem{
	// · · Case: 1,
	// · · Token: example866.go:1:13: ',' ",",
	// · },
	// }
}

func ExampleSetDgrid3dSpecListItem() {
	fmt.Println(exampleAST(867, "set dgrid3d ident_a"))
	// Output:
	// &plot.SetDgrid3dSpecListItem{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example867.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetDgrid3dSpecListItem_case01() {
	fmt.Println(exampleAST(868, "set dgrid3d ,"))
	// Output:
	// &plot.SetDgrid3dSpecListItem{
	// · Case: 1,
	// · Token: example868.go:1:13: ',' ",",
	// }
}

func ExampleSetDgrid3dSpecListItem_case02() {
	fmt.Println(exampleAST(869, "set dgrid3d splines"))
	// Output:
	// &plot.SetDgrid3dSpecListItem{
	// · Case: 2,
	// · Token: example869.go:1:13: IDENTIFIER "splines",
	// }
}

func ExampleSetDgrid3dSpecListItem_case03() {
	fmt.Println(exampleAST(870, "set dgrid3d qnorm"))
	// Output:
	// &plot.SetDgrid3dSpecListItem{
	// · Case: 3,
	// · Token: example870.go:1:13: IDENTIFIER "qnorm",
	// }
}

func ExampleSetDgrid3dSpecListItem_case04() {
	fmt.Println(exampleAST(871, "set dgrid3d gauss"))
	// Output:
	// &plot.SetDgrid3dSpecListItem{
	// · Case: 4,
	// · Token: example871.go:1:13: IDENTIFIER "gauss",
	// }
}

func ExampleSetDgrid3dSpecListItem_case05() {
	fmt.Println(exampleAST(872, "set dgrid3d cauchy"))
	// Output:
	// &plot.SetDgrid3dSpecListItem{
	// · Case: 5,
	// · Token: example872.go:1:13: IDENTIFIER "cauchy",
	// }
}

func ExampleSetDgrid3dSpecListItem_case06() {
	fmt.Println(exampleAST(873, "set dgrid3d exp"))
	// Output:
	// &plot.SetDgrid3dSpecListItem{
	// · Case: 6,
	// · Token: example873.go:1:13: IDENTIFIER "exp",
	// }
}

func ExampleSetDgrid3dSpecListItem_case07() {
	fmt.Println(exampleAST(874, "set dgrid3d box"))
	// Output:
	// &plot.SetDgrid3dSpecListItem{
	// · Case: 7,
	// · Token: example874.go:1:13: IDENTIFIER "box",
	// }
}

func ExampleSetDgrid3dSpecListItem_case08() {
	fmt.Println(exampleAST(875, "set dgrid3d hann"))
	// Output:
	// &plot.SetDgrid3dSpecListItem{
	// · Case: 8,
	// · Token: example875.go:1:13: IDENTIFIER "hann",
	// }
}

func ExampleSetDgrid3dSpecListItem_case09() {
	fmt.Println(exampleAST(876, "set dgrid3d kdensity"))
	// Output:
	// &plot.SetDgrid3dSpecListItem{
	// · Case: 9,
	// · Token: example876.go:1:13: IDENTIFIER "kdensity",
	// }
}

func ExampleSetDgrid3dSpecListOpt() {
	fmt.Println(exampleAST(877, "set dgrid3d") == (*SetDgrid3dSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetDgrid3dSpecListOpt_case1() {
	fmt.Println(exampleAST(878, "set dgrid3d ,"))
	// Output:
	// &plot.SetDgrid3dSpecListOpt{
	// · SetDgrid3dSpecList: &plot.SetDgrid3dSpecList{
	// · · SetDgrid3dSpecListItem: &plot.SetDgrid3dSpecListItem{
	// · · · Case: 1,
	// · · · Token: example878.go:1:13: ',' ",",
	// · · },
	// · },
	// }
}

func ExampleSetEncodingSpec() {
	fmt.Println(exampleAST(828, "set encoding cp1250"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Token: example828.go:1:14: IDENTIFIER "cp1250",
	// }
}

func ExampleSetEncodingSpec_case01() {
	fmt.Println(exampleAST(829, "set encoding cp1251"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 1,
	// · Token: example829.go:1:14: IDENTIFIER "cp1251",
	// }
}

func ExampleSetEncodingSpec_case02() {
	fmt.Println(exampleAST(830, "set encoding cp1252"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 2,
	// · Token: example830.go:1:14: IDENTIFIER "cp1252",
	// }
}

func ExampleSetEncodingSpec_case03() {
	fmt.Println(exampleAST(831, "set encoding cp1254"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 3,
	// · Token: example831.go:1:14: IDENTIFIER "cp1254",
	// }
}

func ExampleSetEncodingSpec_case04() {
	fmt.Println(exampleAST(832, "set encoding cp437"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 4,
	// · Token: example832.go:1:14: IDENTIFIER "cp437",
	// }
}

func ExampleSetEncodingSpec_case05() {
	fmt.Println(exampleAST(833, "set encoding cp850"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 5,
	// · Token: example833.go:1:14: IDENTIFIER "cp850",
	// }
}

func ExampleSetEncodingSpec_case06() {
	fmt.Println(exampleAST(834, "set encoding cp852"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 6,
	// · Token: example834.go:1:14: IDENTIFIER "cp852",
	// }
}

func ExampleSetEncodingSpec_case07() {
	fmt.Println(exampleAST(835, "set encoding cp950"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 7,
	// · Token: example835.go:1:14: IDENTIFIER "cp950",
	// }
}

func ExampleSetEncodingSpec_case08() {
	fmt.Println(exampleAST(836, "set encoding default"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 8,
	// · Token: example836.go:1:14: IDENTIFIER "default",
	// }
}

func ExampleSetEncodingSpec_case09() {
	fmt.Println(exampleAST(837, "set encoding iso_8859_1"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 9,
	// · Token: example837.go:1:14: IDENTIFIER "iso_8859_1",
	// }
}

func ExampleSetEncodingSpec_case10() {
	fmt.Println(exampleAST(838, "set encoding iso_8859_15"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 10,
	// · Token: example838.go:1:14: IDENTIFIER "iso_8859_15",
	// }
}

func ExampleSetEncodingSpec_case11() {
	fmt.Println(exampleAST(839, "set encoding iso_8859_2"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 11,
	// · Token: example839.go:1:14: IDENTIFIER "iso_8859_2",
	// }
}

func ExampleSetEncodingSpec_case12() {
	fmt.Println(exampleAST(840, "set encoding iso_8859_9"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 12,
	// · Token: example840.go:1:14: IDENTIFIER "iso_8859_9",
	// }
}

func ExampleSetEncodingSpec_case13() {
	fmt.Println(exampleAST(841, "set encoding koi8r"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 13,
	// · Token: example841.go:1:14: IDENTIFIER "koi8r",
	// }
}

func ExampleSetEncodingSpec_case14() {
	fmt.Println(exampleAST(842, "set encoding koi8u"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 14,
	// · Token: example842.go:1:14: IDENTIFIER "koi8u",
	// }
}

func ExampleSetEncodingSpec_case15() {
	fmt.Println(exampleAST(843, "set encoding locale"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 15,
	// · Token: example843.go:1:14: IDENTIFIER "locale",
	// }
}

func ExampleSetEncodingSpec_case16() {
	fmt.Println(exampleAST(844, "set encoding sjis"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 16,
	// · Token: example844.go:1:14: IDENTIFIER "sjis",
	// }
}

func ExampleSetEncodingSpec_case17() {
	fmt.Println(exampleAST(845, "set encoding utf8"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 17,
	// · Token: example845.go:1:14: IDENTIFIER "utf8",
	// }
}

func ExampleSetEncodingSpec_case18() {
	fmt.Println(exampleAST(846, "set encoding ident_a"))
	// Output:
	// &plot.SetEncodingSpec{
	// · Case: 18,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example846.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetFitSpecList() {
	fmt.Println(exampleAST(879, "set fit brief"))
	// Output:
	// &plot.SetFitSpecList{
	// · SetFitSpecListItem: &plot.SetFitSpecListItem{
	// · · Case: 6,
	// · · Token: example879.go:1:9: IDENTIFIER "brief",
	// · },
	// }
}

func ExampleSetFitSpecList_case1() {
	fmt.Println(exampleAST(880, "set fit brief brief"))
	// Output:
	// &plot.SetFitSpecList{
	// · SetFitSpecList: &plot.SetFitSpecList{
	// · · Case: 1,
	// · · SetFitSpecListItem: &plot.SetFitSpecListItem{
	// · · · Case: 6,
	// · · · Token: example880.go:1:15: IDENTIFIER "brief",
	// · · },
	// · },
	// · SetFitSpecListItem: &plot.SetFitSpecListItem{
	// · · Case: 6,
	// · · Token: example880.go:1:9: IDENTIFIER "brief",
	// · },
	// }
}

func ExampleSetFitSpecListItem() {
	fmt.Println(exampleAST(881, "set fit nolog"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Token: example881.go:1:9: IDENTIFIER "nolog",
	// }
}

func ExampleSetFitSpecListItem_case01() {
	fmt.Println(exampleAST(882, "set fit logfile ident_a"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example882.go:1:17: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example882.go:1:9: IDENTIFIER "logfile",
	// }
}

func ExampleSetFitSpecListItem_case02() {
	fmt.Println(exampleAST(883, "set fit logfile default"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 2,
	// · Token: example883.go:1:9: IDENTIFIER "logfile",
	// · Token2: example883.go:1:17: IDENTIFIER "default",
	// }
}

func ExampleSetFitSpecListItem_case03() {
	fmt.Println(exampleAST(884, "set fit quiet"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 3,
	// · Token: example884.go:1:9: IDENTIFIER "quiet",
	// }
}

func ExampleSetFitSpecListItem_case04() {
	fmt.Println(exampleAST(885, "set fit noquiet"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 4,
	// · Token: example885.go:1:9: IDENTIFIER "noquiet",
	// }
}

func ExampleSetFitSpecListItem_case05() {
	fmt.Println(exampleAST(886, "set fit results"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 5,
	// · Token: example886.go:1:9: IDENTIFIER "results",
	// }
}

func ExampleSetFitSpecListItem_case06() {
	fmt.Println(exampleAST(887, "set fit brief"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 6,
	// · Token: example887.go:1:9: IDENTIFIER "brief",
	// }
}

func ExampleSetFitSpecListItem_case07() {
	fmt.Println(exampleAST(888, "set fit verbose"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 7,
	// · Token: example888.go:1:9: IDENTIFIER "verbose",
	// }
}

func ExampleSetFitSpecListItem_case08() {
	fmt.Println(exampleAST(889, "set fit errorvariables"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 8,
	// · Token: example889.go:1:9: IDENTIFIER "errorvariables",
	// }
}

func ExampleSetFitSpecListItem_case09() {
	fmt.Println(exampleAST(890, "set fit noerrorvariables"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 9,
	// · Token: example890.go:1:9: IDENTIFIER "noerrorvariables",
	// }
}

func ExampleSetFitSpecListItem_case10() {
	fmt.Println(exampleAST(891, "set fit covariancevariables"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 10,
	// · Token: example891.go:1:9: IDENTIFIER "covariancevariables",
	// }
}

func ExampleSetFitSpecListItem_case11() {
	fmt.Println(exampleAST(892, "set fit nocovariancevariables"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 11,
	// · Token: example892.go:1:9: IDENTIFIER "nocovariancevariables",
	// }
}

func ExampleSetFitSpecListItem_case12() {
	fmt.Println(exampleAST(893, "set fit errorscaling"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 12,
	// · Token: example893.go:1:9: IDENTIFIER "errorscaling",
	// }
}

func ExampleSetFitSpecListItem_case13() {
	fmt.Println(exampleAST(894, "set fit noerrorscaling"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 13,
	// · Token: example894.go:1:9: IDENTIFIER "noerrorscaling",
	// }
}

func ExampleSetFitSpecListItem_case14() {
	fmt.Println(exampleAST(895, "set fit prescale"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 14,
	// · Token: example895.go:1:9: IDENTIFIER "prescale",
	// }
}

func ExampleSetFitSpecListItem_case15() {
	fmt.Println(exampleAST(896, "set fit noprescale"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 15,
	// · Token: example896.go:1:9: IDENTIFIER "noprescale",
	// }
}

func ExampleSetFitSpecListItem_case16() {
	fmt.Println(exampleAST(897, "set fit maxiter ident_a"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 16,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example897.go:1:17: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example897.go:1:9: IDENTIFIER "maxiter",
	// }
}

func ExampleSetFitSpecListItem_case17() {
	fmt.Println(exampleAST(898, "set fit maxiter default"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 17,
	// · Token: example898.go:1:9: IDENTIFIER "maxiter",
	// · Token2: example898.go:1:17: IDENTIFIER "default",
	// }
}

func ExampleSetFitSpecListItem_case18() {
	fmt.Println(exampleAST(899, "set fit limit ident_a"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 18,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example899.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example899.go:1:9: IDENTIFIER "limit",
	// }
}

func ExampleSetFitSpecListItem_case19() {
	fmt.Println(exampleAST(900, "set fit limit default"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 19,
	// · Token: example900.go:1:9: IDENTIFIER "limit",
	// · Token2: example900.go:1:15: IDENTIFIER "default",
	// }
}

func ExampleSetFitSpecListItem_case20() {
	fmt.Println(exampleAST(901, "set fit limit_abs ident_a"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 20,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example901.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example901.go:1:9: IDENTIFIER "limit_abs",
	// }
}

func ExampleSetFitSpecListItem_case21() {
	fmt.Println(exampleAST(902, "set fit start_lambda ident_a"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 21,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example902.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example902.go:1:9: IDENTIFIER "start_lambda",
	// }
}

func ExampleSetFitSpecListItem_case22() {
	fmt.Println(exampleAST(903, "set fit start_lambda default"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 22,
	// · Token: example903.go:1:9: IDENTIFIER "start_lambda",
	// · Token2: example903.go:1:22: IDENTIFIER "default",
	// }
}

func ExampleSetFitSpecListItem_case23() {
	fmt.Println(exampleAST(904, "set fit lambda_factor ident_a"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 23,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example904.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example904.go:1:9: IDENTIFIER "lambda_factor",
	// }
}

func ExampleSetFitSpecListItem_case24() {
	fmt.Println(exampleAST(905, "set fit lambda_factor default"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 24,
	// · Token: example905.go:1:9: IDENTIFIER "lambda_factor",
	// · Token2: example905.go:1:23: IDENTIFIER "default",
	// }
}

func ExampleSetFitSpecListItem_case25() {
	fmt.Println(exampleAST(906, "set fit script ident_a"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 25,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example906.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example906.go:1:9: IDENTIFIER "script",
	// }
}

func ExampleSetFitSpecListItem_case26() {
	fmt.Println(exampleAST(907, "set fit script default"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 26,
	// · Token: example907.go:1:9: IDENTIFIER "script",
	// · Token2: example907.go:1:16: IDENTIFIER "default",
	// }
}

func ExampleSetFitSpecListItem_case27() {
	fmt.Println(exampleAST(908, "set fit v4"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 27,
	// · Token: example908.go:1:9: IDENTIFIER "v4",
	// }
}

func ExampleSetFitSpecListItem_case28() {
	fmt.Println(exampleAST(909, "set fit v5"))
	// Output:
	// &plot.SetFitSpecListItem{
	// · Case: 28,
	// · Token: example909.go:1:9: IDENTIFIER "v5",
	// }
}

func ExampleSetFontPathSpecOpt() {
	fmt.Println(exampleAST(825, "set fontpath") == (*SetFontPathSpecOpt)(nil))
	// Output:
	// true
}

func ExampleSetFontPathSpecOpt_case1() {
	fmt.Println(exampleAST(826, "set fontpath ident_a"))
	// Output:
	// &plot.SetFontPathSpecOpt{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example826.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetFontPathSpecOpt_case2() {
	fmt.Println(exampleAST(827, "set fontpath ident_a ident_b"))
	// Output:
	// &plot.SetFontPathSpecOpt{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example827.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpressionList: &plot.SimpleExpressionList{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example827.go:1:22: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetFormatAxesOpt() {
	fmt.Println(exampleAST(910, "set format") == (*SetFormatAxesOpt)(nil))
	// Output:
	// true
}

func ExampleSetFormatAxesOpt_case1() {
	fmt.Println(exampleAST(911, "set format cb"))
	// Output:
	// &plot.SetFormatAxesOpt{
	// · Case: 1,
	// · Token: example911.go:1:12: IDENTIFIER "cb",
	// }
}

func ExampleSetFormatAxesOpt_case2() {
	fmt.Println(exampleAST(912, "set format x"))
	// Output:
	// &plot.SetFormatAxesOpt{
	// · Case: 2,
	// · Token: example912.go:1:12: IDENTIFIER "x",
	// }
}

func ExampleSetFormatAxesOpt_case3() {
	fmt.Println(exampleAST(913, "set format x2"))
	// Output:
	// &plot.SetFormatAxesOpt{
	// · Case: 3,
	// · Token: example913.go:1:12: IDENTIFIER "x2",
	// }
}

func ExampleSetFormatAxesOpt_case4() {
	fmt.Println(exampleAST(914, "set format xy"))
	// Output:
	// &plot.SetFormatAxesOpt{
	// · Case: 4,
	// · Token: example914.go:1:12: IDENTIFIER "xy",
	// }
}

func ExampleSetFormatAxesOpt_case5() {
	fmt.Println(exampleAST(915, "set format y"))
	// Output:
	// &plot.SetFormatAxesOpt{
	// · Case: 5,
	// · Token: example915.go:1:12: IDENTIFIER "y",
	// }
}

func ExampleSetFormatAxesOpt_case6() {
	fmt.Println(exampleAST(916, "set format y2"))
	// Output:
	// &plot.SetFormatAxesOpt{
	// · Case: 6,
	// · Token: example916.go:1:12: IDENTIFIER "y2",
	// }
}

func ExampleSetFormatAxesOpt_case7() {
	fmt.Println(exampleAST(917, "set format z"))
	// Output:
	// &plot.SetFormatAxesOpt{
	// · Case: 7,
	// · Token: example917.go:1:12: IDENTIFIER "z",
	// }
}

func ExampleSetFormatModifierOpt() {
	fmt.Println(exampleAST(919, "set format") == (*SetFormatModifierOpt)(nil))
	// Output:
	// true
}

func ExampleSetFormatModifierOpt_case1() {
	fmt.Println(exampleAST(920, "set format numeric"))
	// Output:
	// &plot.SetFormatModifierOpt{
	// · Case: 1,
	// · Token: example920.go:1:12: IDENTIFIER "numeric",
	// }
}

func ExampleSetFormatModifierOpt_case2() {
	fmt.Println(exampleAST(921, "set format timedate"))
	// Output:
	// &plot.SetFormatModifierOpt{
	// · Case: 2,
	// · Token: example921.go:1:12: IDENTIFIER "timedate",
	// }
}

func ExampleSetFormatModifierOpt_case3() {
	fmt.Println(exampleAST(922, "set format geographic"))
	// Output:
	// &plot.SetFormatModifierOpt{
	// · Case: 3,
	// · Token: example922.go:1:12: IDENTIFIER "geographic",
	// }
}

func ExampleSetFormatSpec() {
	fmt.Println(exampleAST(918, "set format x 'foo' numeric"))
	// Output:
	// &plot.SetFormatSpec{
	// · ExpressionOpt: &plot.ExpressionOpt{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 3,
	// · · · · · · Token: example918.go:1:14: STRING_LIT "foo",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetFormatAxesOpt: &plot.SetFormatAxesOpt{
	// · · Case: 2,
	// · · Token: example918.go:1:12: IDENTIFIER "x",
	// · },
	// · SetFormatModifierOpt: &plot.SetFormatModifierOpt{
	// · · Case: 1,
	// · · Token: example918.go:1:20: IDENTIFIER "numeric",
	// · },
	// }
}

func ExampleSetGridSpecList() {
	fmt.Println(exampleAST(923, "set grid back"))
	// Output:
	// &plot.SetGridSpecList{
	// · SetGridSpecListItem: &plot.SetGridSpecListItem{
	// · · Token: example923.go:1:10: IDENTIFIER "back",
	// · },
	// }
}

func ExampleSetGridSpecList_case1() {
	fmt.Println(exampleAST(924, "set grid back back"))
	// Output:
	// &plot.SetGridSpecList{
	// · SetGridSpecList: &plot.SetGridSpecList{
	// · · Case: 1,
	// · · SetGridSpecListItem: &plot.SetGridSpecListItem{
	// · · · Token: example924.go:1:15: IDENTIFIER "back",
	// · · },
	// · },
	// · SetGridSpecListItem: &plot.SetGridSpecListItem{
	// · · Token: example924.go:1:10: IDENTIFIER "back",
	// · },
	// }
}

func ExampleSetGridSpecListItem() {
	fmt.Println(exampleAST(925, "set grid back"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Token: example925.go:1:10: IDENTIFIER "back",
	// }
}

func ExampleSetGridSpecListItem_case01() {
	fmt.Println(exampleAST(926, "set grid cbtics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 1,
	// · Token: example926.go:1:10: IDENTIFIER "cbtics",
	// }
}

func ExampleSetGridSpecListItem_case02() {
	fmt.Println(exampleAST(927, "set grid front"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 2,
	// · Token: example927.go:1:10: IDENTIFIER "front",
	// }
}

func ExampleSetGridSpecListItem_case03() {
	fmt.Println(exampleAST(928, "set grid layerdefault"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 3,
	// · Token: example928.go:1:10: IDENTIFIER "layerdefault",
	// }
}

func ExampleSetGridSpecListItem_case04() {
	fmt.Println(exampleAST(929, "set grid mcb"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 4,
	// · Token: example929.go:1:10: IDENTIFIER "mcb",
	// }
}

func ExampleSetGridSpecListItem_case05() {
	fmt.Println(exampleAST(930, "set grid mcbtics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 5,
	// · Token: example930.go:1:10: IDENTIFIER "mcbtics",
	// }
}

func ExampleSetGridSpecListItem_case06() {
	fmt.Println(exampleAST(931, "set grid mx"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 6,
	// · Token: example931.go:1:10: IDENTIFIER "mx",
	// }
}

func ExampleSetGridSpecListItem_case07() {
	fmt.Println(exampleAST(932, "set grid mx2"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 7,
	// · Token: example932.go:1:10: IDENTIFIER "mx2",
	// }
}

func ExampleSetGridSpecListItem_case08() {
	fmt.Println(exampleAST(933, "set grid mx2tics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 8,
	// · Token: example933.go:1:10: IDENTIFIER "mx2tics",
	// }
}

func ExampleSetGridSpecListItem_case09() {
	fmt.Println(exampleAST(934, "set grid mxtics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 9,
	// · Token: example934.go:1:10: IDENTIFIER "mxtics",
	// }
}

func ExampleSetGridSpecListItem_case10() {
	fmt.Println(exampleAST(935, "set grid my"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 10,
	// · Token: example935.go:1:10: IDENTIFIER "my",
	// }
}

func ExampleSetGridSpecListItem_case11() {
	fmt.Println(exampleAST(936, "set grid my2"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 11,
	// · Token: example936.go:1:10: IDENTIFIER "my2",
	// }
}

func ExampleSetGridSpecListItem_case12() {
	fmt.Println(exampleAST(937, "set grid my2tics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 12,
	// · Token: example937.go:1:10: IDENTIFIER "my2tics",
	// }
}

func ExampleSetGridSpecListItem_case13() {
	fmt.Println(exampleAST(938, "set grid mytics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 13,
	// · Token: example938.go:1:10: IDENTIFIER "mytics",
	// }
}

func ExampleSetGridSpecListItem_case14() {
	fmt.Println(exampleAST(939, "set grid mz"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 14,
	// · Token: example939.go:1:10: IDENTIFIER "mz",
	// }
}

func ExampleSetGridSpecListItem_case15() {
	fmt.Println(exampleAST(940, "set grid mztics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 15,
	// · Token: example940.go:1:10: IDENTIFIER "mztics",
	// }
}

func ExampleSetGridSpecListItem_case16() {
	fmt.Println(exampleAST(941, "set grid nocbtics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 16,
	// · Token: example941.go:1:10: IDENTIFIER "nocbtics",
	// }
}

func ExampleSetGridSpecListItem_case17() {
	fmt.Println(exampleAST(942, "set grid nomcbtics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 17,
	// · Token: example942.go:1:10: IDENTIFIER "nomcbtics",
	// }
}

func ExampleSetGridSpecListItem_case18() {
	fmt.Println(exampleAST(943, "set grid nomx2tics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 18,
	// · Token: example943.go:1:10: IDENTIFIER "nomx2tics",
	// }
}

func ExampleSetGridSpecListItem_case19() {
	fmt.Println(exampleAST(944, "set grid nomxtics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 19,
	// · Token: example944.go:1:10: IDENTIFIER "nomxtics",
	// }
}

func ExampleSetGridSpecListItem_case20() {
	fmt.Println(exampleAST(945, "set grid nomy2tics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 20,
	// · Token: example945.go:1:10: IDENTIFIER "nomy2tics",
	// }
}

func ExampleSetGridSpecListItem_case21() {
	fmt.Println(exampleAST(946, "set grid nomytics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 21,
	// · Token: example946.go:1:10: IDENTIFIER "nomytics",
	// }
}

func ExampleSetGridSpecListItem_case22() {
	fmt.Println(exampleAST(947, "set grid nomztics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 22,
	// · Token: example947.go:1:10: IDENTIFIER "nomztics",
	// }
}

func ExampleSetGridSpecListItem_case23() {
	fmt.Println(exampleAST(948, "set grid nox2tics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 23,
	// · Token: example948.go:1:10: IDENTIFIER "nox2tics",
	// }
}

func ExampleSetGridSpecListItem_case24() {
	fmt.Println(exampleAST(949, "set grid noxtics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 24,
	// · Token: example949.go:1:10: IDENTIFIER "noxtics",
	// }
}

func ExampleSetGridSpecListItem_case25() {
	fmt.Println(exampleAST(950, "set grid noy2tics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 25,
	// · Token: example950.go:1:10: IDENTIFIER "noy2tics",
	// }
}

func ExampleSetGridSpecListItem_case26() {
	fmt.Println(exampleAST(951, "set grid noytics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 26,
	// · Token: example951.go:1:10: IDENTIFIER "noytics",
	// }
}

func ExampleSetGridSpecListItem_case27() {
	fmt.Println(exampleAST(952, "set grid noztics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 27,
	// · Token: example952.go:1:10: IDENTIFIER "noztics",
	// }
}

func ExampleSetGridSpecListItem_case28() {
	fmt.Println(exampleAST(953, "set grid polar"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 28,
	// · Token: example953.go:1:10: IDENTIFIER "polar",
	// }
}

func ExampleSetGridSpecListItem_case29() {
	fmt.Println(exampleAST(954, "set grid polar ident_a"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 29,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example954.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example954.go:1:10: IDENTIFIER "polar",
	// }
}

func ExampleSetGridSpecListItem_case30() {
	fmt.Println(exampleAST(955, "set grid x2tics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 30,
	// · Token: example955.go:1:10: IDENTIFIER "x2tics",
	// }
}

func ExampleSetGridSpecListItem_case31() {
	fmt.Println(exampleAST(956, "set grid xtics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 31,
	// · Token: example956.go:1:10: IDENTIFIER "xtics",
	// }
}

func ExampleSetGridSpecListItem_case32() {
	fmt.Println(exampleAST(957, "set grid y2tics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 32,
	// · Token: example957.go:1:10: IDENTIFIER "y2tics",
	// }
}

func ExampleSetGridSpecListItem_case33() {
	fmt.Println(exampleAST(958, "set grid ytics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 33,
	// · Token: example958.go:1:10: IDENTIFIER "ytics",
	// }
}

func ExampleSetGridSpecListItem_case34() {
	fmt.Println(exampleAST(959, "set grid ztics"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 34,
	// · Token: example959.go:1:10: IDENTIFIER "ztics",
	// }
}

func ExampleSetGridSpecListItem_case35() {
	fmt.Println(exampleAST(960, "set grid nocontours"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 35,
	// · LineStyleListItem: &plot.LineStyleListItem{
	// · · Case: 15,
	// · · Token: example960.go:1:10: IDENTIFIER "nocontours",
	// · },
	// }
}

func ExampleSetGridSpecListItem_case36() {
	fmt.Println(exampleAST(961, "set grid nocontours , nocontours"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 36,
	// · LineStyleListItem: &plot.LineStyleListItem{
	// · · Case: 15,
	// · · Token: example961.go:1:10: IDENTIFIER "nocontours",
	// · },
	// · LineStyleListItem2: &plot.LineStyleListItem{
	// · · Case: 15,
	// · · Token: example961.go:1:23: IDENTIFIER "nocontours",
	// · },
	// · Token: example961.go:1:21: ',' ",",
	// }
}

func ExampleSetGridSpecListItem_case37() {
	fmt.Println(exampleAST(962, "set grid cb"))
	// Output:
	// &plot.SetGridSpecListItem{
	// · Case: 37,
	// · SetLogscaleAxesListItem: &plot.SetLogscaleAxesListItem{
	// · · Case: 5,
	// · · Token: example962.go:1:10: IDENTIFIER "cb",
	// · },
	// }
}

func ExampleSetGridSpecListOpt() {
	fmt.Println(exampleAST(963, "set grid") == (*SetGridSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetGridSpecListOpt_case1() {
	fmt.Println(exampleAST(964, "set grid back"))
	// Output:
	// &plot.SetGridSpecListOpt{
	// · SetGridSpecList: &plot.SetGridSpecList{
	// · · SetGridSpecListItem: &plot.SetGridSpecListItem{
	// · · · Token: example964.go:1:10: IDENTIFIER "back",
	// · · },
	// · },
	// }
}

func ExampleSetHidden3dSpecList() {
	fmt.Println(exampleAST(965, "set hidden3d altdiagonal"))
	// Output:
	// &plot.SetHidden3dSpecList{
	// · SetHidden3dSpecListItem: &plot.SetHidden3dSpecListItem{
	// · · Case: 8,
	// · · Token: example965.go:1:14: IDENTIFIER "altdiagonal",
	// · },
	// }
}

func ExampleSetHidden3dSpecList_case1() {
	fmt.Println(exampleAST(966, "set hidden3d altdiagonal altdiagonal"))
	// Output:
	// &plot.SetHidden3dSpecList{
	// · SetHidden3dSpecList: &plot.SetHidden3dSpecList{
	// · · Case: 1,
	// · · SetHidden3dSpecListItem: &plot.SetHidden3dSpecListItem{
	// · · · Case: 8,
	// · · · Token: example966.go:1:26: IDENTIFIER "altdiagonal",
	// · · },
	// · },
	// · SetHidden3dSpecListItem: &plot.SetHidden3dSpecListItem{
	// · · Case: 8,
	// · · Token: example966.go:1:14: IDENTIFIER "altdiagonal",
	// · },
	// }
}

func ExampleSetHidden3dSpecListItem() {
	fmt.Println(exampleAST(967, "set hidden3d defaults"))
	// Output:
	// &plot.SetHidden3dSpecListItem{
	// · Token: example967.go:1:14: IDENTIFIER "defaults",
	// }
}

func ExampleSetHidden3dSpecListItem_case01() {
	fmt.Println(exampleAST(968, "set hidden3d front"))
	// Output:
	// &plot.SetHidden3dSpecListItem{
	// · Case: 1,
	// · Token: example968.go:1:14: IDENTIFIER "front",
	// }
}

func ExampleSetHidden3dSpecListItem_case02() {
	fmt.Println(exampleAST(969, "set hidden3d back"))
	// Output:
	// &plot.SetHidden3dSpecListItem{
	// · Case: 2,
	// · Token: example969.go:1:14: IDENTIFIER "back",
	// }
}

func ExampleSetHidden3dSpecListItem_case03() {
	fmt.Println(exampleAST(970, "set hidden3d offset ident_a"))
	// Output:
	// &plot.SetHidden3dSpecListItem{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example970.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example970.go:1:14: IDENTIFIER "offset",
	// }
}

func ExampleSetHidden3dSpecListItem_case04() {
	fmt.Println(exampleAST(971, "set hidden3d nooffset"))
	// Output:
	// &plot.SetHidden3dSpecListItem{
	// · Case: 4,
	// · Token: example971.go:1:14: IDENTIFIER "nooffset",
	// }
}

func ExampleSetHidden3dSpecListItem_case05() {
	fmt.Println(exampleAST(972, "set hidden3d trianglepattern ident_a"))
	// Output:
	// &plot.SetHidden3dSpecListItem{
	// · Case: 5,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example972.go:1:30: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example972.go:1:14: IDENTIFIER "trianglepattern",
	// }
}

func ExampleSetHidden3dSpecListItem_case06() {
	fmt.Println(exampleAST(973, "set hidden3d undefined ident_a"))
	// Output:
	// &plot.SetHidden3dSpecListItem{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example973.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example973.go:1:14: IDENTIFIER "undefined",
	// }
}

func ExampleSetHidden3dSpecListItem_case07() {
	fmt.Println(exampleAST(974, "set hidden3d noundefined"))
	// Output:
	// &plot.SetHidden3dSpecListItem{
	// · Case: 7,
	// · Token: example974.go:1:14: IDENTIFIER "noundefined",
	// }
}

func ExampleSetHidden3dSpecListItem_case08() {
	fmt.Println(exampleAST(975, "set hidden3d altdiagonal"))
	// Output:
	// &plot.SetHidden3dSpecListItem{
	// · Case: 8,
	// · Token: example975.go:1:14: IDENTIFIER "altdiagonal",
	// }
}

func ExampleSetHidden3dSpecListItem_case09() {
	fmt.Println(exampleAST(976, "set hidden3d noaltdiagonal"))
	// Output:
	// &plot.SetHidden3dSpecListItem{
	// · Case: 9,
	// · Token: example976.go:1:14: IDENTIFIER "noaltdiagonal",
	// }
}

func ExampleSetHidden3dSpecListItem_case10() {
	fmt.Println(exampleAST(977, "set hidden3d bentover"))
	// Output:
	// &plot.SetHidden3dSpecListItem{
	// · Case: 10,
	// · Token: example977.go:1:14: IDENTIFIER "bentover",
	// }
}

func ExampleSetHidden3dSpecListItem_case11() {
	fmt.Println(exampleAST(978, "set hidden3d nobentover"))
	// Output:
	// &plot.SetHidden3dSpecListItem{
	// · Case: 11,
	// · Token: example978.go:1:14: IDENTIFIER "nobentover",
	// }
}

func ExampleSetHidden3dSpecListOpt() {
	fmt.Println(exampleAST(979, "set hidden3d") == (*SetHidden3dSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetHidden3dSpecListOpt_case1() {
	fmt.Println(exampleAST(980, "set hidden3d altdiagonal"))
	// Output:
	// &plot.SetHidden3dSpecListOpt{
	// · SetHidden3dSpecList: &plot.SetHidden3dSpecList{
	// · · SetHidden3dSpecListItem: &plot.SetHidden3dSpecListItem{
	// · · · Case: 8,
	// · · · Token: example980.go:1:14: IDENTIFIER "altdiagonal",
	// · · },
	// · },
	// }
}

func ExampleSetHistorySpecList() {
	fmt.Println(exampleAST(981, "set history default"))
	// Output:
	// &plot.SetHistorySpecList{
	// · SetHistorySpecListItem: &plot.SetHistorySpecListItem{
	// · · Case: 5,
	// · · Token: example981.go:1:13: IDENTIFIER "default",
	// · },
	// }
}

func ExampleSetHistorySpecList_case1() {
	fmt.Println(exampleAST(982, "set history default default"))
	// Output:
	// &plot.SetHistorySpecList{
	// · SetHistorySpecList: &plot.SetHistorySpecList{
	// · · Case: 1,
	// · · SetHistorySpecListItem: &plot.SetHistorySpecListItem{
	// · · · Case: 5,
	// · · · Token: example982.go:1:21: IDENTIFIER "default",
	// · · },
	// · },
	// · SetHistorySpecListItem: &plot.SetHistorySpecListItem{
	// · · Case: 5,
	// · · Token: example982.go:1:13: IDENTIFIER "default",
	// · },
	// }
}

func ExampleSetHistorySpecListItem() {
	fmt.Println(exampleAST(983, "set history size ident_a"))
	// Output:
	// &plot.SetHistorySpecListItem{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example983.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example983.go:1:13: IDENTIFIER "size",
	// }
}

func ExampleSetHistorySpecListItem_case1() {
	fmt.Println(exampleAST(984, "set history quiet"))
	// Output:
	// &plot.SetHistorySpecListItem{
	// · Case: 1,
	// · Token: example984.go:1:13: IDENTIFIER "quiet",
	// }
}

func ExampleSetHistorySpecListItem_case2() {
	fmt.Println(exampleAST(985, "set history numbers"))
	// Output:
	// &plot.SetHistorySpecListItem{
	// · Case: 2,
	// · Token: example985.go:1:13: IDENTIFIER "numbers",
	// }
}

func ExampleSetHistorySpecListItem_case3() {
	fmt.Println(exampleAST(986, "set history full"))
	// Output:
	// &plot.SetHistorySpecListItem{
	// · Case: 3,
	// · Token: example986.go:1:13: IDENTIFIER "full",
	// }
}

func ExampleSetHistorySpecListItem_case4() {
	fmt.Println(exampleAST(987, "set history trim"))
	// Output:
	// &plot.SetHistorySpecListItem{
	// · Case: 4,
	// · Token: example987.go:1:13: IDENTIFIER "trim",
	// }
}

func ExampleSetHistorySpecListItem_case5() {
	fmt.Println(exampleAST(988, "set history default"))
	// Output:
	// &plot.SetHistorySpecListItem{
	// · Case: 5,
	// · Token: example988.go:1:13: IDENTIFIER "default",
	// }
}

func ExampleSetHistorySpecListOpt() {
	fmt.Println(exampleAST(989, "set history") == (*SetHistorySpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetHistorySpecListOpt_case1() {
	fmt.Println(exampleAST(990, "set history default"))
	// Output:
	// &plot.SetHistorySpecListOpt{
	// · SetHistorySpecList: &plot.SetHistorySpecList{
	// · · SetHistorySpecListItem: &plot.SetHistorySpecListItem{
	// · · · Case: 5,
	// · · · Token: example990.go:1:13: IDENTIFIER "default",
	// · · },
	// · },
	// }
}

func ExampleSetKeySpecList() {
	fmt.Println(exampleAST(991, "set key above"))
	// Output:
	// &plot.SetKeySpecList{
	// · SetKeySpecListItem: &plot.SetKeySpecListItem{
	// · · Case: 6,
	// · · Token: example991.go:1:9: IDENTIFIER "above",
	// · },
	// }
}

func ExampleSetKeySpecList_case1() {
	fmt.Println(exampleAST(992, "set key above above"))
	// Output:
	// &plot.SetKeySpecList{
	// · SetKeySpecList: &plot.SetKeySpecList{
	// · · Case: 1,
	// · · SetKeySpecListItem: &plot.SetKeySpecListItem{
	// · · · Case: 6,
	// · · · Token: example992.go:1:15: IDENTIFIER "above",
	// · · },
	// · },
	// · SetKeySpecListItem: &plot.SetKeySpecListItem{
	// · · Case: 6,
	// · · Token: example992.go:1:9: IDENTIFIER "above",
	// · },
	// }
}

func ExampleSetKeySpecListItem() {
	fmt.Println(exampleAST(993, "set key on"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Token: example993.go:1:9: IDENTIFIER "on",
	// }
}

func ExampleSetKeySpecListItem_case01() {
	fmt.Println(exampleAST(994, "set key off"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 1,
	// · Token: example994.go:1:9: IDENTIFIER "off",
	// }
}

func ExampleSetKeySpecListItem_case02() {
	fmt.Println(exampleAST(995, "set key default"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 2,
	// · Token: example995.go:1:9: IDENTIFIER "default",
	// }
}

func ExampleSetKeySpecListItem_case03() {
	fmt.Println(exampleAST(996, "set key inside"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 3,
	// · Token: example996.go:1:9: IDENTIFIER "inside",
	// }
}

func ExampleSetKeySpecListItem_case04() {
	fmt.Println(exampleAST(997, "set key out"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 4,
	// · Token: example997.go:1:9: IDENTIFIER "out",
	// }
}

func ExampleSetKeySpecListItem_case05() {
	fmt.Println(exampleAST(998, "set key outside"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 5,
	// · Token: example998.go:1:9: IDENTIFIER "outside",
	// }
}

func ExampleSetKeySpecListItem_case06() {
	fmt.Println(exampleAST(999, "set key above"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 6,
	// · Token: example999.go:1:9: IDENTIFIER "above",
	// }
}

func ExampleSetKeySpecListItem_case07() {
	fmt.Println(exampleAST(1000, "set key below"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 7,
	// · Token: example1000.go:1:9: IDENTIFIER "below",
	// }
}

func ExampleSetKeySpecListItem_case08() {
	fmt.Println(exampleAST(1001, "set key under"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 8,
	// · Token: example1001.go:1:9: IDENTIFIER "under",
	// }
}

func ExampleSetKeySpecListItem_case09() {
	fmt.Println(exampleAST(1002, "set key lmargin"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 9,
	// · Token: example1002.go:1:9: IDENTIFIER "lmargin",
	// }
}

func ExampleSetKeySpecListItem_case10() {
	fmt.Println(exampleAST(1003, "set key rmargin"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 10,
	// · Token: example1003.go:1:9: IDENTIFIER "rmargin",
	// }
}

func ExampleSetKeySpecListItem_case11() {
	fmt.Println(exampleAST(1004, "set key tmargin"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 11,
	// · Token: example1004.go:1:9: IDENTIFIER "tmargin",
	// }
}

func ExampleSetKeySpecListItem_case12() {
	fmt.Println(exampleAST(1005, "set key bmargin"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 12,
	// · Token: example1005.go:1:9: IDENTIFIER "bmargin",
	// }
}

func ExampleSetKeySpecListItem_case13() {
	fmt.Println(exampleAST(1006, "set key at ident_a"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 13,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1006.go:1:12: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1006.go:1:9: IDENTIFIER "at",
	// }
}

func ExampleSetKeySpecListItem_case14() {
	fmt.Println(exampleAST(1007, "set key left"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 14,
	// · Token: example1007.go:1:9: IDENTIFIER "left",
	// }
}

func ExampleSetKeySpecListItem_case15() {
	fmt.Println(exampleAST(1008, "set key right"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 15,
	// · Token: example1008.go:1:9: IDENTIFIER "right",
	// }
}

func ExampleSetKeySpecListItem_case16() {
	fmt.Println(exampleAST(1009, "set key center"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 16,
	// · Token: example1009.go:1:9: IDENTIFIER "center",
	// }
}

func ExampleSetKeySpecListItem_case17() {
	fmt.Println(exampleAST(1010, "set key top"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 17,
	// · Token: example1010.go:1:9: IDENTIFIER "top",
	// }
}

func ExampleSetKeySpecListItem_case18() {
	fmt.Println(exampleAST(1011, "set key bot"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 18,
	// · Token: example1011.go:1:9: IDENTIFIER "bot",
	// }
}

func ExampleSetKeySpecListItem_case19() {
	fmt.Println(exampleAST(1012, "set key bottom"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 19,
	// · Token: example1012.go:1:9: IDENTIFIER "bottom",
	// }
}

func ExampleSetKeySpecListItem_case20() {
	fmt.Println(exampleAST(1013, "set key vertical"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 20,
	// · Token: example1013.go:1:9: IDENTIFIER "vertical",
	// }
}

func ExampleSetKeySpecListItem_case21() {
	fmt.Println(exampleAST(1014, "set key horizontal"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 21,
	// · Token: example1014.go:1:9: IDENTIFIER "horizontal",
	// }
}

func ExampleSetKeySpecListItem_case22() {
	fmt.Println(exampleAST(1015, "set key Left"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 22,
	// · Token: example1015.go:1:9: IDENTIFIER "Left",
	// }
}

func ExampleSetKeySpecListItem_case23() {
	fmt.Println(exampleAST(1016, "set key Right"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 23,
	// · Token: example1016.go:1:9: IDENTIFIER "Right",
	// }
}

func ExampleSetKeySpecListItem_case24() {
	fmt.Println(exampleAST(1017, "set key opaque"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 24,
	// · Token: example1017.go:1:9: IDENTIFIER "opaque",
	// }
}

func ExampleSetKeySpecListItem_case25() {
	fmt.Println(exampleAST(1018, "set key noopaque"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 25,
	// · Token: example1018.go:1:9: IDENTIFIER "noopaque",
	// }
}

func ExampleSetKeySpecListItem_case26() {
	fmt.Println(exampleAST(1019, "set key reverse"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 26,
	// · Token: example1019.go:1:9: IDENTIFIER "reverse",
	// }
}

func ExampleSetKeySpecListItem_case27() {
	fmt.Println(exampleAST(1020, "set key noreverse"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 27,
	// · Token: example1020.go:1:9: IDENTIFIER "noreverse",
	// }
}

func ExampleSetKeySpecListItem_case28() {
	fmt.Println(exampleAST(1021, "set key invert"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 28,
	// · Token: example1021.go:1:9: IDENTIFIER "invert",
	// }
}

func ExampleSetKeySpecListItem_case29() {
	fmt.Println(exampleAST(1022, "set key noinvert"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 29,
	// · Token: example1022.go:1:9: IDENTIFIER "noinvert",
	// }
}

func ExampleSetKeySpecListItem_case30() {
	fmt.Println(exampleAST(1023, "set key sample ident_a"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 30,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1023.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1023.go:1:9: IDENTIFIER "sample",
	// }
}

func ExampleSetKeySpecListItem_case31() {
	fmt.Println(exampleAST(1024, "set key samplen ident_a"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 31,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1024.go:1:17: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1024.go:1:9: IDENTIFIER "samplen",
	// }
}

func ExampleSetKeySpecListItem_case32() {
	fmt.Println(exampleAST(1025, "set key spacing ident_a"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 32,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1025.go:1:17: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1025.go:1:9: IDENTIFIER "spacing",
	// }
}

func ExampleSetKeySpecListItem_case33() {
	fmt.Println(exampleAST(1026, "set key width ident_a"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 33,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1026.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1026.go:1:9: IDENTIFIER "width",
	// }
}

func ExampleSetKeySpecListItem_case34() {
	fmt.Println(exampleAST(1027, "set key height ident_a"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 34,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1027.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1027.go:1:9: IDENTIFIER "height",
	// }
}

func ExampleSetKeySpecListItem_case35() {
	fmt.Println(exampleAST(1028, "set key autotitle"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 35,
	// · Token: example1028.go:1:9: IDENTIFIER "autotitle",
	// }
}

func ExampleSetKeySpecListItem_case36() {
	fmt.Println(exampleAST(1029, "set key column"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 36,
	// · Token: example1029.go:1:9: IDENTIFIER "column",
	// }
}

func ExampleSetKeySpecListItem_case37() {
	fmt.Println(exampleAST(1030, "set key columnhead"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 37,
	// · Token: example1030.go:1:9: IDENTIFIER "columnhead",
	// }
}

func ExampleSetKeySpecListItem_case38() {
	fmt.Println(exampleAST(1031, "set key columnheader"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 38,
	// · Token: example1031.go:1:9: IDENTIFIER "columnheader",
	// }
}

func ExampleSetKeySpecListItem_case39() {
	fmt.Println(exampleAST(1032, "set key noautotitle"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 39,
	// · Token: example1032.go:1:9: IDENTIFIER "noautotitle",
	// }
}

func ExampleSetKeySpecListItem_case40() {
	fmt.Println(exampleAST(1033, "set key title ident_a"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 40,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1033.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1033.go:1:9: IDENTIFIER "title",
	// }
}

func ExampleSetKeySpecListItem_case41() {
	fmt.Println(exampleAST(1034, "set key enhanced"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 41,
	// · Token: example1034.go:1:9: IDENTIFIER "enhanced",
	// }
}

func ExampleSetKeySpecListItem_case42() {
	fmt.Println(exampleAST(1035, "set key noenhanced"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 42,
	// · Token: example1035.go:1:9: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetKeySpecListItem_case43() {
	fmt.Println(exampleAST(1036, "set key font ident_a"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 43,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1036.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1036.go:1:9: IDENTIFIER "font",
	// }
}

func ExampleSetKeySpecListItem_case44() {
	fmt.Println(exampleAST(1037, "set key textcolor ident_a"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 44,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1037.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1037.go:1:9: IDENTIFIER "textcolor",
	// }
}

func ExampleSetKeySpecListItem_case45() {
	fmt.Println(exampleAST(1038, "set key box"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 45,
	// · Token: example1038.go:1:9: IDENTIFIER "box",
	// }
}

func ExampleSetKeySpecListItem_case46() {
	fmt.Println(exampleAST(1039, "set key nobox"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 46,
	// · Token: example1039.go:1:9: IDENTIFIER "nobox",
	// }
}

func ExampleSetKeySpecListItem_case47() {
	fmt.Println(exampleAST(1040, "set key nocontours"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 47,
	// · LineStyleListItem: &plot.LineStyleListItem{
	// · · Case: 15,
	// · · Token: example1040.go:1:9: IDENTIFIER "nocontours",
	// · },
	// }
}

func ExampleSetKeySpecListItem_case48() {
	fmt.Println(exampleAST(1041, "set key maxcols ident_a"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 48,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1041.go:1:17: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1041.go:1:9: IDENTIFIER "maxcols",
	// }
}

func ExampleSetKeySpecListItem_case49() {
	fmt.Println(exampleAST(1042, "set key maxcols auto"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 49,
	// · Token: example1042.go:1:9: IDENTIFIER "maxcols",
	// · Token2: example1042.go:1:17: IDENTIFIER "auto",
	// }
}

func ExampleSetKeySpecListItem_case50() {
	fmt.Println(exampleAST(1043, "set key maxrows ident_a"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 50,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1043.go:1:17: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1043.go:1:9: IDENTIFIER "maxrows",
	// }
}

func ExampleSetKeySpecListItem_case51() {
	fmt.Println(exampleAST(1044, "set key maxrows auto"))
	// Output:
	// &plot.SetKeySpecListItem{
	// · Case: 51,
	// · Token: example1044.go:1:9: IDENTIFIER "maxrows",
	// · Token2: example1044.go:1:17: IDENTIFIER "auto",
	// }
}

func ExampleSetKeySpecListOpt() {
	fmt.Println(exampleAST(1045, "set key") == (*SetKeySpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetKeySpecListOpt_case1() {
	fmt.Println(exampleAST(1046, "set key above"))
	// Output:
	// &plot.SetKeySpecListOpt{
	// · SetKeySpecList: &plot.SetKeySpecList{
	// · · SetKeySpecListItem: &plot.SetKeySpecListItem{
	// · · · Case: 6,
	// · · · Token: example1046.go:1:9: IDENTIFIER "above",
	// · · },
	// · },
	// }
}

func ExampleSetLabelSpec() {
	fmt.Println(exampleAST(1047, "set label 1 'foo'"))
	// Output:
	// &plot.SetLabelSpec{
	// · ExpressionOpt: &plot.ExpressionOpt{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 2,
	// · · · · · · Token: example1047.go:1:11: NUM_LIT "1",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetLabelSpecList: &plot.SetLabelSpecList{
	// · · SetLabelSpecListItem: &plot.SetLabelSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 3,
	// · · · · · · · Token: example1047.go:1:13: STRING_LIT "foo",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetLabelSpecList() {
	fmt.Println(exampleAST(1048, "set label 1 'foo'"))
	// Output:
	// &plot.SetLabelSpecList{
	// · SetLabelSpecListItem: &plot.SetLabelSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 3,
	// · · · · · · Token: example1048.go:1:13: STRING_LIT "foo",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetLabelSpecList_case1() {
	fmt.Println(exampleAST(1049, "set label 1 'foo' left"))
	// Output:
	// &plot.SetLabelSpecList{
	// · SetLabelSpecList: &plot.SetLabelSpecList{
	// · · Case: 1,
	// · · SetLabelSpecListItem: &plot.SetLabelSpecListItem{
	// · · · Case: 2,
	// · · · Token: example1049.go:1:19: IDENTIFIER "left",
	// · · },
	// · },
	// · SetLabelSpecListItem: &plot.SetLabelSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 3,
	// · · · · · · Token: example1049.go:1:13: STRING_LIT "foo",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetLabelSpecListItem() {
	fmt.Println(exampleAST(1050, "set label 1 'foo'"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 3,
	// · · · · · Token: example1050.go:1:13: STRING_LIT "foo",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetLabelSpecListItem_case01() {
	fmt.Println(exampleAST(1051, "set label at ident_a"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 1,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1051.go:1:14: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1051.go:1:11: IDENTIFIER "at",
	// }
}

func ExampleSetLabelSpecListItem_case02() {
	fmt.Println(exampleAST(1052, "set label left"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 2,
	// · Token: example1052.go:1:11: IDENTIFIER "left",
	// }
}

func ExampleSetLabelSpecListItem_case03() {
	fmt.Println(exampleAST(1053, "set label center"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 3,
	// · Token: example1053.go:1:11: IDENTIFIER "center",
	// }
}

func ExampleSetLabelSpecListItem_case04() {
	fmt.Println(exampleAST(1054, "set label right"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 4,
	// · Token: example1054.go:1:11: IDENTIFIER "right",
	// }
}

func ExampleSetLabelSpecListItem_case05() {
	fmt.Println(exampleAST(1055, "set label norotate"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 5,
	// · Token: example1055.go:1:11: IDENTIFIER "norotate",
	// }
}

func ExampleSetLabelSpecListItem_case06() {
	fmt.Println(exampleAST(1056, "set label rotate"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 6,
	// · Token: example1056.go:1:11: IDENTIFIER "rotate",
	// }
}

func ExampleSetLabelSpecListItem_case07() {
	fmt.Println(exampleAST(1057, "set label rotate by ident_a"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1057.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1057.go:1:11: IDENTIFIER "rotate",
	// · Token2: example1057.go:1:18: IDENTIFIER "by",
	// }
}

func ExampleSetLabelSpecListItem_case08() {
	fmt.Println(exampleAST(1058, "set label font ident_a"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 8,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1058.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1058.go:1:11: IDENTIFIER "font",
	// }
}

func ExampleSetLabelSpecListItem_case09() {
	fmt.Println(exampleAST(1059, "set label noenhanced"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 9,
	// · Token: example1059.go:1:11: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetLabelSpecListItem_case10() {
	fmt.Println(exampleAST(1060, "set label front"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 10,
	// · Token: example1060.go:1:11: IDENTIFIER "front",
	// }
}

func ExampleSetLabelSpecListItem_case11() {
	fmt.Println(exampleAST(1061, "set label back"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 11,
	// · Token: example1061.go:1:11: IDENTIFIER "back",
	// }
}

func ExampleSetLabelSpecListItem_case12() {
	fmt.Println(exampleAST(1062, "set label textcolor ident_a"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 12,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1062.go:1:21: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1062.go:1:11: IDENTIFIER "textcolor",
	// }
}

func ExampleSetLabelSpecListItem_case13() {
	fmt.Println(exampleAST(1063, "set label point"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 13,
	// · Token: example1063.go:1:11: IDENTIFIER "point",
	// }
}

func ExampleSetLabelSpecListItem_case14() {
	fmt.Println(exampleAST(1064, "set label nopoint"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 14,
	// · Token: example1064.go:1:11: IDENTIFIER "nopoint",
	// }
}

func ExampleSetLabelSpecListItem_case15() {
	fmt.Println(exampleAST(1065, "set label offset ident_a"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1065.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1065.go:1:11: IDENTIFIER "offset",
	// }
}

func ExampleSetLabelSpecListItem_case16() {
	fmt.Println(exampleAST(1066, "set label offset ident_a , ident_b"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 16,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1066.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1066.go:1:28: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1066.go:1:11: IDENTIFIER "offset",
	// · Token2: example1066.go:1:26: ',' ",",
	// }
}

func ExampleSetLabelSpecListItem_case17() {
	fmt.Println(exampleAST(1067, "set label boxed"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 17,
	// · Token: example1067.go:1:11: IDENTIFIER "boxed",
	// }
}

func ExampleSetLabelSpecListItem_case18() {
	fmt.Println(exampleAST(1068, "set label hypertext"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 18,
	// · Token: example1068.go:1:11: IDENTIFIER "hypertext",
	// }
}

func ExampleSetLabelSpecListItem_case19() {
	fmt.Println(exampleAST(1069, "set label nocontours"))
	// Output:
	// &plot.SetLabelSpecListItem{
	// · Case: 19,
	// · LineStyleListItem: &plot.LineStyleListItem{
	// · · Case: 15,
	// · · Token: example1069.go:1:11: IDENTIFIER "nocontours",
	// · },
	// }
}

func ExampleSetLinkSpecList() {
	fmt.Println(exampleAST(1070, "set link x"))
	// Output:
	// &plot.SetLinkSpecList{
	// · SetLinkSpecListItem: &plot.SetLinkSpecListItem{
	// · · Token: example1070.go:1:10: IDENTIFIER "x",
	// · },
	// }
}

func ExampleSetLinkSpecList_case1() {
	fmt.Println(exampleAST(1071, "set link x x"))
	// Output:
	// &plot.SetLinkSpecList{
	// · SetLinkSpecList: &plot.SetLinkSpecList{
	// · · Case: 1,
	// · · SetLinkSpecListItem: &plot.SetLinkSpecListItem{
	// · · · Token: example1071.go:1:12: IDENTIFIER "x",
	// · · },
	// · },
	// · SetLinkSpecListItem: &plot.SetLinkSpecListItem{
	// · · Token: example1071.go:1:10: IDENTIFIER "x",
	// · },
	// }
}

func ExampleSetLinkSpecListItem() {
	fmt.Println(exampleAST(1072, "set link x"))
	// Output:
	// &plot.SetLinkSpecListItem{
	// · Token: example1072.go:1:10: IDENTIFIER "x",
	// }
}

func ExampleSetLinkSpecListItem_case1() {
	fmt.Println(exampleAST(1073, "set link y"))
	// Output:
	// &plot.SetLinkSpecListItem{
	// · Case: 1,
	// · Token: example1073.go:1:10: IDENTIFIER "y",
	// }
}

func ExampleSetLinkSpecListItem_case2() {
	fmt.Println(exampleAST(1074, "set link x2"))
	// Output:
	// &plot.SetLinkSpecListItem{
	// · Case: 2,
	// · Token: example1074.go:1:10: IDENTIFIER "x2",
	// }
}

func ExampleSetLinkSpecListItem_case3() {
	fmt.Println(exampleAST(1075, "set link y2"))
	// Output:
	// &plot.SetLinkSpecListItem{
	// · Case: 3,
	// · Token: example1075.go:1:10: IDENTIFIER "y2",
	// }
}

func ExampleSetLinkSpecListItem_case4() {
	fmt.Println(exampleAST(1076, "set link via ident_a inverse ident_b"))
	// Output:
	// &plot.SetLinkSpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1076.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1076.go:1:30: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1076.go:1:10: IDENTIFIER "via",
	// · Token2: example1076.go:1:22: IDENTIFIER "inverse",
	// }
}

func ExampleSetLinkSpecListOpt() {
	fmt.Println(exampleAST(1077, "set link") == (*SetLinkSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetLinkSpecListOpt_case1() {
	fmt.Println(exampleAST(1078, "set link x"))
	// Output:
	// &plot.SetLinkSpecListOpt{
	// · SetLinkSpecList: &plot.SetLinkSpecList{
	// · · SetLinkSpecListItem: &plot.SetLinkSpecListItem{
	// · · · Token: example1078.go:1:10: IDENTIFIER "x",
	// · · },
	// · },
	// }
}

func ExampleSetLogscaleAxesList() {
	fmt.Println(exampleAST(1080, "set logscale cb"))
	// Output:
	// &plot.SetLogscaleAxesList{
	// · SetLogscaleAxesListItem: &plot.SetLogscaleAxesListItem{
	// · · Case: 5,
	// · · Token: example1080.go:1:14: IDENTIFIER "cb",
	// · },
	// }
}

func ExampleSetLogscaleAxesList_case1() {
	fmt.Println(exampleAST(1081, "set logscale cb cb"))
	// Output:
	// &plot.SetLogscaleAxesList{
	// · SetLogscaleAxesList: &plot.SetLogscaleAxesList{
	// · · Case: 1,
	// · · SetLogscaleAxesListItem: &plot.SetLogscaleAxesListItem{
	// · · · Case: 5,
	// · · · Token: example1081.go:1:17: IDENTIFIER "cb",
	// · · },
	// · },
	// · SetLogscaleAxesListItem: &plot.SetLogscaleAxesListItem{
	// · · Case: 5,
	// · · Token: example1081.go:1:14: IDENTIFIER "cb",
	// · },
	// }
}

func ExampleSetLogscaleAxesListItem() {
	fmt.Println(exampleAST(1082, "unset logscale x"))
	// Output:
	// &plot.SetLogscaleAxesListItem{
	// · Token: example1082.go:1:16: IDENTIFIER "x",
	// }
}

func ExampleSetLogscaleAxesListItem_case1() {
	fmt.Println(exampleAST(1083, "unset logscale x2"))
	// Output:
	// &plot.SetLogscaleAxesListItem{
	// · Case: 1,
	// · Token: example1083.go:1:16: IDENTIFIER "x2",
	// }
}

func ExampleSetLogscaleAxesListItem_case2() {
	fmt.Println(exampleAST(1084, "unset logscale y"))
	// Output:
	// &plot.SetLogscaleAxesListItem{
	// · Case: 2,
	// · Token: example1084.go:1:16: IDENTIFIER "y",
	// }
}

func ExampleSetLogscaleAxesListItem_case3() {
	fmt.Println(exampleAST(1085, "unset logscale y2"))
	// Output:
	// &plot.SetLogscaleAxesListItem{
	// · Case: 3,
	// · Token: example1085.go:1:16: IDENTIFIER "y2",
	// }
}

func ExampleSetLogscaleAxesListItem_case4() {
	fmt.Println(exampleAST(1086, "unset logscale z"))
	// Output:
	// &plot.SetLogscaleAxesListItem{
	// · Case: 4,
	// · Token: example1086.go:1:16: IDENTIFIER "z",
	// }
}

func ExampleSetLogscaleAxesListItem_case5() {
	fmt.Println(exampleAST(1087, "unset logscale cb"))
	// Output:
	// &plot.SetLogscaleAxesListItem{
	// · Case: 5,
	// · Token: example1087.go:1:16: IDENTIFIER "cb",
	// }
}

func ExampleSetLogscaleAxesListItem_case6() {
	fmt.Println(exampleAST(1088, "unset logscale r"))
	// Output:
	// &plot.SetLogscaleAxesListItem{
	// · Case: 6,
	// · Token: example1088.go:1:16: IDENTIFIER "r",
	// }
}

func ExampleSetLogscaleAxesListOpt() {
	fmt.Println(exampleAST(1089, "set log") == (*SetLogscaleAxesListOpt)(nil))
	// Output:
	// true
}

func ExampleSetLogscaleAxesListOpt_case1() {
	fmt.Println(exampleAST(1090, "set logscale cb"))
	// Output:
	// &plot.SetLogscaleAxesListOpt{
	// · SetLogscaleAxesList: &plot.SetLogscaleAxesList{
	// · · SetLogscaleAxesListItem: &plot.SetLogscaleAxesListItem{
	// · · · Case: 5,
	// · · · Token: example1090.go:1:14: IDENTIFIER "cb",
	// · · },
	// · },
	// }
}

func ExampleSetLogscaleSpec() {
	fmt.Println(exampleAST(1079, "set logscale x 10"))
	// Output:
	// &plot.SetLogscaleSpec{
	// · ExpressionOpt: &plot.ExpressionOpt{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 2,
	// · · · · · · Token: example1079.go:1:16: NUM_LIT "10",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetLogscaleAxesListOpt: &plot.SetLogscaleAxesListOpt{
	// · · SetLogscaleAxesList: &plot.SetLogscaleAxesList{
	// · · · SetLogscaleAxesListItem: &plot.SetLogscaleAxesListItem{
	// · · · · Token: example1079.go:1:14: IDENTIFIER "x",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetMappingSpec() {
	fmt.Println(exampleAST(1091, "set mapping cartesian"))
	// Output:
	// &plot.SetMappingSpec{
	// · Token: example1091.go:1:13: IDENTIFIER "cartesian",
	// }
}

func ExampleSetMappingSpec_case1() {
	fmt.Println(exampleAST(1092, "set mapping spherical"))
	// Output:
	// &plot.SetMappingSpec{
	// · Case: 1,
	// · Token: example1092.go:1:13: IDENTIFIER "spherical",
	// }
}

func ExampleSetMappingSpec_case2() {
	fmt.Println(exampleAST(1093, "set mapping cylindrical"))
	// Output:
	// &plot.SetMappingSpec{
	// · Case: 2,
	// · Token: example1093.go:1:13: IDENTIFIER "cylindrical",
	// }
}

func ExampleSetMonochromeSpecOpt() {
	fmt.Println(exampleAST(1094, "set mono") == (*SetMonochromeSpecOpt)(nil))
	// Output:
	// true
}

func ExampleSetMonochromeSpecOpt_case1() {
	fmt.Println(exampleAST(1095, "set mono linetype ident_a nocontours"))
	// Output:
	// &plot.SetMonochromeSpecOpt{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1095.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · LineStyleList: &plot.LineStyleList{
	// · · LineStyleListItem: &plot.LineStyleListItem{
	// · · · Case: 15,
	// · · · Token: example1095.go:1:27: IDENTIFIER "nocontours",
	// · · },
	// · },
	// · Token: example1095.go:1:10: IDENTIFIER "linetype",
	// }
}

func ExampleSetMouseSpecList() {
	fmt.Println(exampleAST(1096, "set mouse labels"))
	// Output:
	// &plot.SetMouseSpecList{
	// · SetMouseSpecListItem: &plot.SetMouseSpecListItem{
	// · · Case: 12,
	// · · Token: example1096.go:1:11: IDENTIFIER "labels",
	// · },
	// }
}

func ExampleSetMouseSpecList_case1() {
	fmt.Println(exampleAST(1097, "set mouse labels labels"))
	// Output:
	// &plot.SetMouseSpecList{
	// · SetMouseSpecList: &plot.SetMouseSpecList{
	// · · Case: 1,
	// · · SetMouseSpecListItem: &plot.SetMouseSpecListItem{
	// · · · Case: 12,
	// · · · Token: example1097.go:1:18: IDENTIFIER "labels",
	// · · },
	// · },
	// · SetMouseSpecListItem: &plot.SetMouseSpecListItem{
	// · · Case: 12,
	// · · Token: example1097.go:1:11: IDENTIFIER "labels",
	// · },
	// }
}

func ExampleSetMouseSpecListItem() {
	fmt.Println(exampleAST(1098, "set mouse doubleclick ident_a"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1098.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1098.go:1:11: IDENTIFIER "doubleclick",
	// }
}

func ExampleSetMouseSpecListItem_case01() {
	fmt.Println(exampleAST(1099, "set mouse nodoubleclick"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 1,
	// · Token: example1099.go:1:11: IDENTIFIER "nodoubleclick",
	// }
}

func ExampleSetMouseSpecListItem_case02() {
	fmt.Println(exampleAST(1100, "set mouse zoomcoordinates"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 2,
	// · Token: example1100.go:1:11: IDENTIFIER "zoomcoordinates",
	// }
}

func ExampleSetMouseSpecListItem_case03() {
	fmt.Println(exampleAST(1101, "set mouse nozoomcoordinates"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 3,
	// · Token: example1101.go:1:11: IDENTIFIER "nozoomcoordinates",
	// }
}

func ExampleSetMouseSpecListItem_case04() {
	fmt.Println(exampleAST(1102, "set mouse zoomfactors ident_a , ident_b"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1102.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1102.go:1:33: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1102.go:1:11: IDENTIFIER "zoomfactors",
	// · Token2: example1102.go:1:31: ',' ",",
	// }
}

func ExampleSetMouseSpecListItem_case05() {
	fmt.Println(exampleAST(1103, "set mouse noruler"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 5,
	// · Token: example1103.go:1:11: IDENTIFIER "noruler",
	// }
}

func ExampleSetMouseSpecListItem_case06() {
	fmt.Println(exampleAST(1104, "set mouse ruler at ident_a , ident_b"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1104.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1104.go:1:30: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1104.go:1:11: IDENTIFIER "ruler",
	// · Token2: example1104.go:1:17: IDENTIFIER "at",
	// · Token3: example1104.go:1:28: ',' ",",
	// }
}

func ExampleSetMouseSpecListItem_case07() {
	fmt.Println(exampleAST(1105, "set mouse polardistancedeg"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 7,
	// · Token: example1105.go:1:11: IDENTIFIER "polardistancedeg",
	// }
}

func ExampleSetMouseSpecListItem_case08() {
	fmt.Println(exampleAST(1106, "set mouse polardistancetan"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 8,
	// · Token: example1106.go:1:11: IDENTIFIER "polardistancetan",
	// }
}

func ExampleSetMouseSpecListItem_case09() {
	fmt.Println(exampleAST(1107, "set mouse nopolardistance"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 9,
	// · Token: example1107.go:1:11: IDENTIFIER "nopolardistance",
	// }
}

func ExampleSetMouseSpecListItem_case10() {
	fmt.Println(exampleAST(1108, "set mouse format ident_a"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1108.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1108.go:1:11: IDENTIFIER "format",
	// }
}

func ExampleSetMouseSpecListItem_case11() {
	fmt.Println(exampleAST(1109, "set mouse mouseformat ident_a"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1109.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1109.go:1:11: IDENTIFIER "mouseformat",
	// }
}

func ExampleSetMouseSpecListItem_case12() {
	fmt.Println(exampleAST(1110, "set mouse labels"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 12,
	// · Token: example1110.go:1:11: IDENTIFIER "labels",
	// }
}

func ExampleSetMouseSpecListItem_case13() {
	fmt.Println(exampleAST(1111, "set mouse labels ident_a"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 13,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1111.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1111.go:1:11: IDENTIFIER "labels",
	// }
}

func ExampleSetMouseSpecListItem_case14() {
	fmt.Println(exampleAST(1112, "set mouse nolabels"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 14,
	// · Token: example1112.go:1:11: IDENTIFIER "nolabels",
	// }
}

func ExampleSetMouseSpecListItem_case15() {
	fmt.Println(exampleAST(1113, "set mouse nolabels ident_a"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1113.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1113.go:1:11: IDENTIFIER "nolabels",
	// }
}

func ExampleSetMouseSpecListItem_case16() {
	fmt.Println(exampleAST(1114, "set mouse zoomjump"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 16,
	// · Token: example1114.go:1:11: IDENTIFIER "zoomjump",
	// }
}

func ExampleSetMouseSpecListItem_case17() {
	fmt.Println(exampleAST(1115, "set mouse nozoomjump"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 17,
	// · Token: example1115.go:1:11: IDENTIFIER "nozoomjump",
	// }
}

func ExampleSetMouseSpecListItem_case18() {
	fmt.Println(exampleAST(1116, "set mouse verbose"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 18,
	// · Token: example1116.go:1:11: IDENTIFIER "verbose",
	// }
}

func ExampleSetMouseSpecListItem_case19() {
	fmt.Println(exampleAST(1117, "set mouse noverbose"))
	// Output:
	// &plot.SetMouseSpecListItem{
	// · Case: 19,
	// · Token: example1117.go:1:11: IDENTIFIER "noverbose",
	// }
}

func ExampleSetMouseSpecListOpt() {
	fmt.Println(exampleAST(1118, "set mouse") == (*SetMouseSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetMouseSpecListOpt_case1() {
	fmt.Println(exampleAST(1119, "set mouse labels"))
	// Output:
	// &plot.SetMouseSpecListOpt{
	// · SetMouseSpecList: &plot.SetMouseSpecList{
	// · · SetMouseSpecListItem: &plot.SetMouseSpecListItem{
	// · · · Case: 12,
	// · · · Token: example1119.go:1:11: IDENTIFIER "labels",
	// · · },
	// · },
	// }
}

func ExampleSetMultiplotSpecList() {
	fmt.Println(exampleAST(1120, "set multiplot columnsfirst"))
	// Output:
	// &plot.SetMultiplotSpecList{
	// · SetMultiplotSpecListItem: &plot.SetMultiplotSpecListItem{
	// · · Case: 6,
	// · · Token: example1120.go:1:15: IDENTIFIER "columnsfirst",
	// · },
	// }
}

func ExampleSetMultiplotSpecList_case1() {
	fmt.Println(exampleAST(1121, "set multiplot columnsfirst columnsfirst"))
	// Output:
	// &plot.SetMultiplotSpecList{
	// · SetMultiplotSpecList: &plot.SetMultiplotSpecList{
	// · · Case: 1,
	// · · SetMultiplotSpecListItem: &plot.SetMultiplotSpecListItem{
	// · · · Case: 6,
	// · · · Token: example1121.go:1:28: IDENTIFIER "columnsfirst",
	// · · },
	// · },
	// · SetMultiplotSpecListItem: &plot.SetMultiplotSpecListItem{
	// · · Case: 6,
	// · · Token: example1121.go:1:15: IDENTIFIER "columnsfirst",
	// · },
	// }
}

func ExampleSetMultiplotSpecListItem() {
	fmt.Println(exampleAST(1122, "set multiplot title ident_a"))
	// Output:
	// &plot.SetMultiplotSpecListItem{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1122.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1122.go:1:15: IDENTIFIER "title",
	// }
}

func ExampleSetMultiplotSpecListItem_case01() {
	fmt.Println(exampleAST(1123, "set multiplot font ident_a"))
	// Output:
	// &plot.SetMultiplotSpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1123.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1123.go:1:15: IDENTIFIER "font",
	// }
}

func ExampleSetMultiplotSpecListItem_case02() {
	fmt.Println(exampleAST(1124, "set multiplot enhanced"))
	// Output:
	// &plot.SetMultiplotSpecListItem{
	// · Case: 2,
	// · Token: example1124.go:1:15: IDENTIFIER "enhanced",
	// }
}

func ExampleSetMultiplotSpecListItem_case03() {
	fmt.Println(exampleAST(1125, "set multiplot noenhanced"))
	// Output:
	// &plot.SetMultiplotSpecListItem{
	// · Case: 3,
	// · Token: example1125.go:1:15: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetMultiplotSpecListItem_case04() {
	fmt.Println(exampleAST(1126, "set multiplot layout ident_a , ident_b"))
	// Output:
	// &plot.SetMultiplotSpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1126.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1126.go:1:32: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1126.go:1:15: IDENTIFIER "layout",
	// · Token2: example1126.go:1:30: ',' ",",
	// }
}

func ExampleSetMultiplotSpecListItem_case05() {
	fmt.Println(exampleAST(1127, "set multiplot rowsfirst"))
	// Output:
	// &plot.SetMultiplotSpecListItem{
	// · Case: 5,
	// · Token: example1127.go:1:15: IDENTIFIER "rowsfirst",
	// }
}

func ExampleSetMultiplotSpecListItem_case06() {
	fmt.Println(exampleAST(1128, "set multiplot columnsfirst"))
	// Output:
	// &plot.SetMultiplotSpecListItem{
	// · Case: 6,
	// · Token: example1128.go:1:15: IDENTIFIER "columnsfirst",
	// }
}

func ExampleSetMultiplotSpecListItem_case07() {
	fmt.Println(exampleAST(1129, "set multiplot downwards"))
	// Output:
	// &plot.SetMultiplotSpecListItem{
	// · Case: 7,
	// · Token: example1129.go:1:15: IDENTIFIER "downwards",
	// }
}

func ExampleSetMultiplotSpecListItem_case08() {
	fmt.Println(exampleAST(1130, "set multiplot upwards"))
	// Output:
	// &plot.SetMultiplotSpecListItem{
	// · Case: 8,
	// · Token: example1130.go:1:15: IDENTIFIER "upwards",
	// }
}

func ExampleSetMultiplotSpecListItem_case09() {
	fmt.Println(exampleAST(1131, "set multiplot scale ident_a"))
	// Output:
	// &plot.SetMultiplotSpecListItem{
	// · Case: 9,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1131.go:1:21: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1131.go:1:15: IDENTIFIER "scale",
	// }
}

func ExampleSetMultiplotSpecListItem_case10() {
	fmt.Println(exampleAST(1132, "set multiplot offset ident_a"))
	// Output:
	// &plot.SetMultiplotSpecListItem{
	// · Case: 10,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1132.go:1:22: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1132.go:1:15: IDENTIFIER "offset",
	// }
}

func ExampleSetMultiplotSpecListItem_case11() {
	fmt.Println(exampleAST(1133, "set multiplot margins ident_a"))
	// Output:
	// &plot.SetMultiplotSpecListItem{
	// · Case: 11,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1133.go:1:23: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1133.go:1:15: IDENTIFIER "margins",
	// }
}

func ExampleSetMultiplotSpecListItem_case12() {
	fmt.Println(exampleAST(1134, "set multiplot spacing ident_a"))
	// Output:
	// &plot.SetMultiplotSpecListItem{
	// · Case: 12,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1134.go:1:23: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1134.go:1:15: IDENTIFIER "spacing",
	// }
}

func ExampleSetMultiplotSpecListItem_case13() {
	fmt.Println(exampleAST(1135, "set multiplot next"))
	// Output:
	// &plot.SetMultiplotSpecListItem{
	// · Case: 13,
	// · Token: example1135.go:1:15: IDENTIFIER "next",
	// }
}

func ExampleSetMultiplotSpecListItem_case14() {
	fmt.Println(exampleAST(1136, "set multiplot previous"))
	// Output:
	// &plot.SetMultiplotSpecListItem{
	// · Case: 14,
	// · Token: example1136.go:1:15: IDENTIFIER "previous",
	// }
}

func ExampleSetMultiplotSpecListOpt() {
	fmt.Println(exampleAST(1137, "set multiplot") == (*SetMultiplotSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetMultiplotSpecListOpt_case1() {
	fmt.Println(exampleAST(1138, "set multiplot columnsfirst"))
	// Output:
	// &plot.SetMultiplotSpecListOpt{
	// · SetMultiplotSpecList: &plot.SetMultiplotSpecList{
	// · · SetMultiplotSpecListItem: &plot.SetMultiplotSpecListItem{
	// · · · Case: 6,
	// · · · Token: example1138.go:1:15: IDENTIFIER "columnsfirst",
	// · · },
	// · },
	// }
}

func ExampleSetMxticsSpecOpt() {
	fmt.Println(exampleAST(1256, "set mcbtics") == (*SetMxticsSpecOpt)(nil))
	// Output:
	// true
}

func ExampleSetMxticsSpecOpt_case1() {
	fmt.Println(exampleAST(1257, "set mcbtics default"))
	// Output:
	// &plot.SetMxticsSpecOpt{
	// · Case: 1,
	// · Token: example1257.go:1:13: IDENTIFIER "default",
	// }
}

func ExampleSetMxticsSpecOpt_case2() {
	fmt.Println(exampleAST(1258, "set mcbtics ident_a"))
	// Output:
	// &plot.SetMxticsSpecOpt{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1258.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetObjectSpecList() {
	fmt.Println(exampleAST(1139, "set object ident_a back"))
	// Output:
	// &plot.SetObjectSpecList{
	// · SetObjectSpecListItem: &plot.SetObjectSpecListItem{
	// · · Case: 1,
	// · · Token: example1139.go:1:20: IDENTIFIER "back",
	// · },
	// }
}

func ExampleSetObjectSpecList_case1() {
	fmt.Println(exampleAST(1140, "set object ident_a back back"))
	// Output:
	// &plot.SetObjectSpecList{
	// · SetObjectSpecList: &plot.SetObjectSpecList{
	// · · Case: 1,
	// · · SetObjectSpecListItem: &plot.SetObjectSpecListItem{
	// · · · Case: 1,
	// · · · Token: example1140.go:1:25: IDENTIFIER "back",
	// · · },
	// · },
	// · SetObjectSpecListItem: &plot.SetObjectSpecListItem{
	// · · Case: 1,
	// · · Token: example1140.go:1:20: IDENTIFIER "back",
	// · },
	// }
}

func ExampleSetObjectSpecListItem() {
	fmt.Println(exampleAST(1141, "set object ident_a front"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Token: example1141.go:1:20: IDENTIFIER "front",
	// }
}

func ExampleSetObjectSpecListItem_case01() {
	fmt.Println(exampleAST(1142, "set object ident_a back"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 1,
	// · Token: example1142.go:1:20: IDENTIFIER "back",
	// }
}

func ExampleSetObjectSpecListItem_case02() {
	fmt.Println(exampleAST(1143, "set object ident_a behind"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 2,
	// · Token: example1143.go:1:20: IDENTIFIER "behind",
	// }
}

func ExampleSetObjectSpecListItem_case03() {
	fmt.Println(exampleAST(1144, "set object ident_a clip"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 3,
	// · Token: example1144.go:1:20: IDENTIFIER "clip",
	// }
}

func ExampleSetObjectSpecListItem_case04() {
	fmt.Println(exampleAST(1145, "set object ident_a noclip"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 4,
	// · Token: example1145.go:1:20: IDENTIFIER "noclip",
	// }
}

func ExampleSetObjectSpecListItem_case05() {
	fmt.Println(exampleAST(1146, "set object ident_a fc ident_b"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 5,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1146.go:1:23: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1146.go:1:20: IDENTIFIER "fc",
	// }
}

func ExampleSetObjectSpecListItem_case06() {
	fmt.Println(exampleAST(1147, "set object ident_a fc lt ident_b"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 6,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1147.go:1:26: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1147.go:1:20: IDENTIFIER "fc",
	// · Token2: example1147.go:1:23: IDENTIFIER "lt",
	// }
}

func ExampleSetObjectSpecListItem_case07() {
	fmt.Println(exampleAST(1148, "set object ident_a fillcolor ident_b"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 7,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1148.go:1:30: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1148.go:1:20: IDENTIFIER "fillcolor",
	// }
}

func ExampleSetObjectSpecListItem_case08() {
	fmt.Println(exampleAST(1149, "set object ident_a fillcolor lt ident_b"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 8,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1149.go:1:33: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1149.go:1:20: IDENTIFIER "fillcolor",
	// · Token2: example1149.go:1:30: IDENTIFIER "lt",
	// }
}

func ExampleSetObjectSpecListItem_case09() {
	fmt.Println(exampleAST(1150, "set object ident_a fs bo"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 9,
	// · SetStyleFillSpecList: &plot.SetStyleFillSpecList{
	// · · SetStyleFillSpecListItem: &plot.SetStyleFillSpecListItem{
	// · · · Case: 5,
	// · · · Token: example1150.go:1:23: IDENTIFIER "bo",
	// · · },
	// · },
	// · Token: example1150.go:1:20: IDENTIFIER "fs",
	// }
}

func ExampleSetObjectSpecListItem_case10() {
	fmt.Println(exampleAST(1151, "set object ident_a fillstyle bo"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 10,
	// · SetStyleFillSpecList: &plot.SetStyleFillSpecList{
	// · · SetStyleFillSpecListItem: &plot.SetStyleFillSpecListItem{
	// · · · Case: 5,
	// · · · Token: example1151.go:1:30: IDENTIFIER "bo",
	// · · },
	// · },
	// · Token: example1151.go:1:20: IDENTIFIER "fillstyle",
	// }
}

func ExampleSetObjectSpecListItem_case11() {
	fmt.Println(exampleAST(1152, "set object ident_a default"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 11,
	// · Token: example1152.go:1:20: IDENTIFIER "default",
	// }
}

func ExampleSetObjectSpecListItem_case12() {
	fmt.Println(exampleAST(1153, "set object ident_a lw ident_b"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 12,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1153.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1153.go:1:20: IDENTIFIER "lw",
	// }
}

func ExampleSetObjectSpecListItem_case13() {
	fmt.Println(exampleAST(1154, "set object ident_a linewidth ident_b"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 13,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1154.go:1:30: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1154.go:1:20: IDENTIFIER "linewidth",
	// }
}

func ExampleSetObjectSpecListItem_case14() {
	fmt.Println(exampleAST(1155, "set object ident_a dt ident_b"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 14,
	// · DashTypeSpec: &plot.DashTypeSpec{
	// · · Case: 1,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1155.go:1:23: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1155.go:1:20: IDENTIFIER "dt",
	// }
}

func ExampleSetObjectSpecListItem_case15() {
	fmt.Println(exampleAST(1156, "set object ident_a dashtype ident_b"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 15,
	// · DashTypeSpec: &plot.DashTypeSpec{
	// · · Case: 1,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1156.go:1:29: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1156.go:1:20: IDENTIFIER "dashtype",
	// }
}

func ExampleSetObjectSpecListItem_case16() {
	fmt.Println(exampleAST(1157, "set object ident_a rectangle"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 16,
	// · Token: example1157.go:1:20: IDENTIFIER "rectangle",
	// }
}

func ExampleSetObjectSpecListItem_case17() {
	fmt.Println(exampleAST(1158, "set object ident_a from ident_b to ident_c"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 17,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1158.go:1:25: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Position2: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1158.go:1:36: IDENTIFIER "ident_c",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1158.go:1:20: IDENTIFIER "from",
	// · Token2: example1158.go:1:33: IDENTIFIER "to",
	// }
}

func ExampleSetObjectSpecListItem_case18() {
	fmt.Println(exampleAST(1159, "set object ident_a from ident_b rto ident_c"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 18,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1159.go:1:25: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Position2: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1159.go:1:37: IDENTIFIER "ident_c",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1159.go:1:20: IDENTIFIER "from",
	// · Token2: example1159.go:1:33: IDENTIFIER "rto",
	// }
}

func ExampleSetObjectSpecListItem_case19() {
	fmt.Println(exampleAST(1160, "set object ident_a center ident_b size ident_c"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 19,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1160.go:1:27: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Position2: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1160.go:1:40: IDENTIFIER "ident_c",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1160.go:1:20: IDENTIFIER "center",
	// · Token2: example1160.go:1:35: IDENTIFIER "size",
	// }
}

func ExampleSetObjectSpecListItem_case20() {
	fmt.Println(exampleAST(1161, "set object ident_a at ident_b size ident_c"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 20,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1161.go:1:23: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Position2: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1161.go:1:36: IDENTIFIER "ident_c",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1161.go:1:20: IDENTIFIER "at",
	// · Token2: example1161.go:1:31: IDENTIFIER "size",
	// }
}

func ExampleSetObjectSpecListItem_case21() {
	fmt.Println(exampleAST(1162, "set object ident_a at ident_b radius ident_c"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 21,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1162.go:1:23: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Position2: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1162.go:1:38: IDENTIFIER "ident_c",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1162.go:1:20: IDENTIFIER "at",
	// · Token2: example1162.go:1:31: IDENTIFIER "radius",
	// }
}

func ExampleSetObjectSpecListItem_case22() {
	fmt.Println(exampleAST(1163, "set object ident_a ellipse"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 22,
	// · Token: example1163.go:1:20: IDENTIFIER "ellipse",
	// }
}

func ExampleSetObjectSpecListItem_case23() {
	fmt.Println(exampleAST(1164, "set object ident_a angle ident_b"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 23,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1164.go:1:26: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1164.go:1:20: IDENTIFIER "angle",
	// }
}

func ExampleSetObjectSpecListItem_case24() {
	fmt.Println(exampleAST(1165, "set object ident_a units xy"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 24,
	// · Token: example1165.go:1:20: IDENTIFIER "units",
	// · Token2: example1165.go:1:26: IDENTIFIER "xy",
	// }
}

func ExampleSetObjectSpecListItem_case25() {
	fmt.Println(exampleAST(1166, "set object ident_a units xx"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 25,
	// · Token: example1166.go:1:20: IDENTIFIER "units",
	// · Token2: example1166.go:1:26: IDENTIFIER "xx",
	// }
}

func ExampleSetObjectSpecListItem_case26() {
	fmt.Println(exampleAST(1167, "set object ident_a units yy"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 26,
	// · Token: example1167.go:1:20: IDENTIFIER "units",
	// · Token2: example1167.go:1:26: IDENTIFIER "yy",
	// }
}

func ExampleSetObjectSpecListItem_case27() {
	fmt.Println(exampleAST(1168, "set object ident_a circle"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 27,
	// · Token: example1168.go:1:20: IDENTIFIER "circle",
	// }
}

func ExampleSetObjectSpecListItem_case28() {
	fmt.Println(exampleAST(1169, "set object ident_a arc [ ident_b : ident_c ]"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 28,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1169.go:1:26: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1169.go:1:36: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1169.go:1:20: IDENTIFIER "arc",
	// · Token2: example1169.go:1:24: '[' "[",
	// · Token3: example1169.go:1:34: ':' ":",
	// · Token4: example1169.go:1:44: ']' "]",
	// }
}

func ExampleSetObjectSpecListItem_case29() {
	fmt.Println(exampleAST(1170, "set object ident_a polygon"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 29,
	// · Token: example1170.go:1:20: IDENTIFIER "polygon",
	// }
}

func ExampleSetObjectSpecListItem_case30() {
	fmt.Println(exampleAST(1171, "set object ident_a to ident_b"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 30,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1171.go:1:23: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1171.go:1:20: IDENTIFIER "to",
	// }
}

func ExampleSetObjectSpecListItem_case31() {
	fmt.Println(exampleAST(1172, "set object ident_a rto ident_b"))
	// Output:
	// &plot.SetObjectSpecListItem{
	// · Case: 31,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1172.go:1:24: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1172.go:1:20: IDENTIFIER "rto",
	// }
}

func ExampleSetOffsetsSpecOpt() {
	fmt.Println(exampleAST(1173, "set offset") == (*SetOffsetsSpecOpt)(nil))
	// Output:
	// true
}

func ExampleSetOffsetsSpecOpt_case1() {
	fmt.Println(exampleAST(1174, "set offset ident_a , ident_b"))
	// Output:
	// &plot.SetOffsetsSpecOpt{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1174.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1174.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1174.go:1:20: ',' ",",
	// }
}

func ExampleSetOffsetsSpecOpt_case2() {
	fmt.Println(exampleAST(1175, "set offset ident_a , ident_b , ident_c , ident_d"))
	// Output:
	// &plot.SetOffsetsSpecOpt{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1175.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1175.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression3: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1175.go:1:32: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression4: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1175.go:1:42: IDENTIFIER "ident_d",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1175.go:1:20: ',' ",",
	// · Token2: example1175.go:1:30: ',' ",",
	// · Token3: example1175.go:1:40: ',' ",",
	// }
}

func ExampleSetPaletteSpecList() {
	fmt.Println(exampleAST(1176, "set pal color"))
	// Output:
	// &plot.SetPaletteSpecList{
	// · SetPaletteSpecListItem: &plot.SetPaletteSpecListItem{
	// · · Case: 1,
	// · · Token: example1176.go:1:9: IDENTIFIER "color",
	// · },
	// }
}

func ExampleSetPaletteSpecList_case1() {
	fmt.Println(exampleAST(1177, "set pal color color"))
	// Output:
	// &plot.SetPaletteSpecList{
	// · SetPaletteSpecList: &plot.SetPaletteSpecList{
	// · · Case: 1,
	// · · SetPaletteSpecListItem: &plot.SetPaletteSpecListItem{
	// · · · Case: 1,
	// · · · Token: example1177.go:1:15: IDENTIFIER "color",
	// · · },
	// · },
	// · SetPaletteSpecListItem: &plot.SetPaletteSpecListItem{
	// · · Case: 1,
	// · · Token: example1177.go:1:9: IDENTIFIER "color",
	// · },
	// }
}

func ExampleSetPaletteSpecListItem() {
	fmt.Println(exampleAST(1178, "set pal gray"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Token: example1178.go:1:9: IDENTIFIER "gray",
	// }
}

func ExampleSetPaletteSpecListItem_case01() {
	fmt.Println(exampleAST(1179, "set pal color"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 1,
	// · Token: example1179.go:1:9: IDENTIFIER "color",
	// }
}

func ExampleSetPaletteSpecListItem_case02() {
	fmt.Println(exampleAST(1180, "set pal gamma ident_a"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1180.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1180.go:1:9: IDENTIFIER "gamma",
	// }
}

func ExampleSetPaletteSpecListItem_case03() {
	fmt.Println(exampleAST(1181, "set pal rgb ident_a , ident_b , ident_c"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1181.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1181.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression3: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1181.go:1:33: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1181.go:1:9: IDENTIFIER "rgb",
	// · Token2: example1181.go:1:21: ',' ",",
	// · Token3: example1181.go:1:31: ',' ",",
	// }
}

func ExampleSetPaletteSpecListItem_case04() {
	fmt.Println(exampleAST(1182, "set pal rgbformulae ident_a , ident_b , ident_c"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1182.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1182.go:1:31: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression3: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1182.go:1:41: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1182.go:1:9: IDENTIFIER "rgbformulae",
	// · Token2: example1182.go:1:29: ',' ",",
	// · Token3: example1182.go:1:39: ',' ",",
	// }
}

func ExampleSetPaletteSpecListItem_case05() {
	fmt.Println(exampleAST(1183, "set pal defined"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 5,
	// · Token: example1183.go:1:9: IDENTIFIER "defined",
	// }
}

func ExampleSetPaletteSpecListItem_case06() {
	fmt.Println(exampleAST(1184, "set pal defined ( ident_a ident_b )"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 6,
	// · SetPalleteDefinedColorList: &plot.SetPalleteDefinedColorList{
	// · · SetPalleteDefinedColorListItem: &plot.SetPalleteDefinedColorListItem{
	// · · · Case: 1,
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1184.go:1:19: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1184.go:1:27: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1184.go:1:9: IDENTIFIER "defined",
	// · Token2: example1184.go:1:17: '(' "(",
	// · Token3: example1184.go:1:35: ')' ")",
	// }
}

func ExampleSetPaletteSpecListItem_case07() {
	fmt.Println(exampleAST(1185, "set pal file ident_a"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1185.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1185.go:1:9: IDENTIFIER "file",
	// }
}

func ExampleSetPaletteSpecListItem_case08() {
	fmt.Println(exampleAST(1186, "set pal func ident_a , ident_b , ident_c"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 8,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1186.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1186.go:1:24: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression3: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1186.go:1:34: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1186.go:1:9: IDENTIFIER "func",
	// · Token2: example1186.go:1:22: ',' ",",
	// · Token3: example1186.go:1:32: ',' ",",
	// }
}

func ExampleSetPaletteSpecListItem_case09() {
	fmt.Println(exampleAST(1187, "set pal functions ident_a , ident_b , ident_c"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 9,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1187.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1187.go:1:29: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression3: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1187.go:1:39: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1187.go:1:9: IDENTIFIER "functions",
	// · Token2: example1187.go:1:27: ',' ",",
	// · Token3: example1187.go:1:37: ',' ",",
	// }
}

func ExampleSetPaletteSpecListItem_case10() {
	fmt.Println(exampleAST(1188, "set pal cubehelix"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 10,
	// · Token: example1188.go:1:9: IDENTIFIER "cubehelix",
	// }
}

func ExampleSetPaletteSpecListItem_case11() {
	fmt.Println(exampleAST(1189, "set palette start ident_a"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1189.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1189.go:1:13: IDENTIFIER "start",
	// }
}

func ExampleSetPaletteSpecListItem_case12() {
	fmt.Println(exampleAST(1190, "set pal cycles ident_a"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 12,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1190.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1190.go:1:9: IDENTIFIER "cycles",
	// }
}

func ExampleSetPaletteSpecListItem_case13() {
	fmt.Println(exampleAST(1191, "set palette saturation ident_a"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 13,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1191.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1191.go:1:13: IDENTIFIER "saturation",
	// }
}

func ExampleSetPaletteSpecListItem_case14() {
	fmt.Println(exampleAST(1192, "set pal mode RGB"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 14,
	// · Token: example1192.go:1:9: IDENTIFIER "mode",
	// · Token2: example1192.go:1:14: IDENTIFIER "RGB",
	// }
}

func ExampleSetPaletteSpecListItem_case15() {
	fmt.Println(exampleAST(1193, "set pal mode HSV"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 15,
	// · Token: example1193.go:1:9: IDENTIFIER "mode",
	// · Token2: example1193.go:1:14: IDENTIFIER "HSV",
	// }
}

func ExampleSetPaletteSpecListItem_case16() {
	fmt.Println(exampleAST(1194, "set pal mode CMY"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 16,
	// · Token: example1194.go:1:9: IDENTIFIER "mode",
	// · Token2: example1194.go:1:14: IDENTIFIER "CMY",
	// }
}

func ExampleSetPaletteSpecListItem_case17() {
	fmt.Println(exampleAST(1195, "set pal mode YIQ"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 17,
	// · Token: example1195.go:1:9: IDENTIFIER "mode",
	// · Token2: example1195.go:1:14: IDENTIFIER "YIQ",
	// }
}

func ExampleSetPaletteSpecListItem_case18() {
	fmt.Println(exampleAST(1196, "set pal mode XYZ"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 18,
	// · Token: example1196.go:1:9: IDENTIFIER "mode",
	// · Token2: example1196.go:1:14: IDENTIFIER "XYZ",
	// }
}

func ExampleSetPaletteSpecListItem_case19() {
	fmt.Println(exampleAST(1197, "set pal model RGB"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 19,
	// · Token: example1197.go:1:9: IDENTIFIER "model",
	// · Token2: example1197.go:1:15: IDENTIFIER "RGB",
	// }
}

func ExampleSetPaletteSpecListItem_case20() {
	fmt.Println(exampleAST(1198, "set pal model HSV"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 20,
	// · Token: example1198.go:1:9: IDENTIFIER "model",
	// · Token2: example1198.go:1:15: IDENTIFIER "HSV",
	// }
}

func ExampleSetPaletteSpecListItem_case21() {
	fmt.Println(exampleAST(1199, "set pal model CMY"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 21,
	// · Token: example1199.go:1:9: IDENTIFIER "model",
	// · Token2: example1199.go:1:15: IDENTIFIER "CMY",
	// }
}

func ExampleSetPaletteSpecListItem_case22() {
	fmt.Println(exampleAST(1200, "set pal model YIQ"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 22,
	// · Token: example1200.go:1:9: IDENTIFIER "model",
	// · Token2: example1200.go:1:15: IDENTIFIER "YIQ",
	// }
}

func ExampleSetPaletteSpecListItem_case23() {
	fmt.Println(exampleAST(1201, "set pal model XYZ"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 23,
	// · Token: example1201.go:1:9: IDENTIFIER "model",
	// · Token2: example1201.go:1:15: IDENTIFIER "XYZ",
	// }
}

func ExampleSetPaletteSpecListItem_case24() {
	fmt.Println(exampleAST(1202, "set pal positive"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 24,
	// · Token: example1202.go:1:9: IDENTIFIER "positive",
	// }
}

func ExampleSetPaletteSpecListItem_case25() {
	fmt.Println(exampleAST(1203, "set palette negative"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 25,
	// · Token: example1203.go:1:13: IDENTIFIER "negative",
	// }
}

func ExampleSetPaletteSpecListItem_case26() {
	fmt.Println(exampleAST(1204, "set palette nops_allcF"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 26,
	// · Token: example1204.go:1:13: IDENTIFIER "nops_allcF",
	// }
}

func ExampleSetPaletteSpecListItem_case27() {
	fmt.Println(exampleAST(1205, "set pal ps_allcF"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 27,
	// · Token: example1205.go:1:9: IDENTIFIER "ps_allcF",
	// }
}

func ExampleSetPaletteSpecListItem_case28() {
	fmt.Println(exampleAST(1206, "set pal maxcolors ident_a"))
	// Output:
	// &plot.SetPaletteSpecListItem{
	// · Case: 28,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1206.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1206.go:1:9: IDENTIFIER "maxcolors",
	// }
}

func ExampleSetPaletteSpecListOpt() {
	fmt.Println(exampleAST(1207, "set pal") == (*SetPaletteSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetPaletteSpecListOpt_case1() {
	fmt.Println(exampleAST(1208, "set pal color"))
	// Output:
	// &plot.SetPaletteSpecListOpt{
	// · SetPaletteSpecList: &plot.SetPaletteSpecList{
	// · · SetPaletteSpecListItem: &plot.SetPaletteSpecListItem{
	// · · · Case: 1,
	// · · · Token: example1208.go:1:9: IDENTIFIER "color",
	// · · },
	// · },
	// }
}

func ExampleSetPalleteDefinedColorList() {
	fmt.Println(exampleAST(1209, "set pal defined ( ident_a ident_b )"))
	// Output:
	// &plot.SetPalleteDefinedColorList{
	// · SetPalleteDefinedColorListItem: &plot.SetPalleteDefinedColorListItem{
	// · · Case: 1,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1209.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1209.go:1:27: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetPalleteDefinedColorList_case1() {
	fmt.Println(exampleAST(1210, "set pal defined ( ident_a ident_b , ident_c ident_d )"))
	// Output:
	// &plot.SetPalleteDefinedColorList{
	// · SetPalleteDefinedColorList: &plot.SetPalleteDefinedColorList{
	// · · Case: 1,
	// · · SetPalleteDefinedColorListItem: &plot.SetPalleteDefinedColorListItem{
	// · · · Case: 1,
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1210.go:1:37: IDENTIFIER "ident_c",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1210.go:1:45: IDENTIFIER "ident_d",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example1210.go:1:35: ',' ",",
	// · },
	// · SetPalleteDefinedColorListItem: &plot.SetPalleteDefinedColorListItem{
	// · · Case: 1,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1210.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1210.go:1:27: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetPalleteDefinedColorListItem() {
	fmt.Println(exampleAST(1211, "set pal defined ( ident_a ident_b ident_c ident_d )"))
	// Output:
	// &plot.SetPalleteDefinedColorListItem{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1211.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1211.go:1:27: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1211.go:1:35: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression3: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1211.go:1:43: IDENTIFIER "ident_d",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetPalleteDefinedColorListItem_case1() {
	fmt.Println(exampleAST(1212, "set pal defined ( ident_a ident_b )"))
	// Output:
	// &plot.SetPalleteDefinedColorListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1212.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1212.go:1:27: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetPaxisSpecList() {
	fmt.Println(exampleAST(1213, "set paxis ident_a tics"))
	// Output:
	// &plot.SetPaxisSpecList{
	// · SetPaxisSpecListItem: &plot.SetPaxisSpecListItem{
	// · · Case: 1,
	// · · Token: example1213.go:1:19: IDENTIFIER "tics",
	// · },
	// }
}

func ExampleSetPaxisSpecList_case1() {
	fmt.Println(exampleAST(1214, "set paxis ident_a tics tics"))
	// Output:
	// &plot.SetPaxisSpecList{
	// · SetPaxisSpecList: &plot.SetPaxisSpecList{
	// · · Case: 1,
	// · · SetPaxisSpecListItem: &plot.SetPaxisSpecListItem{
	// · · · Case: 1,
	// · · · Token: example1214.go:1:24: IDENTIFIER "tics",
	// · · },
	// · },
	// · SetPaxisSpecListItem: &plot.SetPaxisSpecListItem{
	// · · Case: 1,
	// · · Token: example1214.go:1:19: IDENTIFIER "tics",
	// · },
	// }
}

func ExampleSetPaxisSpecListItem() {
	fmt.Println(exampleAST(1215, "set paxis ident_a range extend"))
	// Output:
	// &plot.SetPaxisSpecListItem{
	// · SetRangeSpecList: &plot.SetRangeSpecList{
	// · · SetRangeSpecListItem: &plot.SetRangeSpecListItem{
	// · · · Case: 4,
	// · · · Token: example1215.go:1:25: IDENTIFIER "extend",
	// · · },
	// · },
	// · Token: example1215.go:1:19: IDENTIFIER "range",
	// }
}

func ExampleSetPaxisSpecListItem_case1() {
	fmt.Println(exampleAST(1216, "set paxis ident_a tics"))
	// Output:
	// &plot.SetPaxisSpecListItem{
	// · Case: 1,
	// · Token: example1216.go:1:19: IDENTIFIER "tics",
	// }
}

func ExampleSetPaxisSpecListOpt() {
	fmt.Println(exampleAST(1217, "set paxis ident_a") == (*SetPaxisSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetPaxisSpecListOpt_case1() {
	fmt.Println(exampleAST(1218, "set paxis ident_a tics"))
	// Output:
	// &plot.SetPaxisSpecListOpt{
	// · SetPaxisSpecList: &plot.SetPaxisSpecList{
	// · · SetPaxisSpecListItem: &plot.SetPaxisSpecListItem{
	// · · · Case: 1,
	// · · · Token: example1218.go:1:19: IDENTIFIER "tics",
	// · · },
	// · },
	// }
}

func ExampleSetPm3dSpecList() {
	fmt.Println(exampleAST(1219, "set pm3d begin"))
	// Output:
	// &plot.SetPm3dSpecList{
	// · SetPm3dSpecListItem: &plot.SetPm3dSpecListItem{
	// · · Case: 7,
	// · · Token: example1219.go:1:10: IDENTIFIER "begin",
	// · },
	// }
}

func ExampleSetPm3dSpecList_case1() {
	fmt.Println(exampleAST(1220, "set pm3d begin begin"))
	// Output:
	// &plot.SetPm3dSpecList{
	// · SetPm3dSpecList: &plot.SetPm3dSpecList{
	// · · Case: 1,
	// · · SetPm3dSpecListItem: &plot.SetPm3dSpecListItem{
	// · · · Case: 7,
	// · · · Token: example1220.go:1:16: IDENTIFIER "begin",
	// · · },
	// · },
	// · SetPm3dSpecListItem: &plot.SetPm3dSpecListItem{
	// · · Case: 7,
	// · · Token: example1220.go:1:10: IDENTIFIER "begin",
	// · },
	// }
}

func ExampleSetPm3dSpecListItem() {
	fmt.Println(exampleAST(1221, "set pm3d at ident_a"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1221.go:1:13: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1221.go:1:10: IDENTIFIER "at",
	// }
}

func ExampleSetPm3dSpecListItem_case01() {
	fmt.Println(exampleAST(1222, "set pm3d interpolate ident_a , ident_b"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1222.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1222.go:1:32: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1222.go:1:10: IDENTIFIER "interpolate",
	// · Token2: example1222.go:1:30: ',' ",",
	// }
}

func ExampleSetPm3dSpecListItem_case02() {
	fmt.Println(exampleAST(1223, "set pm3d scansautomatic"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 2,
	// · Token: example1223.go:1:10: IDENTIFIER "scansautomatic",
	// }
}

func ExampleSetPm3dSpecListItem_case03() {
	fmt.Println(exampleAST(1224, "set pm3d scansforward"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 3,
	// · Token: example1224.go:1:10: IDENTIFIER "scansforward",
	// }
}

func ExampleSetPm3dSpecListItem_case04() {
	fmt.Println(exampleAST(1225, "set pm3d scansbackward"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 4,
	// · Token: example1225.go:1:10: IDENTIFIER "scansbackward",
	// }
}

func ExampleSetPm3dSpecListItem_case05() {
	fmt.Println(exampleAST(1226, "set pm3d depthorder"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 5,
	// · Token: example1226.go:1:10: IDENTIFIER "depthorder",
	// }
}

func ExampleSetPm3dSpecListItem_case06() {
	fmt.Println(exampleAST(1227, "set pm3d flush"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 6,
	// · Token: example1227.go:1:10: IDENTIFIER "flush",
	// }
}

func ExampleSetPm3dSpecListItem_case07() {
	fmt.Println(exampleAST(1228, "set pm3d begin"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 7,
	// · Token: example1228.go:1:10: IDENTIFIER "begin",
	// }
}

func ExampleSetPm3dSpecListItem_case08() {
	fmt.Println(exampleAST(1229, "set pm3d center"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 8,
	// · Token: example1229.go:1:10: IDENTIFIER "center",
	// }
}

func ExampleSetPm3dSpecListItem_case09() {
	fmt.Println(exampleAST(1230, "set pm3d end"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 9,
	// · Token: example1230.go:1:10: IDENTIFIER "end",
	// }
}

func ExampleSetPm3dSpecListItem_case10() {
	fmt.Println(exampleAST(1231, "set pm3d ftriangles"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 10,
	// · Token: example1231.go:1:10: IDENTIFIER "ftriangles",
	// }
}

func ExampleSetPm3dSpecListItem_case11() {
	fmt.Println(exampleAST(1232, "set pm3d noftriangles"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 11,
	// · Token: example1232.go:1:10: IDENTIFIER "noftriangles",
	// }
}

func ExampleSetPm3dSpecListItem_case12() {
	fmt.Println(exampleAST(1233, "set pm3d clip1in"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 12,
	// · Token: example1233.go:1:10: IDENTIFIER "clip1in",
	// }
}

func ExampleSetPm3dSpecListItem_case13() {
	fmt.Println(exampleAST(1234, "set pm3d clip4in"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 13,
	// · Token: example1234.go:1:10: IDENTIFIER "clip4in",
	// }
}

func ExampleSetPm3dSpecListItem_case14() {
	fmt.Println(exampleAST(1235, "set pm3d corners2color"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 14,
	// · Token: example1235.go:1:10: IDENTIFIER "corners2color",
	// }
}

func ExampleSetPm3dSpecListItem_case15() {
	fmt.Println(exampleAST(1236, "set pm3d mean"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 15,
	// · Token: example1236.go:1:10: IDENTIFIER "mean",
	// }
}

func ExampleSetPm3dSpecListItem_case16() {
	fmt.Println(exampleAST(1237, "set pm3d geomean"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 16,
	// · Token: example1237.go:1:10: IDENTIFIER "geomean",
	// }
}

func ExampleSetPm3dSpecListItem_case17() {
	fmt.Println(exampleAST(1238, "set pm3d harmean"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 17,
	// · Token: example1238.go:1:10: IDENTIFIER "harmean",
	// }
}

func ExampleSetPm3dSpecListItem_case18() {
	fmt.Println(exampleAST(1239, "set pm3d rms"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 18,
	// · Token: example1239.go:1:10: IDENTIFIER "rms",
	// }
}

func ExampleSetPm3dSpecListItem_case19() {
	fmt.Println(exampleAST(1240, "set pm3d median"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 19,
	// · Token: example1240.go:1:10: IDENTIFIER "median",
	// }
}

func ExampleSetPm3dSpecListItem_case20() {
	fmt.Println(exampleAST(1241, "set pm3d min"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 20,
	// · Token: example1241.go:1:10: IDENTIFIER "min",
	// }
}

func ExampleSetPm3dSpecListItem_case21() {
	fmt.Println(exampleAST(1242, "set pm3d max"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 21,
	// · Token: example1242.go:1:10: IDENTIFIER "max",
	// }
}

func ExampleSetPm3dSpecListItem_case22() {
	fmt.Println(exampleAST(1243, "set pm3d c1"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 22,
	// · Token: example1243.go:1:10: IDENTIFIER "c1",
	// }
}

func ExampleSetPm3dSpecListItem_case23() {
	fmt.Println(exampleAST(1244, "set pm3d c2"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 23,
	// · Token: example1244.go:1:10: IDENTIFIER "c2",
	// }
}

func ExampleSetPm3dSpecListItem_case24() {
	fmt.Println(exampleAST(1245, "set pm3d c3"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 24,
	// · Token: example1245.go:1:10: IDENTIFIER "c3",
	// }
}

func ExampleSetPm3dSpecListItem_case25() {
	fmt.Println(exampleAST(1246, "set pm3d c4"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 25,
	// · Token: example1246.go:1:10: IDENTIFIER "c4",
	// }
}

func ExampleSetPm3dSpecListItem_case26() {
	fmt.Println(exampleAST(1247, "set pm3d hidden3d"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 26,
	// · Token: example1247.go:1:10: IDENTIFIER "hidden3d",
	// }
}

func ExampleSetPm3dSpecListItem_case27() {
	fmt.Println(exampleAST(1248, "set pm3d hidden3d ident_a"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 27,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1248.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1248.go:1:10: IDENTIFIER "hidden3d",
	// }
}

func ExampleSetPm3dSpecListItem_case28() {
	fmt.Println(exampleAST(1249, "set pm3d implicit"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 28,
	// · Token: example1249.go:1:10: IDENTIFIER "implicit",
	// }
}

func ExampleSetPm3dSpecListItem_case29() {
	fmt.Println(exampleAST(1250, "set pm3d explicit"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 29,
	// · Token: example1250.go:1:10: IDENTIFIER "explicit",
	// }
}

func ExampleSetPm3dSpecListItem_case30() {
	fmt.Println(exampleAST(1251, "set pm3d map"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 30,
	// · Token: example1251.go:1:10: IDENTIFIER "map",
	// }
}

func ExampleSetPm3dSpecListItem_case31() {
	fmt.Println(exampleAST(1252, "set pm3d border"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 31,
	// · Token: example1252.go:1:10: IDENTIFIER "border",
	// }
}

func ExampleSetPm3dSpecListItem_case32() {
	fmt.Println(exampleAST(1253, "set pm3d nocontours"))
	// Output:
	// &plot.SetPm3dSpecListItem{
	// · Case: 32,
	// · LineStyleListItem: &plot.LineStyleListItem{
	// · · Case: 15,
	// · · Token: example1253.go:1:10: IDENTIFIER "nocontours",
	// · },
	// }
}

func ExampleSetPm3dSpecListOpt() {
	fmt.Println(exampleAST(1254, "set pm3d") == (*SetPm3dSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetPm3dSpecListOpt_case1() {
	fmt.Println(exampleAST(1255, "set pm3d begin"))
	// Output:
	// &plot.SetPm3dSpecListOpt{
	// · SetPm3dSpecList: &plot.SetPm3dSpecList{
	// · · SetPm3dSpecListItem: &plot.SetPm3dSpecListItem{
	// · · · Case: 7,
	// · · · Token: example1255.go:1:10: IDENTIFIER "begin",
	// · · },
	// · },
	// }
}

func ExampleSetPrintSpecOpt() {
	fmt.Println(exampleAST(1259, "set print") == (*SetPrintSpecOpt)(nil))
	// Output:
	// true
}

func ExampleSetPrintSpecOpt_case1() {
	fmt.Println(exampleAST(1260, "set print ident_a"))
	// Output:
	// &plot.SetPrintSpecOpt{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1260.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetPrintSpecOpt_case2() {
	fmt.Println(exampleAST(1261, "set print ident_a append"))
	// Output:
	// &plot.SetPrintSpecOpt{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1261.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1261.go:1:19: IDENTIFIER "append",
	// }
}

func ExampleSetRangeSpec() {
	fmt.Println(exampleAST(1262, "set zrange [ ]"))
	// Output:
	// &plot.SetRangeSpec{
	// · Range: &plot.Range{
	// · · Case: 2,
	// · · Token: example1262.go:1:12: '[' "[",
	// · · Token2: example1262.go:1:14: ']' "]",
	// · },
	// }
}

func ExampleSetRangeSpec_case1() {
	fmt.Println(exampleAST(1263, "set vrange restore"))
	// Output:
	// &plot.SetRangeSpec{
	// · Case: 1,
	// · Token: example1263.go:1:12: IDENTIFIER "restore",
	// }
}

func ExampleSetRangeSpecList() {
	fmt.Println(exampleAST(1264, "set zrange [ ] extend"))
	// Output:
	// &plot.SetRangeSpecList{
	// · SetRangeSpecListItem: &plot.SetRangeSpecListItem{
	// · · Case: 4,
	// · · Token: example1264.go:1:16: IDENTIFIER "extend",
	// · },
	// }
}

func ExampleSetRangeSpecList_case1() {
	fmt.Println(exampleAST(1265, "set zrange [ ] extend extend"))
	// Output:
	// &plot.SetRangeSpecList{
	// · SetRangeSpecList: &plot.SetRangeSpecList{
	// · · Case: 1,
	// · · SetRangeSpecListItem: &plot.SetRangeSpecListItem{
	// · · · Case: 4,
	// · · · Token: example1265.go:1:23: IDENTIFIER "extend",
	// · · },
	// · },
	// · SetRangeSpecListItem: &plot.SetRangeSpecListItem{
	// · · Case: 4,
	// · · Token: example1265.go:1:16: IDENTIFIER "extend",
	// · },
	// }
}

func ExampleSetRangeSpecListItem() {
	fmt.Println(exampleAST(1266, "set zrange [ ] reverse"))
	// Output:
	// &plot.SetRangeSpecListItem{
	// · Token: example1266.go:1:16: IDENTIFIER "reverse",
	// }
}

func ExampleSetRangeSpecListItem_case1() {
	fmt.Println(exampleAST(1267, "set zrange [ ] noreverse"))
	// Output:
	// &plot.SetRangeSpecListItem{
	// · Case: 1,
	// · Token: example1267.go:1:16: IDENTIFIER "noreverse",
	// }
}

func ExampleSetRangeSpecListItem_case2() {
	fmt.Println(exampleAST(1268, "set zrange [ ] writeback"))
	// Output:
	// &plot.SetRangeSpecListItem{
	// · Case: 2,
	// · Token: example1268.go:1:16: IDENTIFIER "writeback",
	// }
}

func ExampleSetRangeSpecListItem_case3() {
	fmt.Println(exampleAST(1269, "set zrange [ ] nowriteback"))
	// Output:
	// &plot.SetRangeSpecListItem{
	// · Case: 3,
	// · Token: example1269.go:1:16: IDENTIFIER "nowriteback",
	// }
}

func ExampleSetRangeSpecListItem_case4() {
	fmt.Println(exampleAST(1270, "set zrange [ ] extend"))
	// Output:
	// &plot.SetRangeSpecListItem{
	// · Case: 4,
	// · Token: example1270.go:1:16: IDENTIFIER "extend",
	// }
}

func ExampleSetRangeSpecListItem_case5() {
	fmt.Println(exampleAST(1271, "set zrange [ ] noextend"))
	// Output:
	// &plot.SetRangeSpecListItem{
	// · Case: 5,
	// · Token: example1271.go:1:16: IDENTIFIER "noextend",
	// }
}

func ExampleSetRangeSpecListItem_case6() {
	fmt.Println(exampleAST(1272, "set zrange [ ] [ ]"))
	// Output:
	// &plot.SetRangeSpecListItem{
	// · Case: 6,
	// · Range: &plot.Range{
	// · · Case: 2,
	// · · Token: example1272.go:1:16: '[' "[",
	// · · Token2: example1272.go:1:18: ']' "]",
	// · },
	// }
}

func ExampleSetRangeSpecListOpt() {
	fmt.Println(exampleAST(1273, "set zrange [ ]") == (*SetRangeSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetRangeSpecListOpt_case1() {
	fmt.Println(exampleAST(1274, "set zrange [ ] extend"))
	// Output:
	// &plot.SetRangeSpecListOpt{
	// · SetRangeSpecList: &plot.SetRangeSpecList{
	// · · SetRangeSpecListItem: &plot.SetRangeSpecListItem{
	// · · · Case: 4,
	// · · · Token: example1274.go:1:16: IDENTIFIER "extend",
	// · · },
	// · },
	// }
}

func ExampleSetSizeSpecList() {
	fmt.Println(exampleAST(1275, "set size noratio"))
	// Output:
	// &plot.SetSizeSpecList{
	// · SetSizeSpecListItem: &plot.SetSizeSpecListItem{
	// · · Case: 3,
	// · · Token: example1275.go:1:10: IDENTIFIER "noratio",
	// · },
	// }
}

func ExampleSetSizeSpecList_case1() {
	fmt.Println(exampleAST(1276, "set size noratio noratio"))
	// Output:
	// &plot.SetSizeSpecList{
	// · SetSizeSpecList: &plot.SetSizeSpecList{
	// · · Case: 1,
	// · · SetSizeSpecListItem: &plot.SetSizeSpecListItem{
	// · · · Case: 3,
	// · · · Token: example1276.go:1:18: IDENTIFIER "noratio",
	// · · },
	// · },
	// · SetSizeSpecListItem: &plot.SetSizeSpecListItem{
	// · · Case: 3,
	// · · Token: example1276.go:1:10: IDENTIFIER "noratio",
	// · },
	// }
}

func ExampleSetSizeSpecListItem() {
	fmt.Println(exampleAST(1277, "set size square"))
	// Output:
	// &plot.SetSizeSpecListItem{
	// · Token: example1277.go:1:10: IDENTIFIER "square",
	// }
}

func ExampleSetSizeSpecListItem_case1() {
	fmt.Println(exampleAST(1278, "set size nosquare"))
	// Output:
	// &plot.SetSizeSpecListItem{
	// · Case: 1,
	// · Token: example1278.go:1:10: IDENTIFIER "nosquare",
	// }
}

func ExampleSetSizeSpecListItem_case2() {
	fmt.Println(exampleAST(1279, "set size ratio ident_a"))
	// Output:
	// &plot.SetSizeSpecListItem{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1279.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1279.go:1:10: IDENTIFIER "ratio",
	// }
}

func ExampleSetSizeSpecListItem_case3() {
	fmt.Println(exampleAST(1280, "set size noratio"))
	// Output:
	// &plot.SetSizeSpecListItem{
	// · Case: 3,
	// · Token: example1280.go:1:10: IDENTIFIER "noratio",
	// }
}

func ExampleSetSizeSpecListItem_case4() {
	fmt.Println(exampleAST(1281, "set size ident_a , ident_b"))
	// Output:
	// &plot.SetSizeSpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1281.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1281.go:1:10: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1281.go:1:18: ',' ",",
	// }
}

func ExampleSetSpec() {
	fmt.Println(exampleAST(534, "set angle degrees"))
	// Output:
	// &plot.SetSpec{
	// · SetAnglesSpec: &plot.SetAnglesSpec{
	// · · Token: example534.go:1:11: IDENTIFIER "degrees",
	// · },
	// · Token: example534.go:1:5: IDENTIFIER "angle",
	// }
}

func ExampleSetSpec_case001() {
	fmt.Println(exampleAST(535, "set angles degrees"))
	// Output:
	// &plot.SetSpec{
	// · Case: 1,
	// · SetAnglesSpec: &plot.SetAnglesSpec{
	// · · Token: example535.go:1:12: IDENTIFIER "degrees",
	// · },
	// · Token: example535.go:1:5: IDENTIFIER "angles",
	// }
}

func ExampleSetSpec_case002() {
	fmt.Println(exampleAST(536, "set arrow arrowstyle"))
	// Output:
	// &plot.SetSpec{
	// · Case: 2,
	// · SetArrowSpec: &plot.SetArrowSpec{
	// · · SetArrowSpecList: &plot.SetArrowSpecList{
	// · · · SetArrowSpecListItem: &plot.SetArrowSpecListItem{
	// · · · · Case: 17,
	// · · · · Token: example536.go:1:11: IDENTIFIER "arrowstyle",
	// · · · },
	// · · },
	// · },
	// · Token: example536.go:1:5: IDENTIFIER "arrow",
	// }
}

func ExampleSetSpec_case003() {
	fmt.Println(exampleAST(537, "set auto"))
	// Output:
	// &plot.SetSpec{
	// · Case: 3,
	// · Token: example537.go:1:5: IDENTIFIER "auto",
	// }
}

func ExampleSetSpec_case004() {
	fmt.Println(exampleAST(538, "set autoscale"))
	// Output:
	// &plot.SetSpec{
	// · Case: 4,
	// · Token: example538.go:1:5: IDENTIFIER "autoscale",
	// }
}

func ExampleSetSpec_case005() {
	fmt.Println(exampleAST(539, "set bars"))
	// Output:
	// &plot.SetSpec{
	// · Case: 5,
	// · Token: example539.go:1:5: IDENTIFIER "bars",
	// }
}

func ExampleSetSpec_case006() {
	fmt.Println(exampleAST(540, "set bmargin"))
	// Output:
	// &plot.SetSpec{
	// · Case: 6,
	// · Token: example540.go:1:5: IDENTIFIER "bmargin",
	// }
}

func ExampleSetSpec_case007() {
	fmt.Println(exampleAST(541, "set border"))
	// Output:
	// &plot.SetSpec{
	// · Case: 7,
	// · Token: example541.go:1:5: IDENTIFIER "border",
	// }
}

func ExampleSetSpec_case008() {
	fmt.Println(exampleAST(542, "set boxwidth ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 8,
	// · SetBoxwidthSpec: &plot.SetBoxwidthSpec{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example542.go:1:14: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example542.go:1:5: IDENTIFIER "boxwidth",
	// }
}

func ExampleSetSpec_case009() {
	fmt.Println(exampleAST(543, "set cbdata time"))
	// Output:
	// &plot.SetSpec{
	// · Case: 9,
	// · Token: example543.go:1:5: IDENTIFIER "cbdata",
	// · Token2: example543.go:1:12: IDENTIFIER "time",
	// }
}

func ExampleSetSpec_case010() {
	fmt.Println(exampleAST(544, "set cbdtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 10,
	// · Token: example544.go:1:5: IDENTIFIER "cbdtics",
	// }
}

func ExampleSetSpec_case011() {
	fmt.Println(exampleAST(545, "set cblabel"))
	// Output:
	// &plot.SetSpec{
	// · Case: 11,
	// · Token: example545.go:1:5: IDENTIFIER "cblabel",
	// }
}

func ExampleSetSpec_case012() {
	fmt.Println(exampleAST(546, "set cbmtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 12,
	// · Token: example546.go:1:5: IDENTIFIER "cbmtics",
	// }
}

func ExampleSetSpec_case013() {
	fmt.Println(exampleAST(547, "set cbrange restore"))
	// Output:
	// &plot.SetSpec{
	// · Case: 13,
	// · SetRangeSpec: &plot.SetRangeSpec{
	// · · Case: 1,
	// · · Token: example547.go:1:13: IDENTIFIER "restore",
	// · },
	// · Token: example547.go:1:5: IDENTIFIER "cbrange",
	// }
}

func ExampleSetSpec_case014() {
	fmt.Println(exampleAST(548, "set cbtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 14,
	// · Token: example548.go:1:5: IDENTIFIER "cbtics",
	// }
}

func ExampleSetSpec_case015() {
	fmt.Println(exampleAST(549, "set clabel ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example549.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example549.go:1:5: IDENTIFIER "clabel",
	// }
}

func ExampleSetSpec_case016() {
	fmt.Println(exampleAST(550, "set clip"))
	// Output:
	// &plot.SetSpec{
	// · Case: 16,
	// · Token: example550.go:1:5: IDENTIFIER "clip",
	// }
}

func ExampleSetSpec_case017() {
	fmt.Println(exampleAST(551, "set cntrlabel onecolor"))
	// Output:
	// &plot.SetSpec{
	// · Case: 17,
	// · SetCntrlabelSpecList: &plot.SetCntrlabelSpecList{
	// · · SetCntrlabelSpecListItem: &plot.SetCntrlabelSpecListItem{
	// · · · Case: 4,
	// · · · Token: example551.go:1:15: IDENTIFIER "onecolor",
	// · · },
	// · },
	// · Token: example551.go:1:5: IDENTIFIER "cntrlabel",
	// }
}

func ExampleSetSpec_case018() {
	fmt.Println(exampleAST(552, "set cntrp bspline"))
	// Output:
	// &plot.SetSpec{
	// · Case: 18,
	// · SetCntrparamSpecList: &plot.SetCntrparamSpecList{
	// · · SetCntrparamSpecListItem: &plot.SetCntrparamSpecListItem{
	// · · · Case: 2,
	// · · · Token: example552.go:1:11: IDENTIFIER "bspline",
	// · · },
	// · },
	// · Token: example552.go:1:5: IDENTIFIER "cntrp",
	// }
}

func ExampleSetSpec_case019() {
	fmt.Println(exampleAST(553, "set cntrparam bspline"))
	// Output:
	// &plot.SetSpec{
	// · Case: 19,
	// · SetCntrparamSpecList: &plot.SetCntrparamSpecList{
	// · · SetCntrparamSpecListItem: &plot.SetCntrparamSpecListItem{
	// · · · Case: 2,
	// · · · Token: example553.go:1:15: IDENTIFIER "bspline",
	// · · },
	// · },
	// · Token: example553.go:1:5: IDENTIFIER "cntrparam",
	// }
}

func ExampleSetSpec_case020() {
	fmt.Println(exampleAST(554, "set colorbox"))
	// Output:
	// &plot.SetSpec{
	// · Case: 20,
	// · Token: example554.go:1:5: IDENTIFIER "colorbox",
	// }
}

func ExampleSetSpec_case021() {
	fmt.Println(exampleAST(555, "set colorsequence"))
	// Output:
	// &plot.SetSpec{
	// · Case: 21,
	// · Token: example555.go:1:5: IDENTIFIER "colorsequence",
	// }
}

func ExampleSetSpec_case022() {
	fmt.Println(exampleAST(556, "set contour"))
	// Output:
	// &plot.SetSpec{
	// · Case: 22,
	// · Token: example556.go:1:5: IDENTIFIER "contour",
	// }
}

func ExampleSetSpec_case023() {
	fmt.Println(exampleAST(557, "set dashtype ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 23,
	// · DashTypeSpec: &plot.DashTypeSpec{
	// · · Case: 1,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example557.go:1:14: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example557.go:1:5: IDENTIFIER "dashtype",
	// }
}

func ExampleSetSpec_case024() {
	fmt.Println(exampleAST(558, "set datafile binary"))
	// Output:
	// &plot.SetSpec{
	// · Case: 24,
	// · SetDatafileSpec: &plot.SetDatafileSpec{
	// · · Case: 7,
	// · · Token: example558.go:1:14: IDENTIFIER "binary",
	// · },
	// · Token: example558.go:1:5: IDENTIFIER "datafile",
	// }
}

func ExampleSetSpec_case025() {
	fmt.Println(exampleAST(559, "set decimalsign"))
	// Output:
	// &plot.SetSpec{
	// · Case: 25,
	// · Token: example559.go:1:5: IDENTIFIER "decimalsign",
	// }
}

func ExampleSetSpec_case026() {
	fmt.Println(exampleAST(560, "set dgrid3d"))
	// Output:
	// &plot.SetSpec{
	// · Case: 26,
	// · Token: example560.go:1:5: IDENTIFIER "dgrid3d",
	// }
}

func ExampleSetSpec_case027() {
	fmt.Println(exampleAST(561, "set dummy"))
	// Output:
	// &plot.SetSpec{
	// · Case: 27,
	// · Token: example561.go:1:5: IDENTIFIER "dummy",
	// }
}

func ExampleSetSpec_case028() {
	fmt.Println(exampleAST(562, "set encoding ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 28,
	// · SetEncodingSpec: &plot.SetEncodingSpec{
	// · · Case: 18,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example562.go:1:14: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example562.go:1:5: IDENTIFIER "encoding",
	// }
}

func ExampleSetSpec_case029() {
	fmt.Println(exampleAST(563, "set fit brief"))
	// Output:
	// &plot.SetSpec{
	// · Case: 29,
	// · SetFitSpecList: &plot.SetFitSpecList{
	// · · SetFitSpecListItem: &plot.SetFitSpecListItem{
	// · · · Case: 6,
	// · · · Token: example563.go:1:9: IDENTIFIER "brief",
	// · · },
	// · },
	// · Token: example563.go:1:5: IDENTIFIER "fit",
	// }
}

func ExampleSetSpec_case030() {
	fmt.Println(exampleAST(564, "set fontpath"))
	// Output:
	// &plot.SetSpec{
	// · Case: 30,
	// · Token: example564.go:1:5: IDENTIFIER "fontpath",
	// }
}

func ExampleSetSpec_case031() {
	fmt.Println(exampleAST(565, "set format"))
	// Output:
	// &plot.SetSpec{
	// · Case: 31,
	// · Token: example565.go:1:5: IDENTIFIER "format",
	// }
}

func ExampleSetSpec_case032() {
	fmt.Println(exampleAST(566, "set grid"))
	// Output:
	// &plot.SetSpec{
	// · Case: 32,
	// · Token: example566.go:1:5: IDENTIFIER "grid",
	// }
}

func ExampleSetSpec_case033() {
	fmt.Println(exampleAST(567, "set hidden3d"))
	// Output:
	// &plot.SetSpec{
	// · Case: 33,
	// · Token: example567.go:1:5: IDENTIFIER "hidden3d",
	// }
}

func ExampleSetSpec_case034() {
	fmt.Println(exampleAST(568, "set history"))
	// Output:
	// &plot.SetSpec{
	// · Case: 34,
	// · Token: example568.go:1:5: IDENTIFIER "history",
	// }
}

func ExampleSetSpec_case035() {
	fmt.Println(exampleAST(569, "set iso ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 35,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example569.go:1:9: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example569.go:1:5: IDENTIFIER "iso",
	// }
}

func ExampleSetSpec_case036() {
	fmt.Println(exampleAST(570, "set isosamples ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 36,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example570.go:1:16: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example570.go:1:5: IDENTIFIER "isosamples",
	// }
}

func ExampleSetSpec_case037() {
	fmt.Println(exampleAST(571, "set key"))
	// Output:
	// &plot.SetSpec{
	// · Case: 37,
	// · Token: example571.go:1:5: IDENTIFIER "key",
	// }
}

func ExampleSetSpec_case038() {
	fmt.Println(exampleAST(572, "set label 1 'foo'"))
	// Output:
	// &plot.SetSpec{
	// · Case: 38,
	// · SetLabelSpec: &plot.SetLabelSpec{
	// · · ExpressionOpt: &plot.ExpressionOpt{
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 2,
	// · · · · · · · Token: example572.go:1:11: NUM_LIT "1",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · SetLabelSpecList: &plot.SetLabelSpecList{
	// · · · SetLabelSpecListItem: &plot.SetLabelSpecListItem{
	// · · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · · Case: 24,
	// · · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · · Operand: &plot.Operand{
	// · · · · · · · · Case: 3,
	// · · · · · · · · Token: example572.go:1:13: STRING_LIT "foo",
	// · · · · · · · },
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example572.go:1:5: IDENTIFIER "label",
	// }
}

func ExampleSetSpec_case039() {
	fmt.Println(exampleAST(573, "set linetype ident_a nocontours"))
	// Output:
	// &plot.SetSpec{
	// · Case: 39,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example573.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · LineStyleList: &plot.LineStyleList{
	// · · LineStyleListItem: &plot.LineStyleListItem{
	// · · · Case: 15,
	// · · · Token: example573.go:1:22: IDENTIFIER "nocontours",
	// · · },
	// · },
	// · Token: example573.go:1:5: IDENTIFIER "linetype",
	// }
}

func ExampleSetSpec_case040() {
	fmt.Println(exampleAST(574, "set link"))
	// Output:
	// &plot.SetSpec{
	// · Case: 40,
	// · Token: example574.go:1:5: IDENTIFIER "link",
	// }
}

func ExampleSetSpec_case041() {
	fmt.Println(exampleAST(575, "set lmargin"))
	// Output:
	// &plot.SetSpec{
	// · Case: 41,
	// · Token: example575.go:1:5: IDENTIFIER "lmargin",
	// }
}

func ExampleSetSpec_case042() {
	fmt.Println(exampleAST(576, "set loadpath"))
	// Output:
	// &plot.SetSpec{
	// · Case: 42,
	// · Token: example576.go:1:5: IDENTIFIER "loadpath",
	// }
}

func ExampleSetSpec_case043() {
	fmt.Println(exampleAST(577, "set locale"))
	// Output:
	// &plot.SetSpec{
	// · Case: 43,
	// · Token: example577.go:1:5: IDENTIFIER "locale",
	// }
}

func ExampleSetSpec_case044() {
	fmt.Println(exampleAST(578, "set locale ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 44,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example578.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example578.go:1:5: IDENTIFIER "locale",
	// }
}

func ExampleSetSpec_case045() {
	fmt.Println(exampleAST(579, "set log"))
	// Output:
	// &plot.SetSpec{
	// · Case: 45,
	// · Token: example579.go:1:5: IDENTIFIER "log",
	// }
}

func ExampleSetSpec_case046() {
	fmt.Println(exampleAST(580, "set logscale"))
	// Output:
	// &plot.SetSpec{
	// · Case: 46,
	// · Token: example580.go:1:5: IDENTIFIER "logscale",
	// }
}

func ExampleSetSpec_case047() {
	fmt.Println(exampleAST(581, "set macros"))
	// Output:
	// &plot.SetSpec{
	// · Case: 47,
	// · Token: example581.go:1:5: IDENTIFIER "macros",
	// }
}

func ExampleSetSpec_case048() {
	fmt.Println(exampleAST(582, "set mapping cartesian"))
	// Output:
	// &plot.SetSpec{
	// · Case: 48,
	// · SetMappingSpec: &plot.SetMappingSpec{
	// · · Token: example582.go:1:13: IDENTIFIER "cartesian",
	// · },
	// · Token: example582.go:1:5: IDENTIFIER "mapping",
	// }
}

func ExampleSetSpec_case049() {
	fmt.Println(exampleAST(583, "set margins ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 49,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example583.go:1:13: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example583.go:1:5: IDENTIFIER "margins",
	// }
}

func ExampleSetSpec_case050() {
	fmt.Println(exampleAST(584, "set mcbtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 50,
	// · Token: example584.go:1:5: IDENTIFIER "mcbtics",
	// }
}

func ExampleSetSpec_case051() {
	fmt.Println(exampleAST(585, "set mono"))
	// Output:
	// &plot.SetSpec{
	// · Case: 51,
	// · Token: example585.go:1:5: IDENTIFIER "mono",
	// }
}

func ExampleSetSpec_case052() {
	fmt.Println(exampleAST(586, "set monochrome"))
	// Output:
	// &plot.SetSpec{
	// · Case: 52,
	// · Token: example586.go:1:5: IDENTIFIER "monochrome",
	// }
}

func ExampleSetSpec_case053() {
	fmt.Println(exampleAST(587, "set mouse"))
	// Output:
	// &plot.SetSpec{
	// · Case: 53,
	// · Token: example587.go:1:5: IDENTIFIER "mouse",
	// }
}

func ExampleSetSpec_case054() {
	fmt.Println(exampleAST(588, "set multiplot"))
	// Output:
	// &plot.SetSpec{
	// · Case: 54,
	// · Token: example588.go:1:5: IDENTIFIER "multiplot",
	// }
}

func ExampleSetSpec_case055() {
	fmt.Println(exampleAST(589, "set mx2tics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 55,
	// · Token: example589.go:1:5: IDENTIFIER "mx2tics",
	// }
}

func ExampleSetSpec_case056() {
	fmt.Println(exampleAST(590, "set mxtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 56,
	// · Token: example590.go:1:5: IDENTIFIER "mxtics",
	// }
}

func ExampleSetSpec_case057() {
	fmt.Println(exampleAST(591, "set my2tics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 57,
	// · Token: example591.go:1:5: IDENTIFIER "my2tics",
	// }
}

func ExampleSetSpec_case058() {
	fmt.Println(exampleAST(592, "set mytics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 58,
	// · Token: example592.go:1:5: IDENTIFIER "mytics",
	// }
}

func ExampleSetSpec_case059() {
	fmt.Println(exampleAST(593, "set mztics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 59,
	// · Token: example593.go:1:5: IDENTIFIER "mztics",
	// }
}

func ExampleSetSpec_case060() {
	fmt.Println(exampleAST(594, "set noxtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 60,
	// · Token: example594.go:1:5: IDENTIFIER "noxtics",
	// }
}

func ExampleSetSpec_case061() {
	fmt.Println(exampleAST(595, "set noytics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 61,
	// · Token: example595.go:1:5: IDENTIFIER "noytics",
	// }
}

func ExampleSetSpec_case062() {
	fmt.Println(exampleAST(596, "set object ident_a back"))
	// Output:
	// &plot.SetSpec{
	// · Case: 62,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example596.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetObjectSpecList: &plot.SetObjectSpecList{
	// · · SetObjectSpecListItem: &plot.SetObjectSpecListItem{
	// · · · Case: 1,
	// · · · Token: example596.go:1:20: IDENTIFIER "back",
	// · · },
	// · },
	// · Token: example596.go:1:5: IDENTIFIER "object",
	// }
}

func ExampleSetSpec_case063() {
	fmt.Println(exampleAST(597, "set offset"))
	// Output:
	// &plot.SetSpec{
	// · Case: 63,
	// · Token: example597.go:1:5: IDENTIFIER "offset",
	// }
}

func ExampleSetSpec_case064() {
	fmt.Println(exampleAST(598, "set offsets"))
	// Output:
	// &plot.SetSpec{
	// · Case: 64,
	// · Token: example598.go:1:5: IDENTIFIER "offsets",
	// }
}

func ExampleSetSpec_case065() {
	fmt.Println(exampleAST(599, "set origin ident_a , ident_b"))
	// Output:
	// &plot.SetSpec{
	// · Case: 65,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example599.go:1:12: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example599.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example599.go:1:5: IDENTIFIER "origin",
	// · Token2: example599.go:1:20: ',' ",",
	// }
}

func ExampleSetSpec_case066() {
	fmt.Println(exampleAST(600, "set output"))
	// Output:
	// &plot.SetSpec{
	// · Case: 66,
	// · Token: example600.go:1:5: IDENTIFIER "output",
	// }
}

func ExampleSetSpec_case067() {
	fmt.Println(exampleAST(601, "set pal"))
	// Output:
	// &plot.SetSpec{
	// · Case: 67,
	// · Token: example601.go:1:5: IDENTIFIER "pal",
	// }
}

func ExampleSetSpec_case068() {
	fmt.Println(exampleAST(602, "set palette"))
	// Output:
	// &plot.SetSpec{
	// · Case: 68,
	// · Token: example602.go:1:5: IDENTIFIER "palette",
	// }
}

func ExampleSetSpec_case069() {
	fmt.Println(exampleAST(603, "set para"))
	// Output:
	// &plot.SetSpec{
	// · Case: 69,
	// · Token: example603.go:1:5: IDENTIFIER "para",
	// }
}

func ExampleSetSpec_case070() {
	fmt.Println(exampleAST(604, "set parametric"))
	// Output:
	// &plot.SetSpec{
	// · Case: 70,
	// · Token: example604.go:1:5: IDENTIFIER "parametric",
	// }
}

func ExampleSetSpec_case071() {
	fmt.Println(exampleAST(605, "set paxis ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 71,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example605.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example605.go:1:5: IDENTIFIER "paxis",
	// }
}

func ExampleSetSpec_case072() {
	fmt.Println(exampleAST(606, "set pm3d"))
	// Output:
	// &plot.SetSpec{
	// · Case: 72,
	// · Token: example606.go:1:5: IDENTIFIER "pm3d",
	// }
}

func ExampleSetSpec_case073() {
	fmt.Println(exampleAST(607, "set pointintervalbox ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 73,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example607.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example607.go:1:5: IDENTIFIER "pointintervalbox",
	// }
}

func ExampleSetSpec_case074() {
	fmt.Println(exampleAST(608, "set pointsize ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 74,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example608.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example608.go:1:5: IDENTIFIER "pointsize",
	// }
}

func ExampleSetSpec_case075() {
	fmt.Println(exampleAST(609, "set polar"))
	// Output:
	// &plot.SetSpec{
	// · Case: 75,
	// · Token: example609.go:1:5: IDENTIFIER "polar",
	// }
}

func ExampleSetSpec_case076() {
	fmt.Println(exampleAST(610, "set print"))
	// Output:
	// &plot.SetSpec{
	// · Case: 76,
	// · Token: example610.go:1:5: IDENTIFIER "print",
	// }
}

func ExampleSetSpec_case077() {
	fmt.Println(exampleAST(611, "set psdir ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 77,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example611.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example611.go:1:5: IDENTIFIER "psdir",
	// }
}

func ExampleSetSpec_case078() {
	fmt.Println(exampleAST(612, "set raxis"))
	// Output:
	// &plot.SetSpec{
	// · Case: 78,
	// · Token: example612.go:1:5: IDENTIFIER "raxis",
	// }
}

func ExampleSetSpec_case079() {
	fmt.Println(exampleAST(613, "set rmargin"))
	// Output:
	// &plot.SetSpec{
	// · Case: 79,
	// · Token: example613.go:1:5: IDENTIFIER "rmargin",
	// }
}

func ExampleSetSpec_case080() {
	fmt.Println(exampleAST(614, "set rrange restore"))
	// Output:
	// &plot.SetSpec{
	// · Case: 80,
	// · SetRangeSpec: &plot.SetRangeSpec{
	// · · Case: 1,
	// · · Token: example614.go:1:12: IDENTIFIER "restore",
	// · },
	// · Token: example614.go:1:5: IDENTIFIER "rrange",
	// }
}

func ExampleSetSpec_case081() {
	fmt.Println(exampleAST(615, "set rtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 81,
	// · Token: example615.go:1:5: IDENTIFIER "rtics",
	// }
}

func ExampleSetSpec_case082() {
	fmt.Println(exampleAST(616, "set sam ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 82,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example616.go:1:9: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example616.go:1:5: IDENTIFIER "sam",
	// }
}

func ExampleSetSpec_case083() {
	fmt.Println(exampleAST(617, "set sample ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 83,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example617.go:1:12: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example617.go:1:5: IDENTIFIER "sample",
	// }
}

func ExampleSetSpec_case084() {
	fmt.Println(exampleAST(618, "set samples ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 84,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example618.go:1:13: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example618.go:1:5: IDENTIFIER "samples",
	// }
}

func ExampleSetSpec_case085() {
	fmt.Println(exampleAST(619, "set size noratio"))
	// Output:
	// &plot.SetSpec{
	// · Case: 85,
	// · SetSizeSpecList: &plot.SetSizeSpecList{
	// · · SetSizeSpecListItem: &plot.SetSizeSpecListItem{
	// · · · Case: 3,
	// · · · Token: example619.go:1:10: IDENTIFIER "noratio",
	// · · },
	// · },
	// · Token: example619.go:1:5: IDENTIFIER "size",
	// }
}

func ExampleSetSpec_case086() {
	fmt.Println(exampleAST(620, "set style circle"))
	// Output:
	// &plot.SetSpec{
	// · Case: 86,
	// · SetStyleSpec: &plot.SetStyleSpec{
	// · · Case: 8,
	// · · Token: example620.go:1:11: IDENTIFIER "circle",
	// · },
	// · Token: example620.go:1:5: IDENTIFIER "style",
	// }
}

func ExampleSetSpec_case087() {
	fmt.Println(exampleAST(621, "set surface"))
	// Output:
	// &plot.SetSpec{
	// · Case: 87,
	// · Token: example621.go:1:5: IDENTIFIER "surface",
	// }
}

func ExampleSetSpec_case088() {
	fmt.Println(exampleAST(622, "set table"))
	// Output:
	// &plot.SetSpec{
	// · Case: 88,
	// · Token: example622.go:1:5: IDENTIFIER "table",
	// }
}

func ExampleSetSpec_case089() {
	fmt.Println(exampleAST(623, "set term aifm"))
	// Output:
	// &plot.SetSpec{
	// · Case: 89,
	// · SetTerminalSpec: &plot.SetTerminalSpec{
	// · · SetTerminalInner: &plot.SetTerminalInner{
	// · · · Token: example623.go:1:10: IDENTIFIER "aifm",
	// · · },
	// · },
	// · Token: example623.go:1:5: IDENTIFIER "term",
	// }
}

func ExampleSetSpec_case090() {
	fmt.Println(exampleAST(624, "set terminal aifm"))
	// Output:
	// &plot.SetSpec{
	// · Case: 90,
	// · SetTerminalSpec: &plot.SetTerminalSpec{
	// · · SetTerminalInner: &plot.SetTerminalInner{
	// · · · Token: example624.go:1:14: IDENTIFIER "aifm",
	// · · },
	// · },
	// · Token: example624.go:1:5: IDENTIFIER "terminal",
	// }
}

func ExampleSetSpec_case091() {
	fmt.Println(exampleAST(625, "set termoption dash"))
	// Output:
	// &plot.SetSpec{
	// · Case: 91,
	// · SetTermoptionSpec: &plot.SetTermoptionSpec{
	// · · Case: 5,
	// · · Token: example625.go:1:16: IDENTIFIER "dash",
	// · },
	// · Token: example625.go:1:5: IDENTIFIER "termoption",
	// }
}

func ExampleSetSpec_case092() {
	fmt.Println(exampleAST(626, "set tic"))
	// Output:
	// &plot.SetSpec{
	// · Case: 92,
	// · Token: example626.go:1:5: IDENTIFIER "tic",
	// }
}

func ExampleSetSpec_case093() {
	fmt.Println(exampleAST(627, "set tics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 93,
	// · Token: example627.go:1:5: IDENTIFIER "tics",
	// }
}

func ExampleSetSpec_case094() {
	fmt.Println(exampleAST(628, "set ticslevel ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 94,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example628.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example628.go:1:5: IDENTIFIER "ticslevel",
	// }
}

func ExampleSetSpec_case095() {
	fmt.Println(exampleAST(629, "set time"))
	// Output:
	// &plot.SetSpec{
	// · Case: 95,
	// · Token: example629.go:1:5: IDENTIFIER "time",
	// }
}

func ExampleSetSpec_case096() {
	fmt.Println(exampleAST(630, "set timefmt ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 96,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example630.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example630.go:1:5: IDENTIFIER "timefmt",
	// }
}

func ExampleSetSpec_case097() {
	fmt.Println(exampleAST(631, "set timestamp"))
	// Output:
	// &plot.SetSpec{
	// · Case: 97,
	// · Token: example631.go:1:5: IDENTIFIER "timestamp",
	// }
}

func ExampleSetSpec_case098() {
	fmt.Println(exampleAST(632, "set title"))
	// Output:
	// &plot.SetSpec{
	// · Case: 98,
	// · Token: example632.go:1:5: IDENTIFIER "title",
	// }
}

func ExampleSetSpec_case099() {
	fmt.Println(exampleAST(633, "set tmargin"))
	// Output:
	// &plot.SetSpec{
	// · Case: 99,
	// · Token: example633.go:1:5: IDENTIFIER "tmargin",
	// }
}

func ExampleSetSpec_case100() {
	fmt.Println(exampleAST(634, "set trange restore"))
	// Output:
	// &plot.SetSpec{
	// · Case: 100,
	// · SetRangeSpec: &plot.SetRangeSpec{
	// · · Case: 1,
	// · · Token: example634.go:1:12: IDENTIFIER "restore",
	// · },
	// · Token: example634.go:1:5: IDENTIFIER "trange",
	// }
}

func ExampleSetSpec_case101() {
	fmt.Println(exampleAST(635, "set urange restore"))
	// Output:
	// &plot.SetSpec{
	// · Case: 101,
	// · SetRangeSpec: &plot.SetRangeSpec{
	// · · Case: 1,
	// · · Token: example635.go:1:12: IDENTIFIER "restore",
	// · },
	// · Token: example635.go:1:5: IDENTIFIER "urange",
	// }
}

func ExampleSetSpec_case102() {
	fmt.Println(exampleAST(636, "set vi"))
	// Output:
	// &plot.SetSpec{
	// · Case: 102,
	// · Token: example636.go:1:5: IDENTIFIER "vi",
	// }
}

func ExampleSetSpec_case103() {
	fmt.Println(exampleAST(637, "set view"))
	// Output:
	// &plot.SetSpec{
	// · Case: 103,
	// · Token: example637.go:1:5: IDENTIFIER "view",
	// }
}

func ExampleSetSpec_case104() {
	fmt.Println(exampleAST(638, "set vrange restore"))
	// Output:
	// &plot.SetSpec{
	// · Case: 104,
	// · SetRangeSpec: &plot.SetRangeSpec{
	// · · Case: 1,
	// · · Token: example638.go:1:12: IDENTIFIER "restore",
	// · },
	// · Token: example638.go:1:5: IDENTIFIER "vrange",
	// }
}

func ExampleSetSpec_case105() {
	fmt.Println(exampleAST(639, "set x2data time"))
	// Output:
	// &plot.SetSpec{
	// · Case: 105,
	// · Token: example639.go:1:5: IDENTIFIER "x2data",
	// · Token2: example639.go:1:12: IDENTIFIER "time",
	// }
}

func ExampleSetSpec_case106() {
	fmt.Println(exampleAST(640, "set x2dtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 106,
	// · Token: example640.go:1:5: IDENTIFIER "x2dtics",
	// }
}

func ExampleSetSpec_case107() {
	fmt.Println(exampleAST(641, "set x2label"))
	// Output:
	// &plot.SetSpec{
	// · Case: 107,
	// · Token: example641.go:1:5: IDENTIFIER "x2label",
	// }
}

func ExampleSetSpec_case108() {
	fmt.Println(exampleAST(642, "set x2mtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 108,
	// · Token: example642.go:1:5: IDENTIFIER "x2mtics",
	// }
}

func ExampleSetSpec_case109() {
	fmt.Println(exampleAST(643, "set x2range restore"))
	// Output:
	// &plot.SetSpec{
	// · Case: 109,
	// · SetRangeSpec: &plot.SetRangeSpec{
	// · · Case: 1,
	// · · Token: example643.go:1:13: IDENTIFIER "restore",
	// · },
	// · Token: example643.go:1:5: IDENTIFIER "x2range",
	// }
}

func ExampleSetSpec_case110() {
	fmt.Println(exampleAST(644, "set x2tics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 110,
	// · Token: example644.go:1:5: IDENTIFIER "x2tics",
	// }
}

func ExampleSetSpec_case111() {
	fmt.Println(exampleAST(645, "set x2zeroaxis"))
	// Output:
	// &plot.SetSpec{
	// · Case: 111,
	// · Token: example645.go:1:5: IDENTIFIER "x2zeroaxis",
	// }
}

func ExampleSetSpec_case112() {
	fmt.Println(exampleAST(646, "set xdata time"))
	// Output:
	// &plot.SetSpec{
	// · Case: 112,
	// · Token: example646.go:1:5: IDENTIFIER "xdata",
	// · Token2: example646.go:1:11: IDENTIFIER "time",
	// }
}

func ExampleSetSpec_case113() {
	fmt.Println(exampleAST(647, "set xdtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 113,
	// · Token: example647.go:1:5: IDENTIFIER "xdtics",
	// }
}

func ExampleSetSpec_case114() {
	fmt.Println(exampleAST(648, "set xlabel"))
	// Output:
	// &plot.SetSpec{
	// · Case: 114,
	// · Token: example648.go:1:5: IDENTIFIER "xlabel",
	// }
}

func ExampleSetSpec_case115() {
	fmt.Println(exampleAST(649, "set xmtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 115,
	// · Token: example649.go:1:5: IDENTIFIER "xmtics",
	// }
}

func ExampleSetSpec_case116() {
	fmt.Println(exampleAST(650, "set xrange restore"))
	// Output:
	// &plot.SetSpec{
	// · Case: 116,
	// · SetRangeSpec: &plot.SetRangeSpec{
	// · · Case: 1,
	// · · Token: example650.go:1:12: IDENTIFIER "restore",
	// · },
	// · Token: example650.go:1:5: IDENTIFIER "xrange",
	// }
}

func ExampleSetSpec_case117() {
	fmt.Println(exampleAST(651, "set xtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 117,
	// · Token: example651.go:1:5: IDENTIFIER "xtics",
	// }
}

func ExampleSetSpec_case118() {
	fmt.Println(exampleAST(652, "set xyplane ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 118,
	// · SetXyplaneSpec: &plot.SetXyplaneSpec{
	// · · Case: 2,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example652.go:1:13: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example652.go:1:5: IDENTIFIER "xyplane",
	// }
}

func ExampleSetSpec_case119() {
	fmt.Println(exampleAST(653, "set xzeroaxis"))
	// Output:
	// &plot.SetSpec{
	// · Case: 119,
	// · Token: example653.go:1:5: IDENTIFIER "xzeroaxis",
	// }
}

func ExampleSetSpec_case120() {
	fmt.Println(exampleAST(654, "set y2data time"))
	// Output:
	// &plot.SetSpec{
	// · Case: 120,
	// · Token: example654.go:1:5: IDENTIFIER "y2data",
	// · Token2: example654.go:1:12: IDENTIFIER "time",
	// }
}

func ExampleSetSpec_case121() {
	fmt.Println(exampleAST(655, "set y2dtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 121,
	// · Token: example655.go:1:5: IDENTIFIER "y2dtics",
	// }
}

func ExampleSetSpec_case122() {
	fmt.Println(exampleAST(656, "set y2label"))
	// Output:
	// &plot.SetSpec{
	// · Case: 122,
	// · Token: example656.go:1:5: IDENTIFIER "y2label",
	// }
}

func ExampleSetSpec_case123() {
	fmt.Println(exampleAST(657, "set y2mtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 123,
	// · Token: example657.go:1:5: IDENTIFIER "y2mtics",
	// }
}

func ExampleSetSpec_case124() {
	fmt.Println(exampleAST(658, "set y2range restore"))
	// Output:
	// &plot.SetSpec{
	// · Case: 124,
	// · SetRangeSpec: &plot.SetRangeSpec{
	// · · Case: 1,
	// · · Token: example658.go:1:13: IDENTIFIER "restore",
	// · },
	// · Token: example658.go:1:5: IDENTIFIER "y2range",
	// }
}

func ExampleSetSpec_case125() {
	fmt.Println(exampleAST(659, "set y2tics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 125,
	// · Token: example659.go:1:5: IDENTIFIER "y2tics",
	// }
}

func ExampleSetSpec_case126() {
	fmt.Println(exampleAST(660, "set y2zeroaxis"))
	// Output:
	// &plot.SetSpec{
	// · Case: 126,
	// · Token: example660.go:1:5: IDENTIFIER "y2zeroaxis",
	// }
}

func ExampleSetSpec_case127() {
	fmt.Println(exampleAST(661, "set ydata time"))
	// Output:
	// &plot.SetSpec{
	// · Case: 127,
	// · Token: example661.go:1:5: IDENTIFIER "ydata",
	// · Token2: example661.go:1:11: IDENTIFIER "time",
	// }
}

func ExampleSetSpec_case128() {
	fmt.Println(exampleAST(662, "set ydtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 128,
	// · Token: example662.go:1:5: IDENTIFIER "ydtics",
	// }
}

func ExampleSetSpec_case129() {
	fmt.Println(exampleAST(663, "set ylabel"))
	// Output:
	// &plot.SetSpec{
	// · Case: 129,
	// · Token: example663.go:1:5: IDENTIFIER "ylabel",
	// }
}

func ExampleSetSpec_case130() {
	fmt.Println(exampleAST(664, "set ymtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 130,
	// · Token: example664.go:1:5: IDENTIFIER "ymtics",
	// }
}

func ExampleSetSpec_case131() {
	fmt.Println(exampleAST(665, "set yrange restore"))
	// Output:
	// &plot.SetSpec{
	// · Case: 131,
	// · SetRangeSpec: &plot.SetRangeSpec{
	// · · Case: 1,
	// · · Token: example665.go:1:12: IDENTIFIER "restore",
	// · },
	// · Token: example665.go:1:5: IDENTIFIER "yrange",
	// }
}

func ExampleSetSpec_case132() {
	fmt.Println(exampleAST(666, "set ytics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 132,
	// · Token: example666.go:1:5: IDENTIFIER "ytics",
	// }
}

func ExampleSetSpec_case133() {
	fmt.Println(exampleAST(667, "set yzeroaxis"))
	// Output:
	// &plot.SetSpec{
	// · Case: 133,
	// · Token: example667.go:1:5: IDENTIFIER "yzeroaxis",
	// }
}

func ExampleSetSpec_case134() {
	fmt.Println(exampleAST(668, "set zdata time"))
	// Output:
	// &plot.SetSpec{
	// · Case: 134,
	// · Token: example668.go:1:5: IDENTIFIER "zdata",
	// · Token2: example668.go:1:11: IDENTIFIER "time",
	// }
}

func ExampleSetSpec_case135() {
	fmt.Println(exampleAST(669, "set zdtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 135,
	// · Token: example669.go:1:5: IDENTIFIER "zdtics",
	// }
}

func ExampleSetSpec_case136() {
	fmt.Println(exampleAST(670, "set zero ident_a"))
	// Output:
	// &plot.SetSpec{
	// · Case: 136,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example670.go:1:10: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example670.go:1:5: IDENTIFIER "zero",
	// }
}

func ExampleSetSpec_case137() {
	fmt.Println(exampleAST(671, "set zeroaxis"))
	// Output:
	// &plot.SetSpec{
	// · Case: 137,
	// · Token: example671.go:1:5: IDENTIFIER "zeroaxis",
	// }
}

func ExampleSetSpec_case138() {
	fmt.Println(exampleAST(672, "set zlabel"))
	// Output:
	// &plot.SetSpec{
	// · Case: 138,
	// · Token: example672.go:1:5: IDENTIFIER "zlabel",
	// }
}

func ExampleSetSpec_case139() {
	fmt.Println(exampleAST(673, "set zmtics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 139,
	// · Token: example673.go:1:5: IDENTIFIER "zmtics",
	// }
}

func ExampleSetSpec_case140() {
	fmt.Println(exampleAST(674, "set zrange restore"))
	// Output:
	// &plot.SetSpec{
	// · Case: 140,
	// · SetRangeSpec: &plot.SetRangeSpec{
	// · · Case: 1,
	// · · Token: example674.go:1:12: IDENTIFIER "restore",
	// · },
	// · Token: example674.go:1:5: IDENTIFIER "zrange",
	// }
}

func ExampleSetSpec_case141() {
	fmt.Println(exampleAST(675, "set ztics"))
	// Output:
	// &plot.SetSpec{
	// · Case: 141,
	// · Token: example675.go:1:5: IDENTIFIER "ztics",
	// }
}

func ExampleSetSpec_case142() {
	fmt.Println(exampleAST(676, "set zzeroaxis"))
	// Output:
	// &plot.SetSpec{
	// · Case: 142,
	// · Token: example676.go:1:5: IDENTIFIER "zzeroaxis",
	// }
}

func ExampleSetStyleBoxplotSpecList() {
	fmt.Println(exampleAST(1282, "set style boxplot candlesticks"))
	// Output:
	// &plot.SetStyleBoxplotSpecList{
	// · SetStyleBoxplotSpecListItem: &plot.SetStyleBoxplotSpecListItem{
	// · · Case: 5,
	// · · Token: example1282.go:1:19: IDENTIFIER "candlesticks",
	// · },
	// }
}

func ExampleSetStyleBoxplotSpecList_case1() {
	fmt.Println(exampleAST(1283, "set style boxplot candlesticks candlesticks"))
	// Output:
	// &plot.SetStyleBoxplotSpecList{
	// · SetStyleBoxplotSpecList: &plot.SetStyleBoxplotSpecList{
	// · · Case: 1,
	// · · SetStyleBoxplotSpecListItem: &plot.SetStyleBoxplotSpecListItem{
	// · · · Case: 5,
	// · · · Token: example1283.go:1:32: IDENTIFIER "candlesticks",
	// · · },
	// · },
	// · SetStyleBoxplotSpecListItem: &plot.SetStyleBoxplotSpecListItem{
	// · · Case: 5,
	// · · Token: example1283.go:1:19: IDENTIFIER "candlesticks",
	// · },
	// }
}

func ExampleSetStyleBoxplotSpecListItem() {
	fmt.Println(exampleAST(1284, "set style boxplot range ident_a"))
	// Output:
	// &plot.SetStyleBoxplotSpecListItem{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1284.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1284.go:1:19: IDENTIFIER "range",
	// }
}

func ExampleSetStyleBoxplotSpecListItem_case01() {
	fmt.Println(exampleAST(1285, "set style boxplot fraction ident_a"))
	// Output:
	// &plot.SetStyleBoxplotSpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1285.go:1:28: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1285.go:1:19: IDENTIFIER "fraction",
	// }
}

func ExampleSetStyleBoxplotSpecListItem_case02() {
	fmt.Println(exampleAST(1286, "set style boxplot outliers"))
	// Output:
	// &plot.SetStyleBoxplotSpecListItem{
	// · Case: 2,
	// · Token: example1286.go:1:19: IDENTIFIER "outliers",
	// }
}

func ExampleSetStyleBoxplotSpecListItem_case03() {
	fmt.Println(exampleAST(1287, "set style boxplot nooutliers"))
	// Output:
	// &plot.SetStyleBoxplotSpecListItem{
	// · Case: 3,
	// · Token: example1287.go:1:19: IDENTIFIER "nooutliers",
	// }
}

func ExampleSetStyleBoxplotSpecListItem_case04() {
	fmt.Println(exampleAST(1288, "set style boxplot pointtype ident_a"))
	// Output:
	// &plot.SetStyleBoxplotSpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1288.go:1:29: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1288.go:1:19: IDENTIFIER "pointtype",
	// }
}

func ExampleSetStyleBoxplotSpecListItem_case05() {
	fmt.Println(exampleAST(1289, "set style boxplot candlesticks"))
	// Output:
	// &plot.SetStyleBoxplotSpecListItem{
	// · Case: 5,
	// · Token: example1289.go:1:19: IDENTIFIER "candlesticks",
	// }
}

func ExampleSetStyleBoxplotSpecListItem_case06() {
	fmt.Println(exampleAST(1290, "set style boxplot financebars"))
	// Output:
	// &plot.SetStyleBoxplotSpecListItem{
	// · Case: 6,
	// · Token: example1290.go:1:19: IDENTIFIER "financebars",
	// }
}

func ExampleSetStyleBoxplotSpecListItem_case07() {
	fmt.Println(exampleAST(1291, "set style boxplot separation ident_a"))
	// Output:
	// &plot.SetStyleBoxplotSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1291.go:1:30: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1291.go:1:19: IDENTIFIER "separation",
	// }
}

func ExampleSetStyleBoxplotSpecListItem_case08() {
	fmt.Println(exampleAST(1292, "set style boxplot labels off"))
	// Output:
	// &plot.SetStyleBoxplotSpecListItem{
	// · Case: 8,
	// · Token: example1292.go:1:19: IDENTIFIER "labels",
	// · Token2: example1292.go:1:26: IDENTIFIER "off",
	// }
}

func ExampleSetStyleBoxplotSpecListItem_case09() {
	fmt.Println(exampleAST(1293, "set style boxplot labels auto"))
	// Output:
	// &plot.SetStyleBoxplotSpecListItem{
	// · Case: 9,
	// · Token: example1293.go:1:19: IDENTIFIER "labels",
	// · Token2: example1293.go:1:26: IDENTIFIER "auto",
	// }
}

func ExampleSetStyleBoxplotSpecListItem_case10() {
	fmt.Println(exampleAST(1294, "set style boxplot labels x"))
	// Output:
	// &plot.SetStyleBoxplotSpecListItem{
	// · Case: 10,
	// · Token: example1294.go:1:19: IDENTIFIER "labels",
	// · Token2: example1294.go:1:26: IDENTIFIER "x",
	// }
}

func ExampleSetStyleBoxplotSpecListItem_case11() {
	fmt.Println(exampleAST(1295, "set style boxplot labels x2"))
	// Output:
	// &plot.SetStyleBoxplotSpecListItem{
	// · Case: 11,
	// · Token: example1295.go:1:19: IDENTIFIER "labels",
	// · Token2: example1295.go:1:26: IDENTIFIER "x2",
	// }
}

func ExampleSetStyleBoxplotSpecListItem_case12() {
	fmt.Println(exampleAST(1296, "set style boxplot sorted"))
	// Output:
	// &plot.SetStyleBoxplotSpecListItem{
	// · Case: 12,
	// · Token: example1296.go:1:19: IDENTIFIER "sorted",
	// }
}

func ExampleSetStyleBoxplotSpecListItem_case13() {
	fmt.Println(exampleAST(1297, "set style boxplot unsorted"))
	// Output:
	// &plot.SetStyleBoxplotSpecListItem{
	// · Case: 13,
	// · Token: example1297.go:1:19: IDENTIFIER "unsorted",
	// }
}

func ExampleSetStyleCircleSpecList() {
	fmt.Println(exampleAST(1328, "set style circle clip"))
	// Output:
	// &plot.SetStyleCircleSpecList{
	// · SetStyleCircleSpecListItem: &plot.SetStyleCircleSpecListItem{
	// · · Case: 3,
	// · · Token: example1328.go:1:18: IDENTIFIER "clip",
	// · },
	// }
}

func ExampleSetStyleCircleSpecList_case1() {
	fmt.Println(exampleAST(1329, "set style circle clip clip"))
	// Output:
	// &plot.SetStyleCircleSpecList{
	// · SetStyleCircleSpecList: &plot.SetStyleCircleSpecList{
	// · · Case: 1,
	// · · SetStyleCircleSpecListItem: &plot.SetStyleCircleSpecListItem{
	// · · · Case: 3,
	// · · · Token: example1329.go:1:23: IDENTIFIER "clip",
	// · · },
	// · },
	// · SetStyleCircleSpecListItem: &plot.SetStyleCircleSpecListItem{
	// · · Case: 3,
	// · · Token: example1329.go:1:18: IDENTIFIER "clip",
	// · },
	// }
}

func ExampleSetStyleCircleSpecListItem() {
	fmt.Println(exampleAST(1330, "set style circle radius ident_a"))
	// Output:
	// &plot.SetStyleCircleSpecListItem{
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1330.go:1:25: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1330.go:1:18: IDENTIFIER "radius",
	// }
}

func ExampleSetStyleCircleSpecListItem_case1() {
	fmt.Println(exampleAST(1331, "set style circle wedge"))
	// Output:
	// &plot.SetStyleCircleSpecListItem{
	// · Case: 1,
	// · Token: example1331.go:1:18: IDENTIFIER "wedge",
	// }
}

func ExampleSetStyleCircleSpecListItem_case2() {
	fmt.Println(exampleAST(1332, "set style circle nowedge"))
	// Output:
	// &plot.SetStyleCircleSpecListItem{
	// · Case: 2,
	// · Token: example1332.go:1:18: IDENTIFIER "nowedge",
	// }
}

func ExampleSetStyleCircleSpecListItem_case3() {
	fmt.Println(exampleAST(1333, "set style circle clip"))
	// Output:
	// &plot.SetStyleCircleSpecListItem{
	// · Case: 3,
	// · Token: example1333.go:1:18: IDENTIFIER "clip",
	// }
}

func ExampleSetStyleCircleSpecListItem_case4() {
	fmt.Println(exampleAST(1334, "set style circle noclip"))
	// Output:
	// &plot.SetStyleCircleSpecListItem{
	// · Case: 4,
	// · Token: example1334.go:1:18: IDENTIFIER "noclip",
	// }
}

func ExampleSetStyleCircleSpecListOpt() {
	fmt.Println(exampleAST(1335, "set style circle") == (*SetStyleCircleSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetStyleCircleSpecListOpt_case1() {
	fmt.Println(exampleAST(1336, "set style circle clip"))
	// Output:
	// &plot.SetStyleCircleSpecListOpt{
	// · SetStyleCircleSpecList: &plot.SetStyleCircleSpecList{
	// · · SetStyleCircleSpecListItem: &plot.SetStyleCircleSpecListItem{
	// · · · Case: 3,
	// · · · Token: example1336.go:1:18: IDENTIFIER "clip",
	// · · },
	// · },
	// }
}

func ExampleSetStyleEllipseSpecList() {
	fmt.Println(exampleAST(1337, "set style ellipse clip"))
	// Output:
	// &plot.SetStyleEllipseSpecList{
	// · SetStyleEllipseSpecListItem: &plot.SetStyleEllipseSpecListItem{
	// · · Case: 5,
	// · · Token: example1337.go:1:19: IDENTIFIER "clip",
	// · },
	// }
}

func ExampleSetStyleEllipseSpecList_case1() {
	fmt.Println(exampleAST(1338, "set style ellipse clip clip"))
	// Output:
	// &plot.SetStyleEllipseSpecList{
	// · SetStyleEllipseSpecList: &plot.SetStyleEllipseSpecList{
	// · · Case: 1,
	// · · SetStyleEllipseSpecListItem: &plot.SetStyleEllipseSpecListItem{
	// · · · Case: 5,
	// · · · Token: example1338.go:1:24: IDENTIFIER "clip",
	// · · },
	// · },
	// · SetStyleEllipseSpecListItem: &plot.SetStyleEllipseSpecListItem{
	// · · Case: 5,
	// · · Token: example1338.go:1:19: IDENTIFIER "clip",
	// · },
	// }
}

func ExampleSetStyleEllipseSpecListItem() {
	fmt.Println(exampleAST(1339, "set style ellipse units xx"))
	// Output:
	// &plot.SetStyleEllipseSpecListItem{
	// · Token: example1339.go:1:19: IDENTIFIER "units",
	// · Token2: example1339.go:1:25: IDENTIFIER "xx",
	// }
}

func ExampleSetStyleEllipseSpecListItem_case1() {
	fmt.Println(exampleAST(1340, "set style ellipse units xy"))
	// Output:
	// &plot.SetStyleEllipseSpecListItem{
	// · Case: 1,
	// · Token: example1340.go:1:19: IDENTIFIER "units",
	// · Token2: example1340.go:1:25: IDENTIFIER "xy",
	// }
}

func ExampleSetStyleEllipseSpecListItem_case2() {
	fmt.Println(exampleAST(1341, "set style ellipse units yy"))
	// Output:
	// &plot.SetStyleEllipseSpecListItem{
	// · Case: 2,
	// · Token: example1341.go:1:19: IDENTIFIER "units",
	// · Token2: example1341.go:1:25: IDENTIFIER "yy",
	// }
}

func ExampleSetStyleEllipseSpecListItem_case3() {
	fmt.Println(exampleAST(1342, "set style ellipse size ident_a"))
	// Output:
	// &plot.SetStyleEllipseSpecListItem{
	// · Case: 3,
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1342.go:1:24: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1342.go:1:19: IDENTIFIER "size",
	// }
}

func ExampleSetStyleEllipseSpecListItem_case4() {
	fmt.Println(exampleAST(1343, "set style ellipse angle ident_a"))
	// Output:
	// &plot.SetStyleEllipseSpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1343.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1343.go:1:19: IDENTIFIER "angle",
	// }
}

func ExampleSetStyleEllipseSpecListItem_case5() {
	fmt.Println(exampleAST(1344, "set style ellipse clip"))
	// Output:
	// &plot.SetStyleEllipseSpecListItem{
	// · Case: 5,
	// · Token: example1344.go:1:19: IDENTIFIER "clip",
	// }
}

func ExampleSetStyleEllipseSpecListItem_case6() {
	fmt.Println(exampleAST(1345, "set style ellipse noclip"))
	// Output:
	// &plot.SetStyleEllipseSpecListItem{
	// · Case: 6,
	// · Token: example1345.go:1:19: IDENTIFIER "noclip",
	// }
}

func ExampleSetStyleEllipseSpecListOpt() {
	fmt.Println(exampleAST(1346, "set style ellipse") == (*SetStyleEllipseSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetStyleEllipseSpecListOpt_case1() {
	fmt.Println(exampleAST(1347, "set style ellipse clip"))
	// Output:
	// &plot.SetStyleEllipseSpecListOpt{
	// · SetStyleEllipseSpecList: &plot.SetStyleEllipseSpecList{
	// · · SetStyleEllipseSpecListItem: &plot.SetStyleEllipseSpecListItem{
	// · · · Case: 5,
	// · · · Token: example1347.go:1:19: IDENTIFIER "clip",
	// · · },
	// · },
	// }
}

func ExampleSetStyleFillSpecList() {
	fmt.Println(exampleAST(1298, "plot ident_a fill bo"))
	// Output:
	// &plot.SetStyleFillSpecList{
	// · SetStyleFillSpecListItem: &plot.SetStyleFillSpecListItem{
	// · · Case: 5,
	// · · Token: example1298.go:1:19: IDENTIFIER "bo",
	// · },
	// }
}

func ExampleSetStyleFillSpecList_case1() {
	fmt.Println(exampleAST(1299, "plot ident_a fs bo bo"))
	// Output:
	// &plot.SetStyleFillSpecList{
	// · SetStyleFillSpecList: &plot.SetStyleFillSpecList{
	// · · Case: 1,
	// · · SetStyleFillSpecListItem: &plot.SetStyleFillSpecListItem{
	// · · · Case: 5,
	// · · · Token: example1299.go:1:20: IDENTIFIER "bo",
	// · · },
	// · },
	// · SetStyleFillSpecListItem: &plot.SetStyleFillSpecListItem{
	// · · Case: 5,
	// · · Token: example1299.go:1:17: IDENTIFIER "bo",
	// · },
	// }
}

func ExampleSetStyleFillSpecListItem() {
	fmt.Println(exampleAST(1300, "plot ident_a fill empty"))
	// Output:
	// &plot.SetStyleFillSpecListItem{
	// · Token: example1300.go:1:19: IDENTIFIER "empty",
	// }
}

func ExampleSetStyleFillSpecListItem_case01() {
	fmt.Println(exampleAST(1301, "plot ident_a fill transparent"))
	// Output:
	// &plot.SetStyleFillSpecListItem{
	// · Case: 1,
	// · Token: example1301.go:1:19: IDENTIFIER "transparent",
	// }
}

func ExampleSetStyleFillSpecListItem_case02() {
	fmt.Println(exampleAST(1302, "plot ident_a fill solid"))
	// Output:
	// &plot.SetStyleFillSpecListItem{
	// · Case: 2,
	// · Token: example1302.go:1:19: IDENTIFIER "solid",
	// }
}

func ExampleSetStyleFillSpecListItem_case03() {
	fmt.Println(exampleAST(1303, "plot ident_a fill solid ident_b"))
	// Output:
	// &plot.SetStyleFillSpecListItem{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1303.go:1:25: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1303.go:1:19: IDENTIFIER "solid",
	// }
}

func ExampleSetStyleFillSpecListItem_case04() {
	fmt.Println(exampleAST(1304, "plot ident_a fs pattern ident_b"))
	// Output:
	// &plot.SetStyleFillSpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1304.go:1:25: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1304.go:1:17: IDENTIFIER "pattern",
	// }
}

func ExampleSetStyleFillSpecListItem_case05() {
	fmt.Println(exampleAST(1305, "plot ident_a fill bo"))
	// Output:
	// &plot.SetStyleFillSpecListItem{
	// · Case: 5,
	// · Token: example1305.go:1:19: IDENTIFIER "bo",
	// }
}

func ExampleSetStyleFillSpecListItem_case06() {
	fmt.Println(exampleAST(1306, "plot ident_a fill bo ident_b"))
	// Output:
	// &plot.SetStyleFillSpecListItem{
	// · Case: 6,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1306.go:1:22: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1306.go:1:19: IDENTIFIER "bo",
	// }
}

func ExampleSetStyleFillSpecListItem_case07() {
	fmt.Println(exampleAST(1307, "plot ident_a fill border"))
	// Output:
	// &plot.SetStyleFillSpecListItem{
	// · Case: 7,
	// · Token: example1307.go:1:19: IDENTIFIER "border",
	// }
}

func ExampleSetStyleFillSpecListItem_case08() {
	fmt.Println(exampleAST(1308, "plot ident_a fill border ident_b"))
	// Output:
	// &plot.SetStyleFillSpecListItem{
	// · Case: 8,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1308.go:1:26: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1308.go:1:19: IDENTIFIER "border",
	// }
}

func ExampleSetStyleFillSpecListItem_case09() {
	fmt.Println(exampleAST(1309, "plot ident_a fill lt ident_b"))
	// Output:
	// &plot.SetStyleFillSpecListItem{
	// · Case: 9,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1309.go:1:22: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1309.go:1:19: IDENTIFIER "lt",
	// }
}

func ExampleSetStyleFillSpecListItem_case10() {
	fmt.Println(exampleAST(1310, "plot ident_a fill lc ident_b"))
	// Output:
	// &plot.SetStyleFillSpecListItem{
	// · Case: 10,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1310.go:1:22: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1310.go:1:19: IDENTIFIER "lc",
	// }
}

func ExampleSetStyleFillSpecListItem_case11() {
	fmt.Println(exampleAST(1311, "plot ident_a fill noborder"))
	// Output:
	// &plot.SetStyleFillSpecListItem{
	// · Case: 11,
	// · Token: example1311.go:1:19: IDENTIFIER "noborder",
	// }
}

func ExampleSetStyleRectangleSpecList() {
	fmt.Println(exampleAST(1348, "set style rectangle back"))
	// Output:
	// &plot.SetStyleRectangleSpecList{
	// · SetStyleRectangleSpecListItem: &plot.SetStyleRectangleSpecListItem{
	// · · Case: 1,
	// · · Token: example1348.go:1:21: IDENTIFIER "back",
	// · },
	// }
}

func ExampleSetStyleRectangleSpecList_case1() {
	fmt.Println(exampleAST(1349, "set style rectangle back back"))
	// Output:
	// &plot.SetStyleRectangleSpecList{
	// · SetStyleRectangleSpecList: &plot.SetStyleRectangleSpecList{
	// · · Case: 1,
	// · · SetStyleRectangleSpecListItem: &plot.SetStyleRectangleSpecListItem{
	// · · · Case: 1,
	// · · · Token: example1349.go:1:26: IDENTIFIER "back",
	// · · },
	// · },
	// · SetStyleRectangleSpecListItem: &plot.SetStyleRectangleSpecListItem{
	// · · Case: 1,
	// · · Token: example1349.go:1:21: IDENTIFIER "back",
	// · },
	// }
}

func ExampleSetStyleRectangleSpecListItem() {
	fmt.Println(exampleAST(1350, "set style rectangle front"))
	// Output:
	// &plot.SetStyleRectangleSpecListItem{
	// · Token: example1350.go:1:21: IDENTIFIER "front",
	// }
}

func ExampleSetStyleRectangleSpecListItem_case1() {
	fmt.Println(exampleAST(1351, "set style rectangle back"))
	// Output:
	// &plot.SetStyleRectangleSpecListItem{
	// · Case: 1,
	// · Token: example1351.go:1:21: IDENTIFIER "back",
	// }
}

func ExampleSetStyleRectangleSpecListItem_case2() {
	fmt.Println(exampleAST(1352, "set style rectangle lw ident_a"))
	// Output:
	// &plot.SetStyleRectangleSpecListItem{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1352.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1352.go:1:21: IDENTIFIER "lw",
	// }
}

func ExampleSetStyleRectangleSpecListItem_case3() {
	fmt.Println(exampleAST(1353, "set style rectangle linewidth ident_a"))
	// Output:
	// &plot.SetStyleRectangleSpecListItem{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1353.go:1:31: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1353.go:1:21: IDENTIFIER "linewidth",
	// }
}

func ExampleSetStyleRectangleSpecListItem_case4() {
	fmt.Println(exampleAST(1354, "set style rectangle fillcolor ident_a"))
	// Output:
	// &plot.SetStyleRectangleSpecListItem{
	// · Case: 4,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1354.go:1:31: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1354.go:1:21: IDENTIFIER "fillcolor",
	// }
}

func ExampleSetStyleRectangleSpecListItem_case5() {
	fmt.Println(exampleAST(1355, "set style rectangle fc ident_a"))
	// Output:
	// &plot.SetStyleRectangleSpecListItem{
	// · Case: 5,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1355.go:1:24: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1355.go:1:21: IDENTIFIER "fc",
	// }
}

func ExampleSetStyleRectangleSpecListItem_case6() {
	fmt.Println(exampleAST(1356, "set style rectangle fs bo"))
	// Output:
	// &plot.SetStyleRectangleSpecListItem{
	// · Case: 6,
	// · SetStyleFillSpecList: &plot.SetStyleFillSpecList{
	// · · SetStyleFillSpecListItem: &plot.SetStyleFillSpecListItem{
	// · · · Case: 5,
	// · · · Token: example1356.go:1:24: IDENTIFIER "bo",
	// · · },
	// · },
	// · Token: example1356.go:1:21: IDENTIFIER "fs",
	// }
}

func ExampleSetStyleRectangleSpecListOpt() {
	fmt.Println(exampleAST(1357, "set style rectangle") == (*SetStyleRectangleSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetStyleRectangleSpecListOpt_case1() {
	fmt.Println(exampleAST(1358, "set style rectangle back"))
	// Output:
	// &plot.SetStyleRectangleSpecListOpt{
	// · SetStyleRectangleSpecList: &plot.SetStyleRectangleSpecList{
	// · · SetStyleRectangleSpecListItem: &plot.SetStyleRectangleSpecListItem{
	// · · · Case: 1,
	// · · · Token: example1358.go:1:21: IDENTIFIER "back",
	// · · },
	// · },
	// }
}

func ExampleSetStyleSpec() {
	fmt.Println(exampleAST(1312, "set style arrow ident_a default"))
	// Output:
	// &plot.SetStyleSpec{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1312.go:1:17: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1312.go:1:11: IDENTIFIER "arrow",
	// · Token2: example1312.go:1:25: IDENTIFIER "default",
	// }
}

func ExampleSetStyleSpec_case01() {
	fmt.Println(exampleAST(1313, "set style arrow ident_a empty"))
	// Output:
	// &plot.SetStyleSpec{
	// · ArrowStyleList: &plot.ArrowStyleList{
	// · · ArrowStyleListItem: &plot.ArrowStyleListItem{
	// · · · Case: 6,
	// · · · Token: example1313.go:1:25: IDENTIFIER "empty",
	// · · },
	// · },
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1313.go:1:17: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1313.go:1:11: IDENTIFIER "arrow",
	// }
}

func ExampleSetStyleSpec_case02() {
	fmt.Println(exampleAST(1314, "set style boxplot candlesticks"))
	// Output:
	// &plot.SetStyleSpec{
	// · Case: 2,
	// · SetStyleBoxplotSpecList: &plot.SetStyleBoxplotSpecList{
	// · · SetStyleBoxplotSpecListItem: &plot.SetStyleBoxplotSpecListItem{
	// · · · Case: 5,
	// · · · Token: example1314.go:1:19: IDENTIFIER "candlesticks",
	// · · },
	// · },
	// · Token: example1314.go:1:11: IDENTIFIER "boxplot",
	// }
}

func ExampleSetStyleSpec_case03() {
	fmt.Println(exampleAST(1315, "set style data boxerrorbars"))
	// Output:
	// &plot.SetStyleSpec{
	// · Case: 3,
	// · PlotElementStyle: &plot.PlotElementStyle{
	// · · Token: example1315.go:1:16: IDENTIFIER "boxerrorbars",
	// · },
	// · Token: example1315.go:1:11: IDENTIFIER "data",
	// }
}

func ExampleSetStyleSpec_case04() {
	fmt.Println(exampleAST(1316, "set style fill bo"))
	// Output:
	// &plot.SetStyleSpec{
	// · Case: 4,
	// · SetStyleFillSpecList: &plot.SetStyleFillSpecList{
	// · · SetStyleFillSpecListItem: &plot.SetStyleFillSpecListItem{
	// · · · Case: 5,
	// · · · Token: example1316.go:1:16: IDENTIFIER "bo",
	// · · },
	// · },
	// · Token: example1316.go:1:11: IDENTIFIER "fill",
	// }
}

func ExampleSetStyleSpec_case05() {
	fmt.Println(exampleAST(1317, "set style func boxerrorbars"))
	// Output:
	// &plot.SetStyleSpec{
	// · Case: 5,
	// · PlotElementStyle: &plot.PlotElementStyle{
	// · · Token: example1317.go:1:16: IDENTIFIER "boxerrorbars",
	// · },
	// · Token: example1317.go:1:11: IDENTIFIER "func",
	// }
}

func ExampleSetStyleSpec_case06() {
	fmt.Println(exampleAST(1318, "set style function boxerrorbars"))
	// Output:
	// &plot.SetStyleSpec{
	// · Case: 6,
	// · PlotElementStyle: &plot.PlotElementStyle{
	// · · Token: example1318.go:1:20: IDENTIFIER "boxerrorbars",
	// · },
	// · Token: example1318.go:1:11: IDENTIFIER "function",
	// }
}

func ExampleSetStyleSpec_case07() {
	fmt.Println(exampleAST(1319, "set style line ident_a nocontours"))
	// Output:
	// &plot.SetStyleSpec{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1319.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · LineStyleList: &plot.LineStyleList{
	// · · LineStyleListItem: &plot.LineStyleListItem{
	// · · · Case: 15,
	// · · · Token: example1319.go:1:24: IDENTIFIER "nocontours",
	// · · },
	// · },
	// · Token: example1319.go:1:11: IDENTIFIER "line",
	// }
}

func ExampleSetStyleSpec_case08() {
	fmt.Println(exampleAST(1320, "set style circle"))
	// Output:
	// &plot.SetStyleSpec{
	// · Case: 8,
	// · Token: example1320.go:1:11: IDENTIFIER "circle",
	// }
}

func ExampleSetStyleSpec_case09() {
	fmt.Println(exampleAST(1321, "set style ellipse"))
	// Output:
	// &plot.SetStyleSpec{
	// · Case: 9,
	// · Token: example1321.go:1:11: IDENTIFIER "ellipse",
	// }
}

func ExampleSetStyleSpec_case10() {
	fmt.Println(exampleAST(1322, "set style histogram"))
	// Output:
	// &plot.SetStyleSpec{
	// · Case: 10,
	// · Token: example1322.go:1:11: IDENTIFIER "histogram",
	// }
}

func ExampleSetStyleSpec_case11() {
	fmt.Println(exampleAST(1323, "set style increment"))
	// Output:
	// &plot.SetStyleSpec{
	// · Case: 11,
	// · Token: example1323.go:1:11: IDENTIFIER "increment",
	// }
}

func ExampleSetStyleSpec_case12() {
	fmt.Println(exampleAST(1324, "set style increment default"))
	// Output:
	// &plot.SetStyleSpec{
	// · Case: 12,
	// · Token: example1324.go:1:11: IDENTIFIER "increment",
	// · Token2: example1324.go:1:21: IDENTIFIER "default",
	// }
}

func ExampleSetStyleSpec_case13() {
	fmt.Println(exampleAST(1325, "set style increment userstyles"))
	// Output:
	// &plot.SetStyleSpec{
	// · Case: 13,
	// · Token: example1325.go:1:11: IDENTIFIER "increment",
	// · Token2: example1325.go:1:21: IDENTIFIER "userstyles",
	// }
}

func ExampleSetStyleSpec_case14() {
	fmt.Println(exampleAST(1326, "set style rectangle"))
	// Output:
	// &plot.SetStyleSpec{
	// · Case: 14,
	// · Token: example1326.go:1:11: IDENTIFIER "rectangle",
	// }
}

func ExampleSetStyleSpec_case15() {
	fmt.Println(exampleAST(1327, "set style textbox"))
	// Output:
	// &plot.SetStyleSpec{
	// · Case: 15,
	// · Token: example1327.go:1:11: IDENTIFIER "textbox",
	// }
}

func ExampleSetStyleTextboxSpecList() {
	fmt.Println(exampleAST(1359, "set style textbox border"))
	// Output:
	// &plot.SetStyleTextboxSpecList{
	// · SetStyleTextboxSpecListItem: &plot.SetStyleTextboxSpecListItem{
	// · · Case: 2,
	// · · Token: example1359.go:1:19: IDENTIFIER "border",
	// · },
	// }
}

func ExampleSetStyleTextboxSpecList_case1() {
	fmt.Println(exampleAST(1360, "set style textbox border border"))
	// Output:
	// &plot.SetStyleTextboxSpecList{
	// · SetStyleTextboxSpecList: &plot.SetStyleTextboxSpecList{
	// · · Case: 1,
	// · · SetStyleTextboxSpecListItem: &plot.SetStyleTextboxSpecListItem{
	// · · · Case: 2,
	// · · · Token: example1360.go:1:26: IDENTIFIER "border",
	// · · },
	// · },
	// · SetStyleTextboxSpecListItem: &plot.SetStyleTextboxSpecListItem{
	// · · Case: 2,
	// · · Token: example1360.go:1:19: IDENTIFIER "border",
	// · },
	// }
}

func ExampleSetStyleTextboxSpecListItem() {
	fmt.Println(exampleAST(1361, "set style textbox opaque"))
	// Output:
	// &plot.SetStyleTextboxSpecListItem{
	// · Token: example1361.go:1:19: IDENTIFIER "opaque",
	// }
}

func ExampleSetStyleTextboxSpecListItem_case1() {
	fmt.Println(exampleAST(1362, "set style textbox transparent"))
	// Output:
	// &plot.SetStyleTextboxSpecListItem{
	// · Case: 1,
	// · Token: example1362.go:1:19: IDENTIFIER "transparent",
	// }
}

func ExampleSetStyleTextboxSpecListItem_case2() {
	fmt.Println(exampleAST(1363, "set style textbox border"))
	// Output:
	// &plot.SetStyleTextboxSpecListItem{
	// · Case: 2,
	// · Token: example1363.go:1:19: IDENTIFIER "border",
	// }
}

func ExampleSetStyleTextboxSpecListItem_case3() {
	fmt.Println(exampleAST(1364, "set style textbox noborder"))
	// Output:
	// &plot.SetStyleTextboxSpecListItem{
	// · Case: 3,
	// · Token: example1364.go:1:19: IDENTIFIER "noborder",
	// }
}

func ExampleSetStyleTextboxSpecListItem_case4() {
	fmt.Println(exampleAST(1365, "set style textbox margins ident_a , ident_b"))
	// Output:
	// &plot.SetStyleTextboxSpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1365.go:1:27: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1365.go:1:37: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1365.go:1:19: IDENTIFIER "margins",
	// · Token2: example1365.go:1:35: ',' ",",
	// }
}

func ExampleSetStyleTextboxSpecListOpt() {
	fmt.Println(exampleAST(1366, "set style textbox") == (*SetStyleTextboxSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetStyleTextboxSpecListOpt_case1() {
	fmt.Println(exampleAST(1367, "set style textbox border"))
	// Output:
	// &plot.SetStyleTextboxSpecListOpt{
	// · SetStyleTextboxSpecList: &plot.SetStyleTextboxSpecList{
	// · · SetStyleTextboxSpecListItem: &plot.SetStyleTextboxSpecListItem{
	// · · · Case: 2,
	// · · · Token: example1367.go:1:19: IDENTIFIER "border",
	// · · },
	// · },
	// }
}

func ExampleSetSurfaceSpecOpt() {
	fmt.Println(exampleAST(1368, "set surface") == (*SetSurfaceSpecOpt)(nil))
	// Output:
	// true
}

func ExampleSetSurfaceSpecOpt_case1() {
	fmt.Println(exampleAST(1369, "set surface implicit"))
	// Output:
	// &plot.SetSurfaceSpecOpt{
	// · Case: 1,
	// · Token: example1369.go:1:13: IDENTIFIER "implicit",
	// }
}

func ExampleSetSurfaceSpecOpt_case2() {
	fmt.Println(exampleAST(1370, "set surface explicit"))
	// Output:
	// &plot.SetSurfaceSpecOpt{
	// · Case: 2,
	// · Token: example1370.go:1:13: IDENTIFIER "explicit",
	// }
}

func ExampleSetTableSpecOpt() {
	fmt.Println(exampleAST(1371, "set table") == (*SetTableSpecOpt)(nil))
	// Output:
	// true
}

func ExampleSetTableSpecOpt_case1() {
	fmt.Println(exampleAST(1372, "set table ident_a"))
	// Output:
	// &plot.SetTableSpecOpt{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1372.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalAifmSpecList() {
	fmt.Println(exampleAST(1483, "set term aifm ident_a"))
	// Output:
	// &plot.SetTerminalAifmSpecList{
	// · SetTerminalAifmSpecListItem: &plot.SetTerminalAifmSpecListItem{
	// · · Case: 2,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1483.go:1:15: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalAifmSpecList_case1() {
	fmt.Println(exampleAST(1484, "set term aifm ident_a ident_b"))
	// Output:
	// &plot.SetTerminalAifmSpecList{
	// · SetTerminalAifmSpecList: &plot.SetTerminalAifmSpecList{
	// · · Case: 1,
	// · · SetTerminalAifmSpecListItem: &plot.SetTerminalAifmSpecListItem{
	// · · · Case: 2,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1484.go:1:23: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalAifmSpecListItem: &plot.SetTerminalAifmSpecListItem{
	// · · Case: 2,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1484.go:1:15: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalAifmSpecListItem() {
	fmt.Println(exampleAST(1485, "set term aifm color"))
	// Output:
	// &plot.SetTerminalAifmSpecListItem{
	// · Token: example1485.go:1:15: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalAifmSpecListItem_case1() {
	fmt.Println(exampleAST(1486, "set term aifm monochrome"))
	// Output:
	// &plot.SetTerminalAifmSpecListItem{
	// · Case: 1,
	// · Token: example1486.go:1:15: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalAifmSpecListItem_case2() {
	fmt.Println(exampleAST(1487, "set term aifm ident_a"))
	// Output:
	// &plot.SetTerminalAifmSpecListItem{
	// · Case: 2,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1487.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalAifmSpecListOpt() {
	fmt.Println(exampleAST(1488, "set term aifm") == (*SetTerminalAifmSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalAifmSpecListOpt_case1() {
	fmt.Println(exampleAST(1489, "set term aifm ident_a"))
	// Output:
	// &plot.SetTerminalAifmSpecListOpt{
	// · SetTerminalAifmSpecList: &plot.SetTerminalAifmSpecList{
	// · · SetTerminalAifmSpecListItem: &plot.SetTerminalAifmSpecListItem{
	// · · · Case: 2,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1489.go:1:15: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalAquaSpecList() {
	fmt.Println(exampleAST(1490, "set term aqua ident_a"))
	// Output:
	// &plot.SetTerminalAquaSpecList{
	// · SetTerminalAquaSpecListItem: &plot.SetTerminalAquaSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1490.go:1:15: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalAquaSpecList_case1() {
	fmt.Println(exampleAST(1491, "set term aqua ident_a ident_b"))
	// Output:
	// &plot.SetTerminalAquaSpecList{
	// · SetTerminalAquaSpecList: &plot.SetTerminalAquaSpecList{
	// · · Case: 1,
	// · · SetTerminalAquaSpecListItem: &plot.SetTerminalAquaSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1491.go:1:23: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalAquaSpecListItem: &plot.SetTerminalAquaSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1491.go:1:15: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalAquaSpecListItem() {
	fmt.Println(exampleAST(1492, "set term aqua ident_a"))
	// Output:
	// &plot.SetTerminalAquaSpecListItem{
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1492.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalAquaSpecListItem_case1() {
	fmt.Println(exampleAST(1493, "set term aqua title ident_a"))
	// Output:
	// &plot.SetTerminalAquaSpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1493.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1493.go:1:15: IDENTIFIER "title",
	// }
}

func ExampleSetTerminalAquaSpecListItem_case2() {
	fmt.Println(exampleAST(1494, "set term aqua size"))
	// Output:
	// &plot.SetTerminalAquaSpecListItem{
	// · Case: 2,
	// · Token: example1494.go:1:15: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalAquaSpecListItem_case3() {
	fmt.Println(exampleAST(1495, "set term aqua font ident_a"))
	// Output:
	// &plot.SetTerminalAquaSpecListItem{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1495.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1495.go:1:15: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalAquaSpecListItem_case4() {
	fmt.Println(exampleAST(1496, "set term aqua enhanced"))
	// Output:
	// &plot.SetTerminalAquaSpecListItem{
	// · Case: 4,
	// · Token: example1496.go:1:15: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalAquaSpecListItem_case5() {
	fmt.Println(exampleAST(1497, "set term aqua noenhanced"))
	// Output:
	// &plot.SetTerminalAquaSpecListItem{
	// · Case: 5,
	// · Token: example1497.go:1:15: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTerminalAquaSpecListItem_case6() {
	fmt.Println(exampleAST(1498, "set term aqua solid"))
	// Output:
	// &plot.SetTerminalAquaSpecListItem{
	// · Case: 6,
	// · Token: example1498.go:1:15: IDENTIFIER "solid",
	// }
}

func ExampleSetTerminalAquaSpecListItem_case7() {
	fmt.Println(exampleAST(1499, "set term aqua dashed"))
	// Output:
	// &plot.SetTerminalAquaSpecListItem{
	// · Case: 7,
	// · Token: example1499.go:1:15: IDENTIFIER "dashed",
	// }
}

func ExampleSetTerminalAquaSpecListItem_case8() {
	fmt.Println(exampleAST(1500, "set term aqua dl ident_a"))
	// Output:
	// &plot.SetTerminalAquaSpecListItem{
	// · Case: 8,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1500.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1500.go:1:15: IDENTIFIER "dl",
	// }
}

func ExampleSetTerminalAquaSpecListOpt() {
	fmt.Println(exampleAST(1501, "set term aqua") == (*SetTerminalAquaSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalAquaSpecListOpt_case1() {
	fmt.Println(exampleAST(1502, "set term aqua ident_a"))
	// Output:
	// &plot.SetTerminalAquaSpecListOpt{
	// · SetTerminalAquaSpecList: &plot.SetTerminalAquaSpecList{
	// · · SetTerminalAquaSpecListItem: &plot.SetTerminalAquaSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1502.go:1:15: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalBeSpecList() {
	fmt.Println(exampleAST(1503, "set term be ident_a"))
	// Output:
	// &plot.SetTerminalBeSpecList{
	// · SetTerminalBeSpecListItem: &plot.SetTerminalBeSpecListItem{
	// · · Case: 1,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1503.go:1:13: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalBeSpecList_case1() {
	fmt.Println(exampleAST(1504, "set term be ident_a ident_b"))
	// Output:
	// &plot.SetTerminalBeSpecList{
	// · SetTerminalBeSpecList: &plot.SetTerminalBeSpecList{
	// · · Case: 1,
	// · · SetTerminalBeSpecListItem: &plot.SetTerminalBeSpecListItem{
	// · · · Case: 1,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1504.go:1:21: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalBeSpecListItem: &plot.SetTerminalBeSpecListItem{
	// · · Case: 1,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1504.go:1:13: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalBeSpecListItem() {
	fmt.Println(exampleAST(1505, "set term be reset"))
	// Output:
	// &plot.SetTerminalBeSpecListItem{
	// · Token: example1505.go:1:13: IDENTIFIER "reset",
	// }
}

func ExampleSetTerminalBeSpecListItem_case1() {
	fmt.Println(exampleAST(1506, "set term be ident_a"))
	// Output:
	// &plot.SetTerminalBeSpecListItem{
	// · Case: 1,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1506.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalBeSpecListOpt() {
	fmt.Println(exampleAST(1507, "set term be") == (*SetTerminalBeSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalBeSpecListOpt_case1() {
	fmt.Println(exampleAST(1508, "set term be ident_a"))
	// Output:
	// &plot.SetTerminalBeSpecListOpt{
	// · SetTerminalBeSpecList: &plot.SetTerminalBeSpecList{
	// · · SetTerminalBeSpecListItem: &plot.SetTerminalBeSpecListItem{
	// · · · Case: 1,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1508.go:1:13: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalCairolatexSpecList() {
	fmt.Println(exampleAST(1509, "set term cairolatex blacktext"))
	// Output:
	// &plot.SetTerminalCairolatexSpecList{
	// · SetTerminalCairolatexSpecListItem: &plot.SetTerminalCairolatexSpecListItem{
	// · · Case: 4,
	// · · Token: example1509.go:1:21: IDENTIFIER "blacktext",
	// · },
	// }
}

func ExampleSetTerminalCairolatexSpecList_case1() {
	fmt.Println(exampleAST(1510, "set term cairolatex blacktext blacktext"))
	// Output:
	// &plot.SetTerminalCairolatexSpecList{
	// · SetTerminalCairolatexSpecList: &plot.SetTerminalCairolatexSpecList{
	// · · Case: 1,
	// · · SetTerminalCairolatexSpecListItem: &plot.SetTerminalCairolatexSpecListItem{
	// · · · Case: 4,
	// · · · Token: example1510.go:1:31: IDENTIFIER "blacktext",
	// · · },
	// · },
	// · SetTerminalCairolatexSpecListItem: &plot.SetTerminalCairolatexSpecListItem{
	// · · Case: 4,
	// · · Token: example1510.go:1:21: IDENTIFIER "blacktext",
	// · },
	// }
}

func ExampleSetTerminalCairolatexSpecListItem() {
	fmt.Println(exampleAST(1511, "set term cairolatex eps"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Token: example1511.go:1:21: IDENTIFIER "eps",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case01() {
	fmt.Println(exampleAST(1512, "set term cairolatex pdf"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 1,
	// · Token: example1512.go:1:21: IDENTIFIER "pdf",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case02() {
	fmt.Println(exampleAST(1513, "set term cairolatex standalone"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 2,
	// · Token: example1513.go:1:21: IDENTIFIER "standalone",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case03() {
	fmt.Println(exampleAST(1514, "set term cairolatex input"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 3,
	// · Token: example1514.go:1:21: IDENTIFIER "input",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case04() {
	fmt.Println(exampleAST(1515, "set term cairolatex blacktext"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 4,
	// · Token: example1515.go:1:21: IDENTIFIER "blacktext",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case05() {
	fmt.Println(exampleAST(1516, "set term cairolatex colortext"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 5,
	// · Token: example1516.go:1:21: IDENTIFIER "colortext",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case06() {
	fmt.Println(exampleAST(1517, "set term cairolatex colourtext"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 6,
	// · Token: example1517.go:1:21: IDENTIFIER "colourtext",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case07() {
	fmt.Println(exampleAST(1518, "set term cairolatex header ident_a"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1518.go:1:28: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1518.go:1:21: IDENTIFIER "header",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case08() {
	fmt.Println(exampleAST(1519, "set term cairolatex noheader"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 8,
	// · Token: example1519.go:1:21: IDENTIFIER "noheader",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case09() {
	fmt.Println(exampleAST(1520, "set term cairolatex mono"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 9,
	// · Token: example1520.go:1:21: IDENTIFIER "mono",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case10() {
	fmt.Println(exampleAST(1521, "set term cairolatex color"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 10,
	// · Token: example1521.go:1:21: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case11() {
	fmt.Println(exampleAST(1522, "set term cairolatex transparent"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 11,
	// · Token: example1522.go:1:21: IDENTIFIER "transparent",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case12() {
	fmt.Println(exampleAST(1523, "set term cairolatex notransparent"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 12,
	// · Token: example1523.go:1:21: IDENTIFIER "notransparent",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case13() {
	fmt.Println(exampleAST(1524, "set term cairolatex crop"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 13,
	// · Token: example1524.go:1:21: IDENTIFIER "crop",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case14() {
	fmt.Println(exampleAST(1525, "set term cairolatex nocrop"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 14,
	// · Token: example1525.go:1:21: IDENTIFIER "nocrop",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case15() {
	fmt.Println(exampleAST(1526, "set term cairolatex background ident_a"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1526.go:1:32: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1526.go:1:21: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case16() {
	fmt.Println(exampleAST(1527, "set term cairolatex font ident_a"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 16,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1527.go:1:26: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1527.go:1:21: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case17() {
	fmt.Println(exampleAST(1528, "set term cairolatex fontscale ident_a"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 17,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1528.go:1:31: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1528.go:1:21: IDENTIFIER "fontscale",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case18() {
	fmt.Println(exampleAST(1529, "set term cairolatex linewidth ident_a"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 18,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1529.go:1:31: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1529.go:1:21: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case19() {
	fmt.Println(exampleAST(1530, "set term cairolatex rounded"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 19,
	// · Token: example1530.go:1:21: IDENTIFIER "rounded",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case20() {
	fmt.Println(exampleAST(1531, "set term cairolatex butt"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 20,
	// · Token: example1531.go:1:21: IDENTIFIER "butt",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case21() {
	fmt.Println(exampleAST(1532, "set term cairolatex square"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 21,
	// · Token: example1532.go:1:21: IDENTIFIER "square",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case22() {
	fmt.Println(exampleAST(1533, "set term cairolatex dashlength ident_a"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 22,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1533.go:1:32: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1533.go:1:21: IDENTIFIER "dashlength",
	// }
}

func ExampleSetTerminalCairolatexSpecListItem_case23() {
	fmt.Println(exampleAST(1534, "set term cairolatex size ident_a"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListItem{
	// · Case: 23,
	// · ExpressionUnitList: &plot.ExpressionUnitList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1534.go:1:26: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1534.go:1:21: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalCairolatexSpecListOpt() {
	fmt.Println(exampleAST(1535, "set term cairolatex") == (*SetTerminalCairolatexSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalCairolatexSpecListOpt_case1() {
	fmt.Println(exampleAST(1536, "set term cairolatex blacktext"))
	// Output:
	// &plot.SetTerminalCairolatexSpecListOpt{
	// · SetTerminalCairolatexSpecList: &plot.SetTerminalCairolatexSpecList{
	// · · SetTerminalCairolatexSpecListItem: &plot.SetTerminalCairolatexSpecListItem{
	// · · · Case: 4,
	// · · · Token: example1536.go:1:21: IDENTIFIER "blacktext",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalCanvasSpecList() {
	fmt.Println(exampleAST(2127, "set term canvas butt"))
	// Output:
	// &plot.SetTerminalCanvasSpecList{
	// · SetTerminalCanvasSpecListItem: &plot.SetTerminalCanvasSpecListItem{
	// · · Case: 8,
	// · · Token: example2127.go:1:17: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalCanvasSpecList_case1() {
	fmt.Println(exampleAST(2128, "set term canvas butt butt"))
	// Output:
	// &plot.SetTerminalCanvasSpecList{
	// · SetTerminalCanvasSpecList: &plot.SetTerminalCanvasSpecList{
	// · · Case: 1,
	// · · SetTerminalCanvasSpecListItem: &plot.SetTerminalCanvasSpecListItem{
	// · · · Case: 8,
	// · · · Token: example2128.go:1:22: IDENTIFIER "butt",
	// · · },
	// · },
	// · SetTerminalCanvasSpecListItem: &plot.SetTerminalCanvasSpecListItem{
	// · · Case: 8,
	// · · Token: example2128.go:1:17: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalCanvasSpecListItem() {
	fmt.Println(exampleAST(2129, "set term canvas size ident_a , ident_b"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2129.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2129.go:1:32: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2129.go:1:17: IDENTIFIER "size",
	// · Token2: example2129.go:1:30: ',' ",",
	// }
}

func ExampleSetTerminalCanvasSpecListItem_case01() {
	fmt.Println(exampleAST(2130, "set term canvas background ident_a"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2130.go:1:28: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2130.go:1:17: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalCanvasSpecListItem_case02() {
	fmt.Println(exampleAST(2131, "set term canvas fsize ident_a"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2131.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2131.go:1:17: IDENTIFIER "fsize",
	// }
}

func ExampleSetTerminalCanvasSpecListItem_case03() {
	fmt.Println(exampleAST(2132, "set term canvas enhanced"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Case: 3,
	// · Token: example2132.go:1:17: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalCanvasSpecListItem_case04() {
	fmt.Println(exampleAST(2133, "set term canvas noenhanced"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Case: 4,
	// · Token: example2133.go:1:17: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTerminalCanvasSpecListItem_case05() {
	fmt.Println(exampleAST(2134, "set term canvas linewidth ident_a"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Case: 5,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2134.go:1:27: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2134.go:1:17: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalCanvasSpecListItem_case06() {
	fmt.Println(exampleAST(2135, "set term canvas lw ident_a"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2135.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2135.go:1:17: IDENTIFIER "lw",
	// }
}

func ExampleSetTerminalCanvasSpecListItem_case07() {
	fmt.Println(exampleAST(2136, "set term canvas rounded"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Case: 7,
	// · Token: example2136.go:1:17: IDENTIFIER "rounded",
	// }
}

func ExampleSetTerminalCanvasSpecListItem_case08() {
	fmt.Println(exampleAST(2137, "set term canvas butt"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Case: 8,
	// · Token: example2137.go:1:17: IDENTIFIER "butt",
	// }
}

func ExampleSetTerminalCanvasSpecListItem_case09() {
	fmt.Println(exampleAST(2138, "set term canvas square"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Case: 9,
	// · Token: example2138.go:1:17: IDENTIFIER "square",
	// }
}

func ExampleSetTerminalCanvasSpecListItem_case10() {
	fmt.Println(exampleAST(2139, "set term canvas dashlength ident_a"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2139.go:1:28: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2139.go:1:17: IDENTIFIER "dashlength",
	// }
}

func ExampleSetTerminalCanvasSpecListItem_case11() {
	fmt.Println(exampleAST(2140, "set term canvas standalone"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Case: 11,
	// · Token: example2140.go:1:17: IDENTIFIER "standalone",
	// }
}

func ExampleSetTerminalCanvasSpecListItem_case12() {
	fmt.Println(exampleAST(2141, "set term canvas mousing"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Case: 12,
	// · Token: example2141.go:1:17: IDENTIFIER "mousing",
	// }
}

func ExampleSetTerminalCanvasSpecListItem_case13() {
	fmt.Println(exampleAST(2142, "set term canvas name ident_a"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Case: 13,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2142.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2142.go:1:17: IDENTIFIER "name",
	// }
}

func ExampleSetTerminalCanvasSpecListItem_case14() {
	fmt.Println(exampleAST(2143, "set term canvas jsdir ident_a"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Case: 14,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2143.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2143.go:1:17: IDENTIFIER "jsdir",
	// }
}

func ExampleSetTerminalCanvasSpecListItem_case15() {
	fmt.Println(exampleAST(2144, "set term canvas title ident_a"))
	// Output:
	// &plot.SetTerminalCanvasSpecListItem{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2144.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2144.go:1:17: IDENTIFIER "title",
	// }
}

func ExampleSetTerminalCanvasSpecListOpt() {
	fmt.Println(exampleAST(2145, "set term canvas") == (*SetTerminalCanvasSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalCanvasSpecListOpt_case1() {
	fmt.Println(exampleAST(2146, "set term canvas butt"))
	// Output:
	// &plot.SetTerminalCanvasSpecListOpt{
	// · SetTerminalCanvasSpecList: &plot.SetTerminalCanvasSpecList{
	// · · SetTerminalCanvasSpecListItem: &plot.SetTerminalCanvasSpecListItem{
	// · · · Case: 8,
	// · · · Token: example2146.go:1:17: IDENTIFIER "butt",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalCgmSpecList() {
	fmt.Println(exampleAST(1537, "set term cgm ident_a"))
	// Output:
	// &plot.SetTerminalCgmSpecList{
	// · SetTerminalCgmSpecListItem: &plot.SetTerminalCgmSpecListItem{
	// · · Case: 6,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1537.go:1:14: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalCgmSpecList_case1() {
	fmt.Println(exampleAST(1538, "set term cgm ident_a ident_b"))
	// Output:
	// &plot.SetTerminalCgmSpecList{
	// · SetTerminalCgmSpecList: &plot.SetTerminalCgmSpecList{
	// · · Case: 1,
	// · · SetTerminalCgmSpecListItem: &plot.SetTerminalCgmSpecListItem{
	// · · · Case: 6,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1538.go:1:22: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalCgmSpecListItem: &plot.SetTerminalCgmSpecListItem{
	// · · Case: 6,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1538.go:1:14: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalCgmSpecListItem() {
	fmt.Println(exampleAST(1539, "set term cgm color"))
	// Output:
	// &plot.SetTerminalCgmSpecListItem{
	// · Token: example1539.go:1:14: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalCgmSpecListItem_case01() {
	fmt.Println(exampleAST(1540, "set term cgm monochrome"))
	// Output:
	// &plot.SetTerminalCgmSpecListItem{
	// · Case: 1,
	// · Token: example1540.go:1:14: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalCgmSpecListItem_case02() {
	fmt.Println(exampleAST(1541, "set term cgm solid"))
	// Output:
	// &plot.SetTerminalCgmSpecListItem{
	// · Case: 2,
	// · Token: example1541.go:1:14: IDENTIFIER "solid",
	// }
}

func ExampleSetTerminalCgmSpecListItem_case03() {
	fmt.Println(exampleAST(1542, "set term cgm dashed"))
	// Output:
	// &plot.SetTerminalCgmSpecListItem{
	// · Case: 3,
	// · Token: example1542.go:1:14: IDENTIFIER "dashed",
	// }
}

func ExampleSetTerminalCgmSpecListItem_case04() {
	fmt.Println(exampleAST(1543, "set term cgm rotate"))
	// Output:
	// &plot.SetTerminalCgmSpecListItem{
	// · Case: 4,
	// · Token: example1543.go:1:14: IDENTIFIER "rotate",
	// }
}

func ExampleSetTerminalCgmSpecListItem_case05() {
	fmt.Println(exampleAST(1544, "set term cgm norotate"))
	// Output:
	// &plot.SetTerminalCgmSpecListItem{
	// · Case: 5,
	// · Token: example1544.go:1:14: IDENTIFIER "norotate",
	// }
}

func ExampleSetTerminalCgmSpecListItem_case06() {
	fmt.Println(exampleAST(1545, "set term cgm ident_a"))
	// Output:
	// &plot.SetTerminalCgmSpecListItem{
	// · Case: 6,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1545.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalCgmSpecListItem_case07() {
	fmt.Println(exampleAST(1546, "set term cgm width ident_a"))
	// Output:
	// &plot.SetTerminalCgmSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1546.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1546.go:1:14: IDENTIFIER "width",
	// }
}

func ExampleSetTerminalCgmSpecListItem_case08() {
	fmt.Println(exampleAST(1547, "set term cgm linewidth ident_a"))
	// Output:
	// &plot.SetTerminalCgmSpecListItem{
	// · Case: 8,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1547.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1547.go:1:14: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalCgmSpecListItem_case09() {
	fmt.Println(exampleAST(1548, "set term cgm font ident_a"))
	// Output:
	// &plot.SetTerminalCgmSpecListItem{
	// · Case: 9,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1548.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1548.go:1:14: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalCgmSpecListItem_case10() {
	fmt.Println(exampleAST(1549, "set term cgm background ident_a"))
	// Output:
	// &plot.SetTerminalCgmSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1549.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1549.go:1:14: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalCgmSpecListOpt() {
	fmt.Println(exampleAST(1550, "set term cgm") == (*SetTerminalCgmSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalCgmSpecListOpt_case1() {
	fmt.Println(exampleAST(1551, "set term cgm ident_a"))
	// Output:
	// &plot.SetTerminalCgmSpecListOpt{
	// · SetTerminalCgmSpecList: &plot.SetTerminalCgmSpecList{
	// · · SetTerminalCgmSpecListItem: &plot.SetTerminalCgmSpecListItem{
	// · · · Case: 6,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1551.go:1:14: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalContextSpecList() {
	fmt.Println(exampleAST(1552, "set term context beveled"))
	// Output:
	// &plot.SetTerminalContextSpecList{
	// · SetTerminalContextSpecListItem: &plot.SetTerminalContextSpecListItem{
	// · · Case: 14,
	// · · Token: example1552.go:1:18: IDENTIFIER "beveled",
	// · },
	// }
}

func ExampleSetTerminalContextSpecList_case1() {
	fmt.Println(exampleAST(1553, "set term context beveled beveled"))
	// Output:
	// &plot.SetTerminalContextSpecList{
	// · SetTerminalContextSpecList: &plot.SetTerminalContextSpecList{
	// · · Case: 1,
	// · · SetTerminalContextSpecListItem: &plot.SetTerminalContextSpecListItem{
	// · · · Case: 14,
	// · · · Token: example1553.go:1:26: IDENTIFIER "beveled",
	// · · },
	// · },
	// · SetTerminalContextSpecListItem: &plot.SetTerminalContextSpecListItem{
	// · · Case: 14,
	// · · Token: example1553.go:1:18: IDENTIFIER "beveled",
	// · },
	// }
}

func ExampleSetTerminalContextSpecListItem() {
	fmt.Println(exampleAST(1554, "set term context default"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Token: example1554.go:1:18: IDENTIFIER "default",
	// }
}

func ExampleSetTerminalContextSpecListItem_case01() {
	fmt.Println(exampleAST(1555, "set term context defaultsize ident_a"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1555.go:1:30: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1555.go:1:18: IDENTIFIER "defaultsize",
	// }
}

func ExampleSetTerminalContextSpecListItem_case02() {
	fmt.Println(exampleAST(1556, "set term context size ident_a"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 2,
	// · ExpressionUnitList: &plot.ExpressionUnitList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1556.go:1:23: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1556.go:1:18: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalContextSpecListItem_case03() {
	fmt.Println(exampleAST(1557, "set term context input"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 3,
	// · Token: example1557.go:1:18: IDENTIFIER "input",
	// }
}

func ExampleSetTerminalContextSpecListItem_case04() {
	fmt.Println(exampleAST(1558, "set term context standalone"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 4,
	// · Token: example1558.go:1:18: IDENTIFIER "standalone",
	// }
}

func ExampleSetTerminalContextSpecListItem_case05() {
	fmt.Println(exampleAST(1559, "set term context timestamp"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 5,
	// · Token: example1559.go:1:18: IDENTIFIER "timestamp",
	// }
}

func ExampleSetTerminalContextSpecListItem_case06() {
	fmt.Println(exampleAST(1560, "set term context notimestamp"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 6,
	// · Token: example1560.go:1:18: IDENTIFIER "notimestamp",
	// }
}

func ExampleSetTerminalContextSpecListItem_case07() {
	fmt.Println(exampleAST(1561, "set term context header ident_a"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1561.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1561.go:1:18: IDENTIFIER "header",
	// }
}

func ExampleSetTerminalContextSpecListItem_case08() {
	fmt.Println(exampleAST(1562, "set term context noheader"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 8,
	// · Token: example1562.go:1:18: IDENTIFIER "noheader",
	// }
}

func ExampleSetTerminalContextSpecListItem_case09() {
	fmt.Println(exampleAST(1563, "set term context color"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 9,
	// · Token: example1563.go:1:18: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalContextSpecListItem_case10() {
	fmt.Println(exampleAST(1564, "set term context colour"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 10,
	// · Token: example1564.go:1:18: IDENTIFIER "colour",
	// }
}

func ExampleSetTerminalContextSpecListItem_case11() {
	fmt.Println(exampleAST(1565, "set term context monochrome"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 11,
	// · Token: example1565.go:1:18: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalContextSpecListItem_case12() {
	fmt.Println(exampleAST(1566, "set term context rounded"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 12,
	// · Token: example1566.go:1:18: IDENTIFIER "rounded",
	// }
}

func ExampleSetTerminalContextSpecListItem_case13() {
	fmt.Println(exampleAST(1567, "set term context mitered"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 13,
	// · Token: example1567.go:1:18: IDENTIFIER "mitered",
	// }
}

func ExampleSetTerminalContextSpecListItem_case14() {
	fmt.Println(exampleAST(1568, "set term context beveled"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 14,
	// · Token: example1568.go:1:18: IDENTIFIER "beveled",
	// }
}

func ExampleSetTerminalContextSpecListItem_case15() {
	fmt.Println(exampleAST(1569, "set term context round"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 15,
	// · Token: example1569.go:1:18: IDENTIFIER "round",
	// }
}

func ExampleSetTerminalContextSpecListItem_case16() {
	fmt.Println(exampleAST(1570, "set term context butt"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 16,
	// · Token: example1570.go:1:18: IDENTIFIER "butt",
	// }
}

func ExampleSetTerminalContextSpecListItem_case17() {
	fmt.Println(exampleAST(1571, "set term context squared"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 17,
	// · Token: example1571.go:1:18: IDENTIFIER "squared",
	// }
}

func ExampleSetTerminalContextSpecListItem_case18() {
	fmt.Println(exampleAST(1572, "set term context dashed"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 18,
	// · Token: example1572.go:1:18: IDENTIFIER "dashed",
	// }
}

func ExampleSetTerminalContextSpecListItem_case19() {
	fmt.Println(exampleAST(1573, "set term context solid"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 19,
	// · Token: example1573.go:1:18: IDENTIFIER "solid",
	// }
}

func ExampleSetTerminalContextSpecListItem_case20() {
	fmt.Println(exampleAST(1574, "set term context dashlength ident_a"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 20,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1574.go:1:29: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1574.go:1:18: IDENTIFIER "dashlength",
	// }
}

func ExampleSetTerminalContextSpecListItem_case21() {
	fmt.Println(exampleAST(1575, "set term context dl ident_a"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 21,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1575.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1575.go:1:18: IDENTIFIER "dl",
	// }
}

func ExampleSetTerminalContextSpecListItem_case22() {
	fmt.Println(exampleAST(1576, "set term context linewidth ident_a"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 22,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1576.go:1:28: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1576.go:1:18: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalContextSpecListItem_case23() {
	fmt.Println(exampleAST(1577, "set term context lw ident_a"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 23,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1577.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1577.go:1:18: IDENTIFIER "lw",
	// }
}

func ExampleSetTerminalContextSpecListItem_case24() {
	fmt.Println(exampleAST(1578, "set term context fontscale ident_a"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 24,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1578.go:1:28: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1578.go:1:18: IDENTIFIER "fontscale",
	// }
}

func ExampleSetTerminalContextSpecListItem_case25() {
	fmt.Println(exampleAST(1579, "set term context mppoints"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 25,
	// · Token: example1579.go:1:18: IDENTIFIER "mppoints",
	// }
}

func ExampleSetTerminalContextSpecListItem_case26() {
	fmt.Println(exampleAST(1580, "set term context texpoints"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 26,
	// · Token: example1580.go:1:18: IDENTIFIER "texpoints",
	// }
}

func ExampleSetTerminalContextSpecListItem_case27() {
	fmt.Println(exampleAST(1581, "set term context inlineimages"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 27,
	// · Token: example1581.go:1:18: IDENTIFIER "inlineimages",
	// }
}

func ExampleSetTerminalContextSpecListItem_case28() {
	fmt.Println(exampleAST(1582, "set term context externalimages"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 28,
	// · Token: example1582.go:1:18: IDENTIFIER "externalimages",
	// }
}

func ExampleSetTerminalContextSpecListItem_case29() {
	fmt.Println(exampleAST(1583, "set term context defaultfont"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 29,
	// · Token: example1583.go:1:18: IDENTIFIER "defaultfont",
	// }
}

func ExampleSetTerminalContextSpecListItem_case30() {
	fmt.Println(exampleAST(1584, "set term context font ident_a"))
	// Output:
	// &plot.SetTerminalContextSpecListItem{
	// · Case: 30,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1584.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1584.go:1:18: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalContextSpecListOpt() {
	fmt.Println(exampleAST(1585, "set term context") == (*SetTerminalContextSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalContextSpecListOpt_case1() {
	fmt.Println(exampleAST(1586, "set term context beveled"))
	// Output:
	// &plot.SetTerminalContextSpecListOpt{
	// · SetTerminalContextSpecList: &plot.SetTerminalContextSpecList{
	// · · SetTerminalContextSpecListItem: &plot.SetTerminalContextSpecListItem{
	// · · · Case: 14,
	// · · · Token: example1586.go:1:18: IDENTIFIER "beveled",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalCorelSpecList() {
	fmt.Println(exampleAST(1587, "set term corel ident_a"))
	// Output:
	// &plot.SetTerminalCorelSpecList{
	// · SetTerminalCorelSpecListItem: &plot.SetTerminalCorelSpecListItem{
	// · · Case: 3,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1587.go:1:16: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalCorelSpecList_case1() {
	fmt.Println(exampleAST(1588, "set term corel ident_a ident_b"))
	// Output:
	// &plot.SetTerminalCorelSpecList{
	// · SetTerminalCorelSpecList: &plot.SetTerminalCorelSpecList{
	// · · Case: 1,
	// · · SetTerminalCorelSpecListItem: &plot.SetTerminalCorelSpecListItem{
	// · · · Case: 3,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1588.go:1:24: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalCorelSpecListItem: &plot.SetTerminalCorelSpecListItem{
	// · · Case: 3,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1588.go:1:16: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalCorelSpecListItem() {
	fmt.Println(exampleAST(1589, "set term corel default"))
	// Output:
	// &plot.SetTerminalCorelSpecListItem{
	// · Token: example1589.go:1:16: IDENTIFIER "default",
	// }
}

func ExampleSetTerminalCorelSpecListItem_case1() {
	fmt.Println(exampleAST(1590, "set term corel monochrome"))
	// Output:
	// &plot.SetTerminalCorelSpecListItem{
	// · Case: 1,
	// · Token: example1590.go:1:16: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalCorelSpecListItem_case2() {
	fmt.Println(exampleAST(1591, "set term corel color"))
	// Output:
	// &plot.SetTerminalCorelSpecListItem{
	// · Case: 2,
	// · Token: example1591.go:1:16: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalCorelSpecListItem_case3() {
	fmt.Println(exampleAST(1592, "set term corel ident_a"))
	// Output:
	// &plot.SetTerminalCorelSpecListItem{
	// · Case: 3,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1592.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalCorelSpecListOpt() {
	fmt.Println(exampleAST(1593, "set term corel") == (*SetTerminalCorelSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalCorelSpecListOpt_case1() {
	fmt.Println(exampleAST(1594, "set term corel ident_a"))
	// Output:
	// &plot.SetTerminalCorelSpecListOpt{
	// · SetTerminalCorelSpecList: &plot.SetTerminalCorelSpecList{
	// · · SetTerminalCorelSpecListItem: &plot.SetTerminalCorelSpecListItem{
	// · · · Case: 3,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1594.go:1:16: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalDpu414SpecList() {
	fmt.Println(exampleAST(1640, "set term dpu414 draft"))
	// Output:
	// &plot.SetTerminalDpu414SpecList{
	// · SetTerminalDpu414SpecListItem: &plot.SetTerminalDpu414SpecListItem{
	// · · Case: 4,
	// · · Token: example1640.go:1:17: IDENTIFIER "draft",
	// · },
	// }
}

func ExampleSetTerminalDpu414SpecList_case1() {
	fmt.Println(exampleAST(1641, "set term dpu414 draft draft"))
	// Output:
	// &plot.SetTerminalDpu414SpecList{
	// · SetTerminalDpu414SpecList: &plot.SetTerminalDpu414SpecList{
	// · · Case: 1,
	// · · SetTerminalDpu414SpecListItem: &plot.SetTerminalDpu414SpecListItem{
	// · · · Case: 4,
	// · · · Token: example1641.go:1:23: IDENTIFIER "draft",
	// · · },
	// · },
	// · SetTerminalDpu414SpecListItem: &plot.SetTerminalDpu414SpecListItem{
	// · · Case: 4,
	// · · Token: example1641.go:1:17: IDENTIFIER "draft",
	// · },
	// }
}

func ExampleSetTerminalDpu414SpecListItem() {
	fmt.Println(exampleAST(1642, "set term dpu414 small"))
	// Output:
	// &plot.SetTerminalDpu414SpecListItem{
	// · Token: example1642.go:1:17: IDENTIFIER "small",
	// }
}

func ExampleSetTerminalDpu414SpecListItem_case1() {
	fmt.Println(exampleAST(1643, "set term dpu414 medium"))
	// Output:
	// &plot.SetTerminalDpu414SpecListItem{
	// · Case: 1,
	// · Token: example1643.go:1:17: IDENTIFIER "medium",
	// }
}

func ExampleSetTerminalDpu414SpecListItem_case2() {
	fmt.Println(exampleAST(1644, "set term dpu414 large"))
	// Output:
	// &plot.SetTerminalDpu414SpecListItem{
	// · Case: 2,
	// · Token: example1644.go:1:17: IDENTIFIER "large",
	// }
}

func ExampleSetTerminalDpu414SpecListItem_case3() {
	fmt.Println(exampleAST(1645, "set term dpu414 normal"))
	// Output:
	// &plot.SetTerminalDpu414SpecListItem{
	// · Case: 3,
	// · Token: example1645.go:1:17: IDENTIFIER "normal",
	// }
}

func ExampleSetTerminalDpu414SpecListItem_case4() {
	fmt.Println(exampleAST(1646, "set term dpu414 draft"))
	// Output:
	// &plot.SetTerminalDpu414SpecListItem{
	// · Case: 4,
	// · Token: example1646.go:1:17: IDENTIFIER "draft",
	// }
}

func ExampleSetTerminalDpu414SpecListOpt() {
	fmt.Println(exampleAST(1647, "set term dpu414") == (*SetTerminalDpu414SpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalDpu414SpecListOpt_case1() {
	fmt.Println(exampleAST(1648, "set term dpu414 draft"))
	// Output:
	// &plot.SetTerminalDpu414SpecListOpt{
	// · SetTerminalDpu414SpecList: &plot.SetTerminalDpu414SpecList{
	// · · SetTerminalDpu414SpecListItem: &plot.SetTerminalDpu414SpecListItem{
	// · · · Case: 4,
	// · · · Token: example1648.go:1:17: IDENTIFIER "draft",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalDumbSpecList() {
	fmt.Println(exampleAST(1595, "set term dumb enhanced"))
	// Output:
	// &plot.SetTerminalDumbSpecList{
	// · SetTerminalDumbSpecListItem: &plot.SetTerminalDumbSpecListItem{
	// · · Case: 4,
	// · · Token: example1595.go:1:15: IDENTIFIER "enhanced",
	// · },
	// }
}

func ExampleSetTerminalDumbSpecList_case1() {
	fmt.Println(exampleAST(1596, "set term dumb enhanced enhanced"))
	// Output:
	// &plot.SetTerminalDumbSpecList{
	// · SetTerminalDumbSpecList: &plot.SetTerminalDumbSpecList{
	// · · Case: 1,
	// · · SetTerminalDumbSpecListItem: &plot.SetTerminalDumbSpecListItem{
	// · · · Case: 4,
	// · · · Token: example1596.go:1:24: IDENTIFIER "enhanced",
	// · · },
	// · },
	// · SetTerminalDumbSpecListItem: &plot.SetTerminalDumbSpecListItem{
	// · · Case: 4,
	// · · Token: example1596.go:1:15: IDENTIFIER "enhanced",
	// · },
	// }
}

func ExampleSetTerminalDumbSpecListItem() {
	fmt.Println(exampleAST(1597, "set term dumb size ident_a"))
	// Output:
	// &plot.SetTerminalDumbSpecListItem{
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1597.go:1:20: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1597.go:1:15: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalDumbSpecListItem_case1() {
	fmt.Println(exampleAST(1598, "set term dumb feed"))
	// Output:
	// &plot.SetTerminalDumbSpecListItem{
	// · Case: 1,
	// · Token: example1598.go:1:15: IDENTIFIER "feed",
	// }
}

func ExampleSetTerminalDumbSpecListItem_case2() {
	fmt.Println(exampleAST(1599, "set term dumb nofeed"))
	// Output:
	// &plot.SetTerminalDumbSpecListItem{
	// · Case: 2,
	// · Token: example1599.go:1:15: IDENTIFIER "nofeed",
	// }
}

func ExampleSetTerminalDumbSpecListItem_case3() {
	fmt.Println(exampleAST(1600, "set term dumb aspect ident_a"))
	// Output:
	// &plot.SetTerminalDumbSpecListItem{
	// · Case: 3,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1600.go:1:22: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1600.go:1:15: IDENTIFIER "aspect",
	// }
}

func ExampleSetTerminalDumbSpecListItem_case4() {
	fmt.Println(exampleAST(1601, "set term dumb enhanced"))
	// Output:
	// &plot.SetTerminalDumbSpecListItem{
	// · Case: 4,
	// · Token: example1601.go:1:15: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalDumbSpecListItem_case5() {
	fmt.Println(exampleAST(1602, "set term dumb noenhanced"))
	// Output:
	// &plot.SetTerminalDumbSpecListItem{
	// · Case: 5,
	// · Token: example1602.go:1:15: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTerminalDumbSpecListOpt() {
	fmt.Println(exampleAST(1603, "set term dumb") == (*SetTerminalDumbSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalDumbSpecListOpt_case1() {
	fmt.Println(exampleAST(1604, "set term dumb enhanced"))
	// Output:
	// &plot.SetTerminalDumbSpecListOpt{
	// · SetTerminalDumbSpecList: &plot.SetTerminalDumbSpecList{
	// · · SetTerminalDumbSpecListItem: &plot.SetTerminalDumbSpecListItem{
	// · · · Case: 4,
	// · · · Token: example1604.go:1:15: IDENTIFIER "enhanced",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalEepicSpecList() {
	fmt.Println(exampleAST(1605, "set term eepic ident_a"))
	// Output:
	// &plot.SetTerminalEepicSpecList{
	// · SetTerminalEepicSpecListItem: &plot.SetTerminalEepicSpecListItem{
	// · · Case: 7,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1605.go:1:16: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalEepicSpecList_case1() {
	fmt.Println(exampleAST(1606, "set term eepic ident_a ident_b"))
	// Output:
	// &plot.SetTerminalEepicSpecList{
	// · SetTerminalEepicSpecList: &plot.SetTerminalEepicSpecList{
	// · · Case: 1,
	// · · SetTerminalEepicSpecListItem: &plot.SetTerminalEepicSpecListItem{
	// · · · Case: 7,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1606.go:1:24: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalEepicSpecListItem: &plot.SetTerminalEepicSpecListItem{
	// · · Case: 7,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1606.go:1:16: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalEepicSpecListItem() {
	fmt.Println(exampleAST(1607, "set term eepic default"))
	// Output:
	// &plot.SetTerminalEepicSpecListItem{
	// · Token: example1607.go:1:16: IDENTIFIER "default",
	// }
}

func ExampleSetTerminalEepicSpecListItem_case1() {
	fmt.Println(exampleAST(1608, "set term eepic color"))
	// Output:
	// &plot.SetTerminalEepicSpecListItem{
	// · Case: 1,
	// · Token: example1608.go:1:16: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalEepicSpecListItem_case2() {
	fmt.Println(exampleAST(1609, "set term eepic dashed"))
	// Output:
	// &plot.SetTerminalEepicSpecListItem{
	// · Case: 2,
	// · Token: example1609.go:1:16: IDENTIFIER "dashed",
	// }
}

func ExampleSetTerminalEepicSpecListItem_case3() {
	fmt.Println(exampleAST(1610, "set term eepic rotate"))
	// Output:
	// &plot.SetTerminalEepicSpecListItem{
	// · Case: 3,
	// · Token: example1610.go:1:16: IDENTIFIER "rotate",
	// }
}

func ExampleSetTerminalEepicSpecListItem_case4() {
	fmt.Println(exampleAST(1611, "set term eepic size ident_a"))
	// Output:
	// &plot.SetTerminalEepicSpecListItem{
	// · Case: 4,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1611.go:1:21: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1611.go:1:16: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalEepicSpecListItem_case5() {
	fmt.Println(exampleAST(1612, "set term eepic small"))
	// Output:
	// &plot.SetTerminalEepicSpecListItem{
	// · Case: 5,
	// · Token: example1612.go:1:16: IDENTIFIER "small",
	// }
}

func ExampleSetTerminalEepicSpecListItem_case6() {
	fmt.Println(exampleAST(1613, "set term eepic tiny"))
	// Output:
	// &plot.SetTerminalEepicSpecListItem{
	// · Case: 6,
	// · Token: example1613.go:1:16: IDENTIFIER "tiny",
	// }
}

func ExampleSetTerminalEepicSpecListItem_case7() {
	fmt.Println(exampleAST(1614, "set term eepic ident_a"))
	// Output:
	// &plot.SetTerminalEepicSpecListItem{
	// · Case: 7,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1614.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalEepicSpecListOpt() {
	fmt.Println(exampleAST(1615, "set term eepic") == (*SetTerminalEepicSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalEepicSpecListOpt_case1() {
	fmt.Println(exampleAST(1616, "set term eepic ident_a"))
	// Output:
	// &plot.SetTerminalEepicSpecListOpt{
	// · SetTerminalEepicSpecList: &plot.SetTerminalEepicSpecList{
	// · · SetTerminalEepicSpecListItem: &plot.SetTerminalEepicSpecListItem{
	// · · · Case: 7,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1616.go:1:16: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalEmfSpecList() {
	fmt.Println(exampleAST(1617, "set term emf butt"))
	// Output:
	// &plot.SetTerminalEmfSpecList{
	// · SetTerminalEmfSpecListItem: &plot.SetTerminalEmfSpecListItem{
	// · · Case: 5,
	// · · Token: example1617.go:1:14: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalEmfSpecList_case1() {
	fmt.Println(exampleAST(1618, "set term emf butt butt"))
	// Output:
	// &plot.SetTerminalEmfSpecList{
	// · SetTerminalEmfSpecList: &plot.SetTerminalEmfSpecList{
	// · · Case: 1,
	// · · SetTerminalEmfSpecListItem: &plot.SetTerminalEmfSpecListItem{
	// · · · Case: 5,
	// · · · Token: example1618.go:1:19: IDENTIFIER "butt",
	// · · },
	// · },
	// · SetTerminalEmfSpecListItem: &plot.SetTerminalEmfSpecListItem{
	// · · Case: 5,
	// · · Token: example1618.go:1:14: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalEmfSpecListItem() {
	fmt.Println(exampleAST(1619, "set term emf color"))
	// Output:
	// &plot.SetTerminalEmfSpecListItem{
	// · Token: example1619.go:1:14: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalEmfSpecListItem_case01() {
	fmt.Println(exampleAST(1620, "set term emf monochrome"))
	// Output:
	// &plot.SetTerminalEmfSpecListItem{
	// · Case: 1,
	// · Token: example1620.go:1:14: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalEmfSpecListItem_case02() {
	fmt.Println(exampleAST(1621, "set term emf enhanced"))
	// Output:
	// &plot.SetTerminalEmfSpecListItem{
	// · Case: 2,
	// · Token: example1621.go:1:14: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalEmfSpecListItem_case03() {
	fmt.Println(exampleAST(1622, "set term emf noproportional"))
	// Output:
	// &plot.SetTerminalEmfSpecListItem{
	// · Case: 3,
	// · Token: example1622.go:1:14: IDENTIFIER "noproportional",
	// }
}

func ExampleSetTerminalEmfSpecListItem_case04() {
	fmt.Println(exampleAST(1623, "set term emf rounded"))
	// Output:
	// &plot.SetTerminalEmfSpecListItem{
	// · Case: 4,
	// · Token: example1623.go:1:14: IDENTIFIER "rounded",
	// }
}

func ExampleSetTerminalEmfSpecListItem_case05() {
	fmt.Println(exampleAST(1624, "set term emf butt"))
	// Output:
	// &plot.SetTerminalEmfSpecListItem{
	// · Case: 5,
	// · Token: example1624.go:1:14: IDENTIFIER "butt",
	// }
}

func ExampleSetTerminalEmfSpecListItem_case06() {
	fmt.Println(exampleAST(1625, "set term emf linewidth ident_a"))
	// Output:
	// &plot.SetTerminalEmfSpecListItem{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1625.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1625.go:1:14: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalEmfSpecListItem_case07() {
	fmt.Println(exampleAST(1626, "set term emf dashlength ident_a"))
	// Output:
	// &plot.SetTerminalEmfSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1626.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1626.go:1:14: IDENTIFIER "dashlength",
	// }
}

func ExampleSetTerminalEmfSpecListItem_case08() {
	fmt.Println(exampleAST(1627, "set term emf size ident_a"))
	// Output:
	// &plot.SetTerminalEmfSpecListItem{
	// · Case: 8,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1627.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1627.go:1:14: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalEmfSpecListItem_case09() {
	fmt.Println(exampleAST(1628, "set term emf background ident_a"))
	// Output:
	// &plot.SetTerminalEmfSpecListItem{
	// · Case: 9,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1628.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1628.go:1:14: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalEmfSpecListItem_case10() {
	fmt.Println(exampleAST(1629, "set term emf font ident_a"))
	// Output:
	// &plot.SetTerminalEmfSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1629.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1629.go:1:14: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalEmfSpecListItem_case11() {
	fmt.Println(exampleAST(1630, "set term emf fontscale ident_a"))
	// Output:
	// &plot.SetTerminalEmfSpecListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1630.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1630.go:1:14: IDENTIFIER "fontscale",
	// }
}

func ExampleSetTerminalEmfSpecListOpt() {
	fmt.Println(exampleAST(1631, "set term emf") == (*SetTerminalEmfSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalEmfSpecListOpt_case1() {
	fmt.Println(exampleAST(1632, "set term emf butt"))
	// Output:
	// &plot.SetTerminalEmfSpecListOpt{
	// · SetTerminalEmfSpecList: &plot.SetTerminalEmfSpecList{
	// · · SetTerminalEmfSpecListItem: &plot.SetTerminalEmfSpecListItem{
	// · · · Case: 5,
	// · · · Token: example1632.go:1:14: IDENTIFIER "butt",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalEpslatexSpecList() {
	fmt.Println(exampleAST(2192, "set term epslatex ident_a"))
	// Output:
	// &plot.SetTerminalEpslatexSpecList{
	// · SetTerminalEpslatexSpecListItem: &plot.SetTerminalEpslatexSpecListItem{
	// · · Case: 29,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2192.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalEpslatexSpecList_case1() {
	fmt.Println(exampleAST(2193, "set term epslatex ident_a ident_b"))
	// Output:
	// &plot.SetTerminalEpslatexSpecList{
	// · SetTerminalEpslatexSpecList: &plot.SetTerminalEpslatexSpecList{
	// · · Case: 1,
	// · · SetTerminalEpslatexSpecListItem: &plot.SetTerminalEpslatexSpecListItem{
	// · · · Case: 29,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2193.go:1:27: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalEpslatexSpecListItem: &plot.SetTerminalEpslatexSpecListItem{
	// · · Case: 29,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2193.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalEpslatexSpecListItem() {
	fmt.Println(exampleAST(2194, "set term epslatex default"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Token: example2194.go:1:19: IDENTIFIER "default",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case01() {
	fmt.Println(exampleAST(2195, "set term epslatex standalone"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 1,
	// · Token: example2195.go:1:19: IDENTIFIER "standalone",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case02() {
	fmt.Println(exampleAST(2196, "set term epslatex input"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 2,
	// · Token: example2196.go:1:19: IDENTIFIER "input",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case03() {
	fmt.Println(exampleAST(2197, "set term epslatex oldstyle"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 3,
	// · Token: example2197.go:1:19: IDENTIFIER "oldstyle",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case04() {
	fmt.Println(exampleAST(2198, "set term epslatex newstyle"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 4,
	// · Token: example2198.go:1:19: IDENTIFIER "newstyle",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case05() {
	fmt.Println(exampleAST(2199, "set term epslatex level1"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 5,
	// · Token: example2199.go:1:19: IDENTIFIER "level1",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case06() {
	fmt.Println(exampleAST(2200, "set term epslatex leveldefault"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 6,
	// · Token: example2200.go:1:19: IDENTIFIER "leveldefault",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case07() {
	fmt.Println(exampleAST(2201, "set term epslatex level3"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 7,
	// · Token: example2201.go:1:19: IDENTIFIER "level3",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case08() {
	fmt.Println(exampleAST(2202, "set term epslatex color"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 8,
	// · Token: example2202.go:1:19: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case09() {
	fmt.Println(exampleAST(2203, "set term epslatex colour"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 9,
	// · Token: example2203.go:1:19: IDENTIFIER "colour",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case10() {
	fmt.Println(exampleAST(2204, "set term epslatex monochrome"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 10,
	// · Token: example2204.go:1:19: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case11() {
	fmt.Println(exampleAST(2205, "set term epslatex background ident_a"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2205.go:1:30: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2205.go:1:19: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case12() {
	fmt.Println(exampleAST(2206, "set term epslatex nobackground"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 12,
	// · Token: example2206.go:1:19: IDENTIFIER "nobackground",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case13() {
	fmt.Println(exampleAST(2207, "set term epslatex dashlength ident_a"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 13,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2207.go:1:30: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2207.go:1:19: IDENTIFIER "dashlength",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case14() {
	fmt.Println(exampleAST(2208, "set term epslatex dl ident_a"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 14,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2208.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2208.go:1:19: IDENTIFIER "dl",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case15() {
	fmt.Println(exampleAST(2209, "set term epslatex linewidth ident_a"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2209.go:1:29: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2209.go:1:19: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case16() {
	fmt.Println(exampleAST(2210, "set term epslatex lw ident_a"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 16,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2210.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2210.go:1:19: IDENTIFIER "lw",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case17() {
	fmt.Println(exampleAST(2211, "set term epslatex rounded"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 17,
	// · Token: example2211.go:1:19: IDENTIFIER "rounded",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case18() {
	fmt.Println(exampleAST(2212, "set term epslatex butt"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 18,
	// · Token: example2212.go:1:19: IDENTIFIER "butt",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case19() {
	fmt.Println(exampleAST(2213, "set term epslatex clip"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 19,
	// · Token: example2213.go:1:19: IDENTIFIER "clip",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case20() {
	fmt.Println(exampleAST(2214, "set term epslatex noclip"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 20,
	// · Token: example2214.go:1:19: IDENTIFIER "noclip",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case21() {
	fmt.Println(exampleAST(2215, "set term epslatex palfuncparam ident_a"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 21,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2215.go:1:32: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2215.go:1:19: IDENTIFIER "palfuncparam",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case22() {
	fmt.Println(exampleAST(2216, "set term epslatex palfuncparam ident_a , ident_b"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 22,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2216.go:1:32: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2216.go:1:42: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2216.go:1:19: IDENTIFIER "palfuncparam",
	// · Token2: example2216.go:1:40: ',' ",",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case23() {
	fmt.Println(exampleAST(2217, "set term epslatex size ident_a"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 23,
	// · ExpressionUnitList: &plot.ExpressionUnitList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2217.go:1:24: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2217.go:1:19: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case24() {
	fmt.Println(exampleAST(2218, "set term epslatex header ident_a"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 24,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2218.go:1:26: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2218.go:1:19: IDENTIFIER "header",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case25() {
	fmt.Println(exampleAST(2219, "set term epslatex noheader"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 25,
	// · Token: example2219.go:1:19: IDENTIFIER "noheader",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case26() {
	fmt.Println(exampleAST(2220, "set term epslatex blacktext"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 26,
	// · Token: example2220.go:1:19: IDENTIFIER "blacktext",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case27() {
	fmt.Println(exampleAST(2221, "set term epslatex colortext"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 27,
	// · Token: example2221.go:1:19: IDENTIFIER "colortext",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case28() {
	fmt.Println(exampleAST(2222, "set term epslatex colourtext"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 28,
	// · Token: example2222.go:1:19: IDENTIFIER "colourtext",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case29() {
	fmt.Println(exampleAST(2223, "set term epslatex ident_a"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 29,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2223.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case30() {
	fmt.Println(exampleAST(2224, "set term epslatex font ident_a"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 30,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2224.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2224.go:1:19: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalEpslatexSpecListItem_case31() {
	fmt.Println(exampleAST(2225, "set term epslatex fontscale ident_a"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListItem{
	// · Case: 31,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2225.go:1:29: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2225.go:1:19: IDENTIFIER "fontscale",
	// }
}

func ExampleSetTerminalEpslatexSpecListOpt() {
	fmt.Println(exampleAST(2226, "set term epslatex") == (*SetTerminalEpslatexSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalEpslatexSpecListOpt_case1() {
	fmt.Println(exampleAST(2227, "set term epslatex ident_a"))
	// Output:
	// &plot.SetTerminalEpslatexSpecListOpt{
	// · SetTerminalEpslatexSpecList: &plot.SetTerminalEpslatexSpecList{
	// · · SetTerminalEpslatexSpecListItem: &plot.SetTerminalEpslatexSpecListItem{
	// · · · Case: 29,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2227.go:1:19: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalFigSpecList() {
	fmt.Println(exampleAST(1649, "set term fig big"))
	// Output:
	// &plot.SetTerminalFigSpecList{
	// · SetTerminalFigSpecListItem: &plot.SetTerminalFigSpecListItem{
	// · · Case: 3,
	// · · Token: example1649.go:1:14: IDENTIFIER "big",
	// · },
	// }
}

func ExampleSetTerminalFigSpecList_case1() {
	fmt.Println(exampleAST(1650, "set term fig big big"))
	// Output:
	// &plot.SetTerminalFigSpecList{
	// · SetTerminalFigSpecList: &plot.SetTerminalFigSpecList{
	// · · Case: 1,
	// · · SetTerminalFigSpecListItem: &plot.SetTerminalFigSpecListItem{
	// · · · Case: 3,
	// · · · Token: example1650.go:1:18: IDENTIFIER "big",
	// · · },
	// · },
	// · SetTerminalFigSpecListItem: &plot.SetTerminalFigSpecListItem{
	// · · Case: 3,
	// · · Token: example1650.go:1:14: IDENTIFIER "big",
	// · },
	// }
}

func ExampleSetTerminalFigSpecListItem() {
	fmt.Println(exampleAST(1651, "set term fig monochrome"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Token: example1651.go:1:14: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalFigSpecListItem_case01() {
	fmt.Println(exampleAST(1652, "set term fig color"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 1,
	// · Token: example1652.go:1:14: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalFigSpecListItem_case02() {
	fmt.Println(exampleAST(1653, "set term fig landscape"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 2,
	// · Token: example1653.go:1:14: IDENTIFIER "landscape",
	// }
}

func ExampleSetTerminalFigSpecListItem_case03() {
	fmt.Println(exampleAST(1654, "set term fig big"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 3,
	// · Token: example1654.go:1:14: IDENTIFIER "big",
	// }
}

func ExampleSetTerminalFigSpecListItem_case04() {
	fmt.Println(exampleAST(1655, "set term fig size ident_a ident_b"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1655.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1655.go:1:27: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1655.go:1:14: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalFigSpecListItem_case05() {
	fmt.Println(exampleAST(1656, "set term fig metric"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 5,
	// · Token: example1656.go:1:14: IDENTIFIER "metric",
	// }
}

func ExampleSetTerminalFigSpecListItem_case06() {
	fmt.Println(exampleAST(1657, "set term fig inches"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 6,
	// · Token: example1657.go:1:14: IDENTIFIER "inches",
	// }
}

func ExampleSetTerminalFigSpecListItem_case07() {
	fmt.Println(exampleAST(1658, "set term fig pointsmax ident_a"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1658.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1658.go:1:14: IDENTIFIER "pointsmax",
	// }
}

func ExampleSetTerminalFigSpecListItem_case08() {
	fmt.Println(exampleAST(1659, "set term fig solid"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 8,
	// · Token: example1659.go:1:14: IDENTIFIER "solid",
	// }
}

func ExampleSetTerminalFigSpecListItem_case09() {
	fmt.Println(exampleAST(1660, "set term fig dashed"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 9,
	// · Token: example1660.go:1:14: IDENTIFIER "dashed",
	// }
}

func ExampleSetTerminalFigSpecListItem_case10() {
	fmt.Println(exampleAST(1661, "set term fig font ident_a"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1661.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1661.go:1:14: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalFigSpecListItem_case11() {
	fmt.Println(exampleAST(1662, "set term fig textnormal"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 11,
	// · Token: example1662.go:1:14: IDENTIFIER "textnormal",
	// }
}

func ExampleSetTerminalFigSpecListItem_case12() {
	fmt.Println(exampleAST(1663, "set term fig textspecial"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 12,
	// · Token: example1663.go:1:14: IDENTIFIER "textspecial",
	// }
}

func ExampleSetTerminalFigSpecListItem_case13() {
	fmt.Println(exampleAST(1664, "set term fig texthidden"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 13,
	// · Token: example1664.go:1:14: IDENTIFIER "texthidden",
	// }
}

func ExampleSetTerminalFigSpecListItem_case14() {
	fmt.Println(exampleAST(1665, "set term fig textrigid"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 14,
	// · Token: example1665.go:1:14: IDENTIFIER "textrigid",
	// }
}

func ExampleSetTerminalFigSpecListItem_case15() {
	fmt.Println(exampleAST(1666, "set term fig thickness ident_a"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1666.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1666.go:1:14: IDENTIFIER "thickness",
	// }
}

func ExampleSetTerminalFigSpecListItem_case16() {
	fmt.Println(exampleAST(1667, "set term fig linewidth ident_a"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 16,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1667.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1667.go:1:14: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalFigSpecListItem_case17() {
	fmt.Println(exampleAST(1668, "set term fig depth ident_a"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 17,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1668.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1668.go:1:14: IDENTIFIER "depth",
	// }
}

func ExampleSetTerminalFigSpecListItem_case18() {
	fmt.Println(exampleAST(1669, "set term fig version ident_a"))
	// Output:
	// &plot.SetTerminalFigSpecListItem{
	// · Case: 18,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1669.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1669.go:1:14: IDENTIFIER "version",
	// }
}

func ExampleSetTerminalFigSpecListOpt() {
	fmt.Println(exampleAST(1670, "set term fig") == (*SetTerminalFigSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalFigSpecListOpt_case1() {
	fmt.Println(exampleAST(1671, "set term fig big"))
	// Output:
	// &plot.SetTerminalFigSpecListOpt{
	// · SetTerminalFigSpecList: &plot.SetTerminalFigSpecList{
	// · · SetTerminalFigSpecListItem: &plot.SetTerminalFigSpecListItem{
	// · · · Case: 3,
	// · · · Token: example1671.go:1:14: IDENTIFIER "big",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalGgiSpecList() {
	fmt.Println(exampleAST(1672, "set term ggi acceleration ident_a"))
	// Output:
	// &plot.SetTerminalGgiSpecList{
	// · SetTerminalGgiSpecListItem: &plot.SetTerminalGgiSpecListItem{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1672.go:1:27: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example1672.go:1:14: IDENTIFIER "acceleration",
	// · },
	// }
}

func ExampleSetTerminalGgiSpecList_case1() {
	fmt.Println(exampleAST(1673, "set term ggi acceleration ident_a acceleration ident_b"))
	// Output:
	// &plot.SetTerminalGgiSpecList{
	// · SetTerminalGgiSpecList: &plot.SetTerminalGgiSpecList{
	// · · Case: 1,
	// · · SetTerminalGgiSpecListItem: &plot.SetTerminalGgiSpecListItem{
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1673.go:1:48: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · · Token: example1673.go:1:35: IDENTIFIER "acceleration",
	// · · },
	// · },
	// · SetTerminalGgiSpecListItem: &plot.SetTerminalGgiSpecListItem{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1673.go:1:27: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example1673.go:1:14: IDENTIFIER "acceleration",
	// · },
	// }
}

func ExampleSetTerminalGgiSpecListItem() {
	fmt.Println(exampleAST(1674, "set term ggi acceleration ident_a"))
	// Output:
	// &plot.SetTerminalGgiSpecListItem{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1674.go:1:27: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1674.go:1:14: IDENTIFIER "acceleration",
	// }
}

func ExampleSetTerminalGgiSpecListItem_case1() {
	fmt.Println(exampleAST(1675, "set term ggi mode ident_a"))
	// Output:
	// &plot.SetTerminalGgiSpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1675.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1675.go:1:14: IDENTIFIER "mode",
	// }
}

func ExampleSetTerminalGgiSpecListOpt() {
	fmt.Println(exampleAST(1676, "set term ggi") == (*SetTerminalGgiSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalGgiSpecListOpt_case1() {
	fmt.Println(exampleAST(1677, "set term ggi acceleration ident_a"))
	// Output:
	// &plot.SetTerminalGgiSpecListOpt{
	// · SetTerminalGgiSpecList: &plot.SetTerminalGgiSpecList{
	// · · SetTerminalGgiSpecListItem: &plot.SetTerminalGgiSpecListItem{
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1677.go:1:27: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · · Token: example1677.go:1:14: IDENTIFIER "acceleration",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalGifSpecList() {
	fmt.Println(exampleAST(1678, "set term gif animate"))
	// Output:
	// &plot.SetTerminalGifSpecList{
	// · SetTerminalGifSpecListItem: &plot.SetTerminalGifSpecListItem{
	// · · Case: 18,
	// · · Token: example1678.go:1:14: IDENTIFIER "animate",
	// · },
	// }
}

func ExampleSetTerminalGifSpecList_case1() {
	fmt.Println(exampleAST(1679, "set term gif animate animate"))
	// Output:
	// &plot.SetTerminalGifSpecList{
	// · SetTerminalGifSpecList: &plot.SetTerminalGifSpecList{
	// · · Case: 1,
	// · · SetTerminalGifSpecListItem: &plot.SetTerminalGifSpecListItem{
	// · · · Case: 18,
	// · · · Token: example1679.go:1:22: IDENTIFIER "animate",
	// · · },
	// · },
	// · SetTerminalGifSpecListItem: &plot.SetTerminalGifSpecListItem{
	// · · Case: 18,
	// · · Token: example1679.go:1:14: IDENTIFIER "animate",
	// · },
	// }
}

func ExampleSetTerminalGifSpecListItem() {
	fmt.Println(exampleAST(1680, "set term gif enhanced"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Token: example1680.go:1:14: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalGifSpecListItem_case01() {
	fmt.Println(exampleAST(1681, "set term gif noenhanced"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 1,
	// · Token: example1681.go:1:14: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTerminalGifSpecListItem_case02() {
	fmt.Println(exampleAST(1682, "set term gif transparent"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 2,
	// · Token: example1682.go:1:14: IDENTIFIER "transparent",
	// }
}

func ExampleSetTerminalGifSpecListItem_case03() {
	fmt.Println(exampleAST(1683, "set term gif notransparent"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 3,
	// · Token: example1683.go:1:14: IDENTIFIER "notransparent",
	// }
}

func ExampleSetTerminalGifSpecListItem_case04() {
	fmt.Println(exampleAST(1684, "set term gif rounded"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 4,
	// · Token: example1684.go:1:14: IDENTIFIER "rounded",
	// }
}

func ExampleSetTerminalGifSpecListItem_case05() {
	fmt.Println(exampleAST(1685, "set term gif butt"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 5,
	// · Token: example1685.go:1:14: IDENTIFIER "butt",
	// }
}

func ExampleSetTerminalGifSpecListItem_case06() {
	fmt.Println(exampleAST(1686, "set term gif linewidth ident_a"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1686.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1686.go:1:14: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalGifSpecListItem_case07() {
	fmt.Println(exampleAST(1687, "set term gif dashlength ident_a"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1687.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1687.go:1:14: IDENTIFIER "dashlength",
	// }
}

func ExampleSetTerminalGifSpecListItem_case08() {
	fmt.Println(exampleAST(1688, "set term gif tiny"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 8,
	// · Token: example1688.go:1:14: IDENTIFIER "tiny",
	// }
}

func ExampleSetTerminalGifSpecListItem_case09() {
	fmt.Println(exampleAST(1689, "set term gif small"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 9,
	// · Token: example1689.go:1:14: IDENTIFIER "small",
	// }
}

func ExampleSetTerminalGifSpecListItem_case10() {
	fmt.Println(exampleAST(1690, "set term gif medium"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 10,
	// · Token: example1690.go:1:14: IDENTIFIER "medium",
	// }
}

func ExampleSetTerminalGifSpecListItem_case11() {
	fmt.Println(exampleAST(1691, "set term gif large"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 11,
	// · Token: example1691.go:1:14: IDENTIFIER "large",
	// }
}

func ExampleSetTerminalGifSpecListItem_case12() {
	fmt.Println(exampleAST(1692, "set term gif giant"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 12,
	// · Token: example1692.go:1:14: IDENTIFIER "giant",
	// }
}

func ExampleSetTerminalGifSpecListItem_case13() {
	fmt.Println(exampleAST(1693, "set term gif font ident_a"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 13,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1693.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1693.go:1:14: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalGifSpecListItem_case14() {
	fmt.Println(exampleAST(1694, "set term gif fontscale ident_a"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 14,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1694.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1694.go:1:14: IDENTIFIER "fontscale",
	// }
}

func ExampleSetTerminalGifSpecListItem_case15() {
	fmt.Println(exampleAST(1695, "set term gif size ident_a"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 15,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1695.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1695.go:1:14: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalGifSpecListItem_case16() {
	fmt.Println(exampleAST(1696, "set term gif crop"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 16,
	// · Token: example1696.go:1:14: IDENTIFIER "crop",
	// }
}

func ExampleSetTerminalGifSpecListItem_case17() {
	fmt.Println(exampleAST(1697, "set term gif nocrop"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 17,
	// · Token: example1697.go:1:14: IDENTIFIER "nocrop",
	// }
}

func ExampleSetTerminalGifSpecListItem_case18() {
	fmt.Println(exampleAST(1698, "set term gif animate"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 18,
	// · Token: example1698.go:1:14: IDENTIFIER "animate",
	// }
}

func ExampleSetTerminalGifSpecListItem_case19() {
	fmt.Println(exampleAST(1699, "set term gif loop ident_a"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 19,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1699.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1699.go:1:14: IDENTIFIER "loop",
	// }
}

func ExampleSetTerminalGifSpecListItem_case20() {
	fmt.Println(exampleAST(1700, "set term gif optimize"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 20,
	// · Token: example1700.go:1:14: IDENTIFIER "optimize",
	// }
}

func ExampleSetTerminalGifSpecListItem_case21() {
	fmt.Println(exampleAST(1701, "set term gif nooptimize"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 21,
	// · Token: example1701.go:1:14: IDENTIFIER "nooptimize",
	// }
}

func ExampleSetTerminalGifSpecListItem_case22() {
	fmt.Println(exampleAST(1702, "set term gif background ident_a"))
	// Output:
	// &plot.SetTerminalGifSpecListItem{
	// · Case: 22,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1702.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1702.go:1:14: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalGifSpecListOpt() {
	fmt.Println(exampleAST(1703, "set term gif") == (*SetTerminalGifSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalGifSpecListOpt_case1() {
	fmt.Println(exampleAST(1704, "set term gif animate"))
	// Output:
	// &plot.SetTerminalGifSpecListOpt{
	// · SetTerminalGifSpecList: &plot.SetTerminalGifSpecList{
	// · · SetTerminalGifSpecListItem: &plot.SetTerminalGifSpecListItem{
	// · · · Case: 18,
	// · · · Token: example1704.go:1:14: IDENTIFIER "animate",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalHpglSpecList() {
	fmt.Println(exampleAST(1705, "set term hpgl ident_a"))
	// Output:
	// &plot.SetTerminalHpglSpecList{
	// · SetTerminalHpglSpecListItem: &plot.SetTerminalHpglSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1705.go:1:15: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalHpglSpecList_case1() {
	fmt.Println(exampleAST(1706, "set term hpgl ident_a ident_b"))
	// Output:
	// &plot.SetTerminalHpglSpecList{
	// · SetTerminalHpglSpecList: &plot.SetTerminalHpglSpecList{
	// · · Case: 1,
	// · · SetTerminalHpglSpecListItem: &plot.SetTerminalHpglSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1706.go:1:23: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalHpglSpecListItem: &plot.SetTerminalHpglSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1706.go:1:15: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalHpglSpecListItem() {
	fmt.Println(exampleAST(1707, "set term hpgl ident_a"))
	// Output:
	// &plot.SetTerminalHpglSpecListItem{
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1707.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalHpglSpecListItem_case1() {
	fmt.Println(exampleAST(1708, "set term hpgl eject"))
	// Output:
	// &plot.SetTerminalHpglSpecListItem{
	// · Case: 1,
	// · Token: example1708.go:1:15: IDENTIFIER "eject",
	// }
}

func ExampleSetTerminalHpglSpecListOpt() {
	fmt.Println(exampleAST(1709, "set term hpgl") == (*SetTerminalHpglSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalHpglSpecListOpt_case1() {
	fmt.Println(exampleAST(1710, "set term hpgl ident_a"))
	// Output:
	// &plot.SetTerminalHpglSpecListOpt{
	// · SetTerminalHpglSpecList: &plot.SetTerminalHpglSpecList{
	// · · SetTerminalHpglSpecListItem: &plot.SetTerminalHpglSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1710.go:1:15: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalHppjSpecOpt() {
	fmt.Println(exampleAST(1712, "set terminal hppj FNT5X9"))
	// Output:
	// &plot.SetTerminalHppjSpecOpt{
	// · Token: example1712.go:1:19: IDENTIFIER "FNT5X9",
	// }
}

func ExampleSetTerminalHppjSpecOpt_case1() {
	fmt.Println(exampleAST(1713, "set terminal hppj FNT9X17"))
	// Output:
	// &plot.SetTerminalHppjSpecOpt{
	// · Case: 1,
	// · Token: example1713.go:1:19: IDENTIFIER "FNT9X17",
	// }
}

func ExampleSetTerminalHppjSpecOpt_case2() {
	fmt.Println(exampleAST(1714, "set terminal hppj FNT13X25"))
	// Output:
	// &plot.SetTerminalHppjSpecOpt{
	// · Case: 2,
	// · Token: example1714.go:1:19: IDENTIFIER "FNT13X25",
	// }
}

func ExampleSetTerminalImagenSpecList() {
	fmt.Println(exampleAST(1715, "set terminal imagen ident_a"))
	// Output:
	// &plot.SetTerminalImagenSpecList{
	// · SetTerminalImagenSpecListItem: &plot.SetTerminalImagenSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1715.go:1:21: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalImagenSpecList_case1() {
	fmt.Println(exampleAST(1716, "set terminal imagen ident_a ident_b"))
	// Output:
	// &plot.SetTerminalImagenSpecList{
	// · SetTerminalImagenSpecList: &plot.SetTerminalImagenSpecList{
	// · · Case: 1,
	// · · SetTerminalImagenSpecListItem: &plot.SetTerminalImagenSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1716.go:1:29: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalImagenSpecListItem: &plot.SetTerminalImagenSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1716.go:1:21: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalImagenSpecListItem() {
	fmt.Println(exampleAST(1717, "set terminal imagen ident_a"))
	// Output:
	// &plot.SetTerminalImagenSpecListItem{
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1717.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalImagenSpecListItem_case1() {
	fmt.Println(exampleAST(1718, "set terminal imagen portrait"))
	// Output:
	// &plot.SetTerminalImagenSpecListItem{
	// · Case: 1,
	// · Token: example1718.go:1:21: IDENTIFIER "portrait",
	// }
}

func ExampleSetTerminalImagenSpecListItem_case2() {
	fmt.Println(exampleAST(1719, "set terminal imagen landscape"))
	// Output:
	// &plot.SetTerminalImagenSpecListItem{
	// · Case: 2,
	// · Token: example1719.go:1:21: IDENTIFIER "landscape",
	// }
}

func ExampleSetTerminalImagenSpecListItem_case3() {
	fmt.Println(exampleAST(1720, "set terminal imagen [ ident_a ]"))
	// Output:
	// &plot.SetTerminalImagenSpecListItem{
	// · Case: 3,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1720.go:1:23: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1720.go:1:21: '[' "[",
	// · Token2: example1720.go:1:31: ']' "]",
	// }
}

func ExampleSetTerminalImagenSpecListOpt() {
	fmt.Println(exampleAST(1721, "set terminal imagen") == (*SetTerminalImagenSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalImagenSpecListOpt_case1() {
	fmt.Println(exampleAST(1722, "set terminal imagen ident_a"))
	// Output:
	// &plot.SetTerminalImagenSpecListOpt{
	// · SetTerminalImagenSpecList: &plot.SetTerminalImagenSpecList{
	// · · SetTerminalImagenSpecListItem: &plot.SetTerminalImagenSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1722.go:1:21: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalInner() {
	fmt.Println(exampleAST(1404, "set term aifm"))
	// Output:
	// &plot.SetTerminalInner{
	// · Token: example1404.go:1:10: IDENTIFIER "aifm",
	// }
}

func ExampleSetTerminalInner_case01() {
	fmt.Println(exampleAST(1405, "set term aqua"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 1,
	// · Token: example1405.go:1:10: IDENTIFIER "aqua",
	// }
}

func ExampleSetTerminalInner_case02() {
	fmt.Println(exampleAST(1406, "set term be"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 2,
	// · Token: example1406.go:1:10: IDENTIFIER "be",
	// }
}

func ExampleSetTerminalInner_case03() {
	fmt.Println(exampleAST(1407, "set term cairolatex"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 3,
	// · Token: example1407.go:1:10: IDENTIFIER "cairolatex",
	// }
}

func ExampleSetTerminalInner_case04() {
	fmt.Println(exampleAST(1408, "set term canvas"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 4,
	// · Token: example1408.go:1:10: IDENTIFIER "canvas",
	// }
}

func ExampleSetTerminalInner_case05() {
	fmt.Println(exampleAST(1409, "set term cgm"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 5,
	// · Token: example1409.go:1:10: IDENTIFIER "cgm",
	// }
}

func ExampleSetTerminalInner_case06() {
	fmt.Println(exampleAST(1410, "set term context"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 6,
	// · Token: example1410.go:1:10: IDENTIFIER "context",
	// }
}

func ExampleSetTerminalInner_case07() {
	fmt.Println(exampleAST(1411, "set term corel"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 7,
	// · Token: example1411.go:1:10: IDENTIFIER "corel",
	// }
}

func ExampleSetTerminalInner_case08() {
	fmt.Println(exampleAST(1412, "set term debug"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 8,
	// · Token: example1412.go:1:10: IDENTIFIER "debug",
	// }
}

func ExampleSetTerminalInner_case09() {
	fmt.Println(exampleAST(1413, "set term dpu414"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 9,
	// · Token: example1413.go:1:10: IDENTIFIER "dpu414",
	// }
}

func ExampleSetTerminalInner_case10() {
	fmt.Println(exampleAST(1414, "set term dumb"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 10,
	// · Token: example1414.go:1:10: IDENTIFIER "dumb",
	// }
}

func ExampleSetTerminalInner_case11() {
	fmt.Println(exampleAST(1415, "set term dxf"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 11,
	// · Token: example1415.go:1:10: IDENTIFIER "dxf",
	// }
}

func ExampleSetTerminalInner_case12() {
	fmt.Println(exampleAST(1416, "set term dxy800a"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 12,
	// · Token: example1416.go:1:10: IDENTIFIER "dxy800a",
	// }
}

func ExampleSetTerminalInner_case13() {
	fmt.Println(exampleAST(1417, "set term eepic"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 13,
	// · Token: example1417.go:1:10: IDENTIFIER "eepic",
	// }
}

func ExampleSetTerminalInner_case14() {
	fmt.Println(exampleAST(1418, "set term emf"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 14,
	// · Token: example1418.go:1:10: IDENTIFIER "emf",
	// }
}

func ExampleSetTerminalInner_case15() {
	fmt.Println(exampleAST(1419, "set term emtex"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 15,
	// · Token: example1419.go:1:10: IDENTIFIER "emtex",
	// }
}

func ExampleSetTerminalInner_case16() {
	fmt.Println(exampleAST(1420, "set term emxvesa ident_a"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 16,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1420.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1420.go:1:10: IDENTIFIER "emxvesa",
	// }
}

func ExampleSetTerminalInner_case17() {
	fmt.Println(exampleAST(1421, "set term emxvga"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 17,
	// · Token: example1421.go:1:10: IDENTIFIER "emxvga",
	// }
}

func ExampleSetTerminalInner_case18() {
	fmt.Println(exampleAST(1422, "set term epslatex"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 18,
	// · Token: example1422.go:1:10: IDENTIFIER "epslatex",
	// }
}

func ExampleSetTerminalInner_case19() {
	fmt.Println(exampleAST(1423, "set term epson_180dpi"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 19,
	// · Token: example1423.go:1:10: IDENTIFIER "epson_180dpi",
	// }
}

func ExampleSetTerminalInner_case20() {
	fmt.Println(exampleAST(1424, "set term epson_60dpi"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 20,
	// · Token: example1424.go:1:10: IDENTIFIER "epson_60dpi",
	// }
}

func ExampleSetTerminalInner_case21() {
	fmt.Println(exampleAST(1425, "set term excl"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 21,
	// · Token: example1425.go:1:10: IDENTIFIER "excl",
	// }
}

func ExampleSetTerminalInner_case22() {
	fmt.Println(exampleAST(1426, "set term fig"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 22,
	// · Token: example1426.go:1:10: IDENTIFIER "fig",
	// }
}

func ExampleSetTerminalInner_case23() {
	fmt.Println(exampleAST(1427, "set term ggi"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 23,
	// · Token: example1427.go:1:10: IDENTIFIER "ggi",
	// }
}

func ExampleSetTerminalInner_case24() {
	fmt.Println(exampleAST(1428, "set term gif"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 24,
	// · Token: example1428.go:1:10: IDENTIFIER "gif",
	// }
}

func ExampleSetTerminalInner_case25() {
	fmt.Println(exampleAST(1429, "set term gpic"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 25,
	// · Token: example1429.go:1:10: IDENTIFIER "gpic",
	// }
}

func ExampleSetTerminalInner_case26() {
	fmt.Println(exampleAST(1430, "set term gpic ident_a"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 26,
	// · SimpleExpressionList: &plot.SimpleExpressionList{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1430.go:1:15: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1430.go:1:10: IDENTIFIER "gpic",
	// }
}

func ExampleSetTerminalInner_case27() {
	fmt.Println(exampleAST(1431, "set term grass"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 27,
	// · Token: example1431.go:1:10: IDENTIFIER "grass",
	// }
}

func ExampleSetTerminalInner_case28() {
	fmt.Println(exampleAST(1432, "set term hp2623a"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 28,
	// · Token: example1432.go:1:10: IDENTIFIER "hp2623a",
	// }
}

func ExampleSetTerminalInner_case29() {
	fmt.Println(exampleAST(1433, "set terminal hp2648"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 29,
	// · Token: example1433.go:1:14: IDENTIFIER "hp2648",
	// }
}

func ExampleSetTerminalInner_case30() {
	fmt.Println(exampleAST(1434, "set term hp500c"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 30,
	// · Token: example1434.go:1:10: IDENTIFIER "hp500c",
	// }
}

func ExampleSetTerminalInner_case31() {
	fmt.Println(exampleAST(1435, "set term hpdj"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 31,
	// · Token: example1435.go:1:10: IDENTIFIER "hpdj",
	// }
}

func ExampleSetTerminalInner_case32() {
	fmt.Println(exampleAST(1436, "set term hpgl"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 32,
	// · Token: example1436.go:1:10: IDENTIFIER "hpgl",
	// }
}

func ExampleSetTerminalInner_case33() {
	fmt.Println(exampleAST(1437, "set terminal hpljii"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 33,
	// · Token: example1437.go:1:14: IDENTIFIER "hpljii",
	// }
}

func ExampleSetTerminalInner_case34() {
	fmt.Println(exampleAST(1438, "set terminal hppj FNT13X25"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 34,
	// · SetTerminalHppjSpecOpt: &plot.SetTerminalHppjSpecOpt{
	// · · Case: 2,
	// · · Token: example1438.go:1:19: IDENTIFIER "FNT13X25",
	// · },
	// · Token: example1438.go:1:14: IDENTIFIER "hppj",
	// }
}

func ExampleSetTerminalInner_case35() {
	fmt.Println(exampleAST(1439, "set terminal imagen"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 35,
	// · Token: example1439.go:1:14: IDENTIFIER "imagen",
	// }
}

func ExampleSetTerminalInner_case36() {
	fmt.Println(exampleAST(1440, "set term jpeg"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 36,
	// · Token: example1440.go:1:10: IDENTIFIER "jpeg",
	// }
}

func ExampleSetTerminalInner_case37() {
	fmt.Println(exampleAST(1441, "set terminal kyo"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 37,
	// · Token: example1441.go:1:14: IDENTIFIER "kyo",
	// }
}

func ExampleSetTerminalInner_case38() {
	fmt.Println(exampleAST(1442, "set term latex"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 38,
	// · Token: example1442.go:1:10: IDENTIFIER "latex",
	// }
}

func ExampleSetTerminalInner_case39() {
	fmt.Println(exampleAST(1443, "set term linux"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 39,
	// · Token: example1443.go:1:10: IDENTIFIER "linux",
	// }
}

func ExampleSetTerminalInner_case40() {
	fmt.Println(exampleAST(1444, "set term lua tiks"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 40,
	// · Token: example1444.go:1:10: IDENTIFIER "lua",
	// · Token2: example1444.go:1:14: IDENTIFIER "tiks",
	// }
}

func ExampleSetTerminalInner_case41() {
	fmt.Println(exampleAST(1445, "set terminal mf"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 41,
	// · Token: example1445.go:1:14: IDENTIFIER "mf",
	// }
}

func ExampleSetTerminalInner_case42() {
	fmt.Println(exampleAST(1446, "set term mif"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 42,
	// · Token: example1446.go:1:10: IDENTIFIER "mif",
	// }
}

func ExampleSetTerminalInner_case43() {
	fmt.Println(exampleAST(1447, "set term mp"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 43,
	// · Token: example1447.go:1:10: IDENTIFIER "mp",
	// }
}

func ExampleSetTerminalInner_case44() {
	fmt.Println(exampleAST(1448, "set term nec_cp6"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 44,
	// · Token: example1448.go:1:10: IDENTIFIER "nec_cp6",
	// }
}

func ExampleSetTerminalInner_case45() {
	fmt.Println(exampleAST(1449, "set terminal next"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 45,
	// · Token: example1449.go:1:14: IDENTIFIER "next",
	// }
}

func ExampleSetTerminalInner_case46() {
	fmt.Println(exampleAST(1450, "set term okidata"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 46,
	// · Token: example1450.go:1:10: IDENTIFIER "okidata",
	// }
}

func ExampleSetTerminalInner_case47() {
	fmt.Println(exampleAST(1451, "set term openstep"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 47,
	// · Token: example1451.go:1:10: IDENTIFIER "openstep",
	// }
}

func ExampleSetTerminalInner_case48() {
	fmt.Println(exampleAST(1452, "set term pbm"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 48,
	// · Token: example1452.go:1:10: IDENTIFIER "pbm",
	// }
}

func ExampleSetTerminalInner_case49() {
	fmt.Println(exampleAST(1453, "set term pdf"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 49,
	// · Token: example1453.go:1:10: IDENTIFIER "pdf",
	// }
}

func ExampleSetTerminalInner_case50() {
	fmt.Println(exampleAST(1454, "set term pdfcairo"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 50,
	// · Token: example1454.go:1:10: IDENTIFIER "pdfcairo",
	// }
}

func ExampleSetTerminalInner_case51() {
	fmt.Println(exampleAST(1455, "set term pm"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 51,
	// · Token: example1455.go:1:10: IDENTIFIER "pm",
	// }
}

func ExampleSetTerminalInner_case52() {
	fmt.Println(exampleAST(1456, "set term png"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 52,
	// · Token: example1456.go:1:10: IDENTIFIER "png",
	// }
}

func ExampleSetTerminalInner_case53() {
	fmt.Println(exampleAST(1457, "set term pngcairo"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 53,
	// · Token: example1457.go:1:10: IDENTIFIER "pngcairo",
	// }
}

func ExampleSetTerminalInner_case54() {
	fmt.Println(exampleAST(1458, "set term postscript"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 54,
	// · Token: example1458.go:1:10: IDENTIFIER "postscript",
	// }
}

func ExampleSetTerminalInner_case55() {
	fmt.Println(exampleAST(1459, "set terminal prescribe"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 55,
	// · Token: example1459.go:1:14: IDENTIFIER "prescribe",
	// }
}

func ExampleSetTerminalInner_case56() {
	fmt.Println(exampleAST(1460, "set term pslatex"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 56,
	// · Token: example1460.go:1:10: IDENTIFIER "pslatex",
	// }
}

func ExampleSetTerminalInner_case57() {
	fmt.Println(exampleAST(1461, "set term pstex"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 57,
	// · Token: example1461.go:1:10: IDENTIFIER "pstex",
	// }
}

func ExampleSetTerminalInner_case58() {
	fmt.Println(exampleAST(1462, "set term pstricks"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 58,
	// · Token: example1462.go:1:10: IDENTIFIER "pstricks",
	// }
}

func ExampleSetTerminalInner_case59() {
	fmt.Println(exampleAST(1463, "set term qms"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 59,
	// · Token: example1463.go:1:10: IDENTIFIER "qms",
	// }
}

func ExampleSetTerminalInner_case60() {
	fmt.Println(exampleAST(1464, "set term qt"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 60,
	// · Token: example1464.go:1:10: IDENTIFIER "qt",
	// }
}

func ExampleSetTerminalInner_case61() {
	fmt.Println(exampleAST(1465, "set terminal regis"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 61,
	// · Token: example1465.go:1:14: IDENTIFIER "regis",
	// }
}

func ExampleSetTerminalInner_case62() {
	fmt.Println(exampleAST(1466, "set term sun"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 62,
	// · Token: example1466.go:1:10: IDENTIFIER "sun",
	// }
}

func ExampleSetTerminalInner_case63() {
	fmt.Println(exampleAST(1467, "set term svg"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 63,
	// · Token: example1467.go:1:10: IDENTIFIER "svg",
	// }
}

func ExampleSetTerminalInner_case64() {
	fmt.Println(exampleAST(1468, "set term svga"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 64,
	// · Token: example1468.go:1:10: IDENTIFIER "svga",
	// }
}

func ExampleSetTerminalInner_case65() {
	fmt.Println(exampleAST(1469, "set term svga ident_a"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 65,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1469.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1469.go:1:10: IDENTIFIER "svga",
	// }
}

func ExampleSetTerminalInner_case66() {
	fmt.Println(exampleAST(1470, "set term tek40"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 66,
	// · Token: example1470.go:1:10: IDENTIFIER "tek40",
	// }
}

func ExampleSetTerminalInner_case67() {
	fmt.Println(exampleAST(1471, "set term tek410x"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 67,
	// · Token: example1471.go:1:10: IDENTIFIER "tek410x",
	// }
}

func ExampleSetTerminalInner_case68() {
	fmt.Println(exampleAST(1472, "set term texdraw"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 68,
	// · Token: example1472.go:1:10: IDENTIFIER "texdraw",
	// }
}

func ExampleSetTerminalInner_case69() {
	fmt.Println(exampleAST(1473, "set term tgif"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 69,
	// · Token: example1473.go:1:10: IDENTIFIER "tgif",
	// }
}

func ExampleSetTerminalInner_case70() {
	fmt.Println(exampleAST(1474, "set term tikz"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 70,
	// · Token: example1474.go:1:10: IDENTIFIER "tikz",
	// }
}

func ExampleSetTerminalInner_case71() {
	fmt.Println(exampleAST(1475, "set term tkcanvas"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 71,
	// · Token: example1475.go:1:10: IDENTIFIER "tkcanvas",
	// }
}

func ExampleSetTerminalInner_case72() {
	fmt.Println(exampleAST(1476, "set term tpic ident_a ident_b ident_c"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 72,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1476.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1476.go:1:23: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1476.go:1:31: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1476.go:1:10: IDENTIFIER "tpic",
	// }
}

func ExampleSetTerminalInner_case73() {
	fmt.Println(exampleAST(1477, "set term vgagl"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 73,
	// · Token: example1477.go:1:10: IDENTIFIER "vgagl",
	// }
}

func ExampleSetTerminalInner_case74() {
	fmt.Println(exampleAST(1478, "set term vgal"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 74,
	// · Token: example1478.go:1:10: IDENTIFIER "vgal",
	// }
}

func ExampleSetTerminalInner_case75() {
	fmt.Println(exampleAST(1479, "set term vws"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 75,
	// · Token: example1479.go:1:10: IDENTIFIER "vws",
	// }
}

func ExampleSetTerminalInner_case76() {
	fmt.Println(exampleAST(1480, "set term windows"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 76,
	// · Token: example1480.go:1:10: IDENTIFIER "windows",
	// }
}

func ExampleSetTerminalInner_case77() {
	fmt.Println(exampleAST(1481, "set term wxt"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 77,
	// · Token: example1481.go:1:10: IDENTIFIER "wxt",
	// }
}

func ExampleSetTerminalInner_case78() {
	fmt.Println(exampleAST(1482, "set term x11"))
	// Output:
	// &plot.SetTerminalInner{
	// · Case: 78,
	// · Token: example1482.go:1:10: IDENTIFIER "x11",
	// }
}

func ExampleSetTerminalJpegSpecList() {
	fmt.Println(exampleAST(1723, "set term jpeg butt"))
	// Output:
	// &plot.SetTerminalJpegSpecList{
	// · SetTerminalJpegSpecListItem: &plot.SetTerminalJpegSpecListItem{
	// · · Case: 5,
	// · · Token: example1723.go:1:15: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalJpegSpecList_case1() {
	fmt.Println(exampleAST(1724, "set term jpeg butt butt"))
	// Output:
	// &plot.SetTerminalJpegSpecList{
	// · SetTerminalJpegSpecList: &plot.SetTerminalJpegSpecList{
	// · · Case: 1,
	// · · SetTerminalJpegSpecListItem: &plot.SetTerminalJpegSpecListItem{
	// · · · Case: 5,
	// · · · Token: example1724.go:1:20: IDENTIFIER "butt",
	// · · },
	// · },
	// · SetTerminalJpegSpecListItem: &plot.SetTerminalJpegSpecListItem{
	// · · Case: 5,
	// · · Token: example1724.go:1:15: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalJpegSpecListItem() {
	fmt.Println(exampleAST(1725, "set term jpeg enhanced"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Token: example1725.go:1:15: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case01() {
	fmt.Println(exampleAST(1726, "set term jpeg noenhanced"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 1,
	// · Token: example1726.go:1:15: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case02() {
	fmt.Println(exampleAST(1727, "set term jpeg linewidth ident_a"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1727.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1727.go:1:15: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case03() {
	fmt.Println(exampleAST(1728, "set term jpeg dashlength ident_a"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1728.go:1:26: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1728.go:1:15: IDENTIFIER "dashlength",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case04() {
	fmt.Println(exampleAST(1729, "set term jpeg rounded"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 4,
	// · Token: example1729.go:1:15: IDENTIFIER "rounded",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case05() {
	fmt.Println(exampleAST(1730, "set term jpeg butt"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 5,
	// · Token: example1730.go:1:15: IDENTIFIER "butt",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case06() {
	fmt.Println(exampleAST(1731, "set term jpeg tiny"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 6,
	// · Token: example1731.go:1:15: IDENTIFIER "tiny",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case07() {
	fmt.Println(exampleAST(1732, "set term jpeg small"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 7,
	// · Token: example1732.go:1:15: IDENTIFIER "small",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case08() {
	fmt.Println(exampleAST(1733, "set term jpeg medium"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 8,
	// · Token: example1733.go:1:15: IDENTIFIER "medium",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case09() {
	fmt.Println(exampleAST(1734, "set term jpeg large"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 9,
	// · Token: example1734.go:1:15: IDENTIFIER "large",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case10() {
	fmt.Println(exampleAST(1735, "set term jpeg giant"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 10,
	// · Token: example1735.go:1:15: IDENTIFIER "giant",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case11() {
	fmt.Println(exampleAST(1736, "set term jpeg font ident_a"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1736.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1736.go:1:15: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case12() {
	fmt.Println(exampleAST(1737, "set term jpeg fontscale ident_a"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 12,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1737.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1737.go:1:15: IDENTIFIER "fontscale",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case13() {
	fmt.Println(exampleAST(1738, "set term jpeg size ident_a"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 13,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1738.go:1:20: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1738.go:1:15: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case14() {
	fmt.Println(exampleAST(1739, "set term jpeg crop"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 14,
	// · Token: example1739.go:1:15: IDENTIFIER "crop",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case15() {
	fmt.Println(exampleAST(1740, "set term jpeg nocrop"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 15,
	// · Token: example1740.go:1:15: IDENTIFIER "nocrop",
	// }
}

func ExampleSetTerminalJpegSpecListItem_case16() {
	fmt.Println(exampleAST(1741, "set term jpeg background ident_a"))
	// Output:
	// &plot.SetTerminalJpegSpecListItem{
	// · Case: 16,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1741.go:1:26: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1741.go:1:15: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalJpegSpecListOpt() {
	fmt.Println(exampleAST(1742, "set term jpeg") == (*SetTerminalJpegSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalJpegSpecListOpt_case1() {
	fmt.Println(exampleAST(1743, "set term jpeg butt"))
	// Output:
	// &plot.SetTerminalJpegSpecListOpt{
	// · SetTerminalJpegSpecList: &plot.SetTerminalJpegSpecList{
	// · · SetTerminalJpegSpecListItem: &plot.SetTerminalJpegSpecListItem{
	// · · · Case: 5,
	// · · · Token: example1743.go:1:15: IDENTIFIER "butt",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalLatexSpecList() {
	fmt.Println(exampleAST(1744, "set term latex courier"))
	// Output:
	// &plot.SetTerminalLatexSpecList{
	// · SetTerminalLatexSpecListItem: &plot.SetTerminalLatexSpecListItem{
	// · · Case: 1,
	// · · Token: example1744.go:1:16: IDENTIFIER "courier",
	// · },
	// }
}

func ExampleSetTerminalLatexSpecList_case1() {
	fmt.Println(exampleAST(1745, "set term latex courier courier"))
	// Output:
	// &plot.SetTerminalLatexSpecList{
	// · SetTerminalLatexSpecList: &plot.SetTerminalLatexSpecList{
	// · · Case: 1,
	// · · SetTerminalLatexSpecListItem: &plot.SetTerminalLatexSpecListItem{
	// · · · Case: 1,
	// · · · Token: example1745.go:1:24: IDENTIFIER "courier",
	// · · },
	// · },
	// · SetTerminalLatexSpecListItem: &plot.SetTerminalLatexSpecListItem{
	// · · Case: 1,
	// · · Token: example1745.go:1:16: IDENTIFIER "courier",
	// · },
	// }
}

func ExampleSetTerminalLatexSpecListItem() {
	fmt.Println(exampleAST(1746, "set term latex default"))
	// Output:
	// &plot.SetTerminalLatexSpecListItem{
	// · Token: example1746.go:1:16: IDENTIFIER "default",
	// }
}

func ExampleSetTerminalLatexSpecListItem_case1() {
	fmt.Println(exampleAST(1747, "set term latex courier"))
	// Output:
	// &plot.SetTerminalLatexSpecListItem{
	// · Case: 1,
	// · Token: example1747.go:1:16: IDENTIFIER "courier",
	// }
}

func ExampleSetTerminalLatexSpecListItem_case2() {
	fmt.Println(exampleAST(1748, "set term emtex roman"))
	// Output:
	// &plot.SetTerminalLatexSpecListItem{
	// · Case: 2,
	// · Token: example1748.go:1:16: IDENTIFIER "roman",
	// }
}

func ExampleSetTerminalLatexSpecListItem_case3() {
	fmt.Println(exampleAST(1749, "set term latex size ident_a"))
	// Output:
	// &plot.SetTerminalLatexSpecListItem{
	// · Case: 3,
	// · ExpressionUnitList: &plot.ExpressionUnitList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1749.go:1:21: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1749.go:1:16: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalLatexSpecListItem_case4() {
	fmt.Println(exampleAST(1750, "set term emtex rotate"))
	// Output:
	// &plot.SetTerminalLatexSpecListItem{
	// · Case: 4,
	// · Token: example1750.go:1:16: IDENTIFIER "rotate",
	// }
}

func ExampleSetTerminalLatexSpecListItem_case5() {
	fmt.Println(exampleAST(1751, "set term emtex norotate"))
	// Output:
	// &plot.SetTerminalLatexSpecListItem{
	// · Case: 5,
	// · Token: example1751.go:1:16: IDENTIFIER "norotate",
	// }
}

func ExampleSetTerminalLatexSpecListOpt() {
	fmt.Println(exampleAST(1752, "set term emtex") == (*SetTerminalLatexSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalLatexSpecListOpt_case1() {
	fmt.Println(exampleAST(1753, "set term latex courier"))
	// Output:
	// &plot.SetTerminalLatexSpecListOpt{
	// · SetTerminalLatexSpecList: &plot.SetTerminalLatexSpecList{
	// · · SetTerminalLatexSpecListItem: &plot.SetTerminalLatexSpecListItem{
	// · · · Case: 1,
	// · · · Token: example1753.go:1:16: IDENTIFIER "courier",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalLuatikzSpecList() {
	fmt.Println(exampleAST(1754, "set term lua tiks bitmap"))
	// Output:
	// &plot.SetTerminalLuatikzSpecList{
	// · SetTerminalLuatikzSpecListItem: &plot.SetTerminalLuatikzSpecListItem{
	// · · Case: 42,
	// · · Token: example1754.go:1:19: IDENTIFIER "bitmap",
	// · },
	// }
}

func ExampleSetTerminalLuatikzSpecList_case1() {
	fmt.Println(exampleAST(1755, "set term lua tiks bitmap bitmap"))
	// Output:
	// &plot.SetTerminalLuatikzSpecList{
	// · SetTerminalLuatikzSpecList: &plot.SetTerminalLuatikzSpecList{
	// · · Case: 1,
	// · · SetTerminalLuatikzSpecListItem: &plot.SetTerminalLuatikzSpecListItem{
	// · · · Case: 42,
	// · · · Token: example1755.go:1:26: IDENTIFIER "bitmap",
	// · · },
	// · },
	// · SetTerminalLuatikzSpecListItem: &plot.SetTerminalLuatikzSpecListItem{
	// · · Case: 42,
	// · · Token: example1755.go:1:19: IDENTIFIER "bitmap",
	// · },
	// }
}

func ExampleSetTerminalLuatikzSpecListItem() {
	fmt.Println(exampleAST(1756, "set term lua tiks latex"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Token: example1756.go:1:19: IDENTIFIER "latex",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case01() {
	fmt.Println(exampleAST(1757, "set term lua tiks tex"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 1,
	// · Token: example1757.go:1:19: IDENTIFIER "tex",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case02() {
	fmt.Println(exampleAST(1758, "set term lua tiks context"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 2,
	// · Token: example1758.go:1:19: IDENTIFIER "context",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case03() {
	fmt.Println(exampleAST(1759, "set term lua tiks color"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 3,
	// · Token: example1759.go:1:19: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case04() {
	fmt.Println(exampleAST(1760, "set term lua tiks monochrome"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 4,
	// · Token: example1760.go:1:19: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case05() {
	fmt.Println(exampleAST(1761, "set term lua tiks originreset"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 5,
	// · Token: example1761.go:1:19: IDENTIFIER "originreset",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case06() {
	fmt.Println(exampleAST(1762, "set term lua tiks nooriginreset"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 6,
	// · Token: example1762.go:1:19: IDENTIFIER "nooriginreset",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case07() {
	fmt.Println(exampleAST(1763, "set term lua tiks gparrows"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 7,
	// · Token: example1763.go:1:19: IDENTIFIER "gparrows",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case08() {
	fmt.Println(exampleAST(1764, "set term lua tiks nogparrows"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 8,
	// · Token: example1764.go:1:19: IDENTIFIER "nogparrows",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case09() {
	fmt.Println(exampleAST(1765, "set term lua tiks gppoints"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 9,
	// · Token: example1765.go:1:19: IDENTIFIER "gppoints",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case10() {
	fmt.Println(exampleAST(1766, "set term lua tiks nogppoints"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 10,
	// · Token: example1766.go:1:19: IDENTIFIER "nogppoints",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case11() {
	fmt.Println(exampleAST(1767, "set term lua tiks picenvironment"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 11,
	// · Token: example1767.go:1:19: IDENTIFIER "picenvironment",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case12() {
	fmt.Println(exampleAST(1768, "set term lua tiks nopicenvironment"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 12,
	// · Token: example1768.go:1:19: IDENTIFIER "nopicenvironment",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case13() {
	fmt.Println(exampleAST(1769, "set term lua tiks clip"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 13,
	// · Token: example1769.go:1:19: IDENTIFIER "clip",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case14() {
	fmt.Println(exampleAST(1770, "set term lua tiks noclip"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 14,
	// · Token: example1770.go:1:19: IDENTIFIER "noclip",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case15() {
	fmt.Println(exampleAST(1771, "set term lua tiks tightboundingbox"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 15,
	// · Token: example1771.go:1:19: IDENTIFIER "tightboundingbox",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case16() {
	fmt.Println(exampleAST(1772, "set term lua tiks notightboundingbox"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 16,
	// · Token: example1772.go:1:19: IDENTIFIER "notightboundingbox",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case17() {
	fmt.Println(exampleAST(1773, "set term lua tiks background ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 17,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1773.go:1:30: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1773.go:1:19: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case18() {
	fmt.Println(exampleAST(1774, "set term lua tiks size ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 18,
	// · ExpressionUnitList: &plot.ExpressionUnitList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1774.go:1:24: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1774.go:1:19: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case19() {
	fmt.Println(exampleAST(1775, "set term lua tiks scale ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 19,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1775.go:1:25: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1775.go:1:19: IDENTIFIER "scale",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case20() {
	fmt.Println(exampleAST(1776, "set term lua tiks plotsize ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 20,
	// · ExpressionUnitList: &plot.ExpressionUnitList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1776.go:1:28: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1776.go:1:19: IDENTIFIER "plotsize",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case21() {
	fmt.Println(exampleAST(1777, "set term lua tiks charsize ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 21,
	// · ExpressionUnitList: &plot.ExpressionUnitList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1777.go:1:28: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1777.go:1:19: IDENTIFIER "charsize",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case22() {
	fmt.Println(exampleAST(1778, "set term lua tiks font ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 22,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1778.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1778.go:1:19: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case23() {
	fmt.Println(exampleAST(1779, "set term lua tiks fontscale ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 23,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1779.go:1:29: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1779.go:1:19: IDENTIFIER "fontscale",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case24() {
	fmt.Println(exampleAST(1780, "set term lua tiks textscale ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 24,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1780.go:1:29: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1780.go:1:19: IDENTIFIER "textscale",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case25() {
	fmt.Println(exampleAST(1781, "set term lua tiks dashlength ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 25,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1781.go:1:30: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1781.go:1:19: IDENTIFIER "dashlength",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case26() {
	fmt.Println(exampleAST(1782, "set term lua tiks dl ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 26,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1782.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1782.go:1:19: IDENTIFIER "dl",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case27() {
	fmt.Println(exampleAST(1783, "set term lua tiks linewidth ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 27,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1783.go:1:29: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1783.go:1:19: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case28() {
	fmt.Println(exampleAST(1784, "set term lua tiks lw ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 28,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1784.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1784.go:1:19: IDENTIFIER "lw",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case29() {
	fmt.Println(exampleAST(1785, "set term lua tiks nofulldoc"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 29,
	// · Token: example1785.go:1:19: IDENTIFIER "nofulldoc",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case30() {
	fmt.Println(exampleAST(1786, "set term lua tiks fulldoc"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 30,
	// · Token: example1786.go:1:19: IDENTIFIER "fulldoc",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case31() {
	fmt.Println(exampleAST(1787, "set term lua tiks standalone"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 31,
	// · Token: example1787.go:1:19: IDENTIFIER "standalone",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case32() {
	fmt.Println(exampleAST(1788, "set term lua tiks nostandalone"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 32,
	// · Token: example1788.go:1:19: IDENTIFIER "nostandalone",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case33() {
	fmt.Println(exampleAST(1789, "set term lua tiks preamble ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 33,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1789.go:1:28: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1789.go:1:19: IDENTIFIER "preamble",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case34() {
	fmt.Println(exampleAST(1790, "set term lua tiks header ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 34,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1790.go:1:26: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1790.go:1:19: IDENTIFIER "header",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case35() {
	fmt.Println(exampleAST(1791, "set term lua tiks tikzplot ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 35,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1791.go:1:28: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1791.go:1:19: IDENTIFIER "tikzplot",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case36() {
	fmt.Println(exampleAST(1792, "set term lua tiks notikzarrows"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 36,
	// · Token: example1792.go:1:19: IDENTIFIER "notikzarrows",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case37() {
	fmt.Println(exampleAST(1793, "set term lua tiks tikzarrows"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 37,
	// · Token: example1793.go:1:19: IDENTIFIER "tikzarrows",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case38() {
	fmt.Println(exampleAST(1794, "set term lua tiks rgbimages"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 38,
	// · Token: example1794.go:1:19: IDENTIFIER "rgbimages",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case39() {
	fmt.Println(exampleAST(1795, "set term lua tiks cmykimages"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 39,
	// · Token: example1795.go:1:19: IDENTIFIER "cmykimages",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case40() {
	fmt.Println(exampleAST(1796, "set term lua tiks externalimages"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 40,
	// · Token: example1796.go:1:19: IDENTIFIER "externalimages",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case41() {
	fmt.Println(exampleAST(1797, "set term lua tiks noexternalimages"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 41,
	// · Token: example1797.go:1:19: IDENTIFIER "noexternalimages",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case42() {
	fmt.Println(exampleAST(1798, "set term lua tiks bitmap"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 42,
	// · Token: example1798.go:1:19: IDENTIFIER "bitmap",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case43() {
	fmt.Println(exampleAST(1799, "set term lua tiks nobitmap"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 43,
	// · Token: example1799.go:1:19: IDENTIFIER "nobitmap",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case44() {
	fmt.Println(exampleAST(1800, "set term lua tiks providevars ident_a"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 44,
	// · IdentifierList: &plot.IdentifierList{
	// · · Token: example1800.go:1:31: IDENTIFIER "ident_a",
	// · },
	// · Token: example1800.go:1:19: IDENTIFIER "providevars",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case45() {
	fmt.Println(exampleAST(1801, "set term lua tiks createstyle"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 45,
	// · Token: example1801.go:1:19: IDENTIFIER "createstyle",
	// }
}

func ExampleSetTerminalLuatikzSpecListItem_case46() {
	fmt.Println(exampleAST(1802, "set term lua tiks help"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListItem{
	// · Case: 46,
	// · Token: example1802.go:1:19: IDENTIFIER "help",
	// }
}

func ExampleSetTerminalLuatikzSpecListOpt() {
	fmt.Println(exampleAST(1803, "set term lua tiks") == (*SetTerminalLuatikzSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalLuatikzSpecListOpt_case1() {
	fmt.Println(exampleAST(1804, "set term lua tiks bitmap"))
	// Output:
	// &plot.SetTerminalLuatikzSpecListOpt{
	// · SetTerminalLuatikzSpecList: &plot.SetTerminalLuatikzSpecList{
	// · · SetTerminalLuatikzSpecListItem: &plot.SetTerminalLuatikzSpecListItem{
	// · · · Case: 42,
	// · · · Token: example1804.go:1:19: IDENTIFIER "bitmap",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalMifSpecList() {
	fmt.Println(exampleAST(1805, "set term mif ?"))
	// Output:
	// &plot.SetTerminalMifSpecList{
	// · SetTerminalMifSpecListItem: &plot.SetTerminalMifSpecListItem{
	// · · Case: 6,
	// · · Token: example1805.go:1:14: '?' "?",
	// · },
	// }
}

func ExampleSetTerminalMifSpecList_case1() {
	fmt.Println(exampleAST(1806, "set term mif ? ?"))
	// Output:
	// &plot.SetTerminalMifSpecList{
	// · SetTerminalMifSpecList: &plot.SetTerminalMifSpecList{
	// · · Case: 1,
	// · · SetTerminalMifSpecListItem: &plot.SetTerminalMifSpecListItem{
	// · · · Case: 6,
	// · · · Token: example1806.go:1:16: '?' "?",
	// · · },
	// · },
	// · SetTerminalMifSpecListItem: &plot.SetTerminalMifSpecListItem{
	// · · Case: 6,
	// · · Token: example1806.go:1:14: '?' "?",
	// · },
	// }
}

func ExampleSetTerminalMifSpecListItem() {
	fmt.Println(exampleAST(1807, "set term mif color"))
	// Output:
	// &plot.SetTerminalMifSpecListItem{
	// · Token: example1807.go:1:14: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalMifSpecListItem_case1() {
	fmt.Println(exampleAST(1808, "set term mif colour"))
	// Output:
	// &plot.SetTerminalMifSpecListItem{
	// · Case: 1,
	// · Token: example1808.go:1:14: IDENTIFIER "colour",
	// }
}

func ExampleSetTerminalMifSpecListItem_case2() {
	fmt.Println(exampleAST(1809, "set term mif monochrome"))
	// Output:
	// &plot.SetTerminalMifSpecListItem{
	// · Case: 2,
	// · Token: example1809.go:1:14: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalMifSpecListItem_case3() {
	fmt.Println(exampleAST(1810, "set term mif polyline"))
	// Output:
	// &plot.SetTerminalMifSpecListItem{
	// · Case: 3,
	// · Token: example1810.go:1:14: IDENTIFIER "polyline",
	// }
}

func ExampleSetTerminalMifSpecListItem_case4() {
	fmt.Println(exampleAST(1811, "set term mif vectors"))
	// Output:
	// &plot.SetTerminalMifSpecListItem{
	// · Case: 4,
	// · Token: example1811.go:1:14: IDENTIFIER "vectors",
	// }
}

func ExampleSetTerminalMifSpecListItem_case5() {
	fmt.Println(exampleAST(1812, "set term mif help"))
	// Output:
	// &plot.SetTerminalMifSpecListItem{
	// · Case: 5,
	// · Token: example1812.go:1:14: IDENTIFIER "help",
	// }
}

func ExampleSetTerminalMifSpecListItem_case6() {
	fmt.Println(exampleAST(1813, "set term mif ?"))
	// Output:
	// &plot.SetTerminalMifSpecListItem{
	// · Case: 6,
	// · Token: example1813.go:1:14: '?' "?",
	// }
}

func ExampleSetTerminalMifSpecListOpt() {
	fmt.Println(exampleAST(1814, "set term mif") == (*SetTerminalMifSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalMifSpecListOpt_case1() {
	fmt.Println(exampleAST(1815, "set term mif ?"))
	// Output:
	// &plot.SetTerminalMifSpecListOpt{
	// · SetTerminalMifSpecList: &plot.SetTerminalMifSpecList{
	// · · SetTerminalMifSpecListItem: &plot.SetTerminalMifSpecListItem{
	// · · · Case: 6,
	// · · · Token: example1815.go:1:14: '?' "?",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalMpSpecList() {
	fmt.Println(exampleAST(1816, "set term mp ident_a"))
	// Output:
	// &plot.SetTerminalMpSpecList{
	// · SetTerminalMpSpecListItem: &plot.SetTerminalMpSpecListItem{
	// · · Case: 15,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1816.go:1:13: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalMpSpecList_case1() {
	fmt.Println(exampleAST(1817, "set term mp ident_a ident_b"))
	// Output:
	// &plot.SetTerminalMpSpecList{
	// · SetTerminalMpSpecList: &plot.SetTerminalMpSpecList{
	// · · Case: 1,
	// · · SetTerminalMpSpecListItem: &plot.SetTerminalMpSpecListItem{
	// · · · Case: 15,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1817.go:1:21: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalMpSpecListItem: &plot.SetTerminalMpSpecListItem{
	// · · Case: 15,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1817.go:1:13: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalMpSpecListItem() {
	fmt.Println(exampleAST(1818, "set term mp color"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Token: example1818.go:1:13: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalMpSpecListItem_case01() {
	fmt.Println(exampleAST(1819, "set term mp colour"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Case: 1,
	// · Token: example1819.go:1:13: IDENTIFIER "colour",
	// }
}

func ExampleSetTerminalMpSpecListItem_case02() {
	fmt.Println(exampleAST(1820, "set term mp monochrome"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Case: 2,
	// · Token: example1820.go:1:13: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalMpSpecListItem_case03() {
	fmt.Println(exampleAST(1821, "set term mp solid"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Case: 3,
	// · Token: example1821.go:1:13: IDENTIFIER "solid",
	// }
}

func ExampleSetTerminalMpSpecListItem_case04() {
	fmt.Println(exampleAST(1822, "set term mp dashed"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Case: 4,
	// · Token: example1822.go:1:13: IDENTIFIER "dashed",
	// }
}

func ExampleSetTerminalMpSpecListItem_case05() {
	fmt.Println(exampleAST(1823, "set term mp notex"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Case: 5,
	// · Token: example1823.go:1:13: IDENTIFIER "notex",
	// }
}

func ExampleSetTerminalMpSpecListItem_case06() {
	fmt.Println(exampleAST(1824, "set term mp tex"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Case: 6,
	// · Token: example1824.go:1:13: IDENTIFIER "tex",
	// }
}

func ExampleSetTerminalMpSpecListItem_case07() {
	fmt.Println(exampleAST(1825, "set term mp latex"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Case: 7,
	// · Token: example1825.go:1:13: IDENTIFIER "latex",
	// }
}

func ExampleSetTerminalMpSpecListItem_case08() {
	fmt.Println(exampleAST(1826, "set term mp magnification ident_a"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Case: 8,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1826.go:1:27: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1826.go:1:13: IDENTIFIER "magnification",
	// }
}

func ExampleSetTerminalMpSpecListItem_case09() {
	fmt.Println(exampleAST(1827, "set term mp psnfss"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Case: 9,
	// · Token: example1827.go:1:13: IDENTIFIER "psnfss",
	// }
}

func ExampleSetTerminalMpSpecListItem_case10() {
	fmt.Println(exampleAST(1828, "set term mp psnfss_version7"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Case: 10,
	// · Token: example1828.go:1:13: IDENTIFIER "psnfss_version7",
	// }
}

func ExampleSetTerminalMpSpecListItem_case11() {
	fmt.Println(exampleAST(1829, "set term mp nopsnfss"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Case: 11,
	// · Token: example1829.go:1:13: IDENTIFIER "nopsnfss",
	// }
}

func ExampleSetTerminalMpSpecListItem_case12() {
	fmt.Println(exampleAST(1830, "set term mp prologues ident_a"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Case: 12,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1830.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1830.go:1:13: IDENTIFIER "prologues",
	// }
}

func ExampleSetTerminalMpSpecListItem_case13() {
	fmt.Println(exampleAST(1831, "set term mp a4paper"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Case: 13,
	// · Token: example1831.go:1:13: IDENTIFIER "a4paper",
	// }
}

func ExampleSetTerminalMpSpecListItem_case14() {
	fmt.Println(exampleAST(1832, "set term mp amstex"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Case: 14,
	// · Token: example1832.go:1:13: IDENTIFIER "amstex",
	// }
}

func ExampleSetTerminalMpSpecListItem_case15() {
	fmt.Println(exampleAST(1833, "set term mp ident_a"))
	// Output:
	// &plot.SetTerminalMpSpecListItem{
	// · Case: 15,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1833.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalMpSpecListOpt() {
	fmt.Println(exampleAST(1834, "set term mp") == (*SetTerminalMpSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalMpSpecListOpt_case1() {
	fmt.Println(exampleAST(1835, "set term mp ident_a"))
	// Output:
	// &plot.SetTerminalMpSpecListOpt{
	// · SetTerminalMpSpecList: &plot.SetTerminalMpSpecList{
	// · · SetTerminalMpSpecListItem: &plot.SetTerminalMpSpecListItem{
	// · · · Case: 15,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1835.go:1:13: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalNeccp6SpecList() {
	fmt.Println(exampleAST(1633, "set term nec_cp6 colour"))
	// Output:
	// &plot.SetTerminalNeccp6SpecList{
	// · SetTerminalNeccp6SpecListItem: &plot.SetTerminalNeccp6SpecListItem{
	// · · Case: 1,
	// · · Token: example1633.go:1:18: IDENTIFIER "colour",
	// · },
	// }
}

func ExampleSetTerminalNeccp6SpecList_case1() {
	fmt.Println(exampleAST(1634, "set term nec_cp6 colour colour"))
	// Output:
	// &plot.SetTerminalNeccp6SpecList{
	// · SetTerminalNeccp6SpecList: &plot.SetTerminalNeccp6SpecList{
	// · · Case: 1,
	// · · SetTerminalNeccp6SpecListItem: &plot.SetTerminalNeccp6SpecListItem{
	// · · · Case: 1,
	// · · · Token: example1634.go:1:25: IDENTIFIER "colour",
	// · · },
	// · },
	// · SetTerminalNeccp6SpecListItem: &plot.SetTerminalNeccp6SpecListItem{
	// · · Case: 1,
	// · · Token: example1634.go:1:18: IDENTIFIER "colour",
	// · },
	// }
}

func ExampleSetTerminalNeccp6SpecListItem() {
	fmt.Println(exampleAST(1635, "set term nec_cp6 monochrome"))
	// Output:
	// &plot.SetTerminalNeccp6SpecListItem{
	// · Token: example1635.go:1:18: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalNeccp6SpecListItem_case1() {
	fmt.Println(exampleAST(1636, "set term nec_cp6 colour"))
	// Output:
	// &plot.SetTerminalNeccp6SpecListItem{
	// · Case: 1,
	// · Token: example1636.go:1:18: IDENTIFIER "colour",
	// }
}

func ExampleSetTerminalNeccp6SpecListItem_case2() {
	fmt.Println(exampleAST(1637, "set term nec_cp6 draft"))
	// Output:
	// &plot.SetTerminalNeccp6SpecListItem{
	// · Case: 2,
	// · Token: example1637.go:1:18: IDENTIFIER "draft",
	// }
}

func ExampleSetTerminalNeccp6SpecListOpt() {
	fmt.Println(exampleAST(1638, "set term nec_cp6") == (*SetTerminalNeccp6SpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalNeccp6SpecListOpt_case1() {
	fmt.Println(exampleAST(1639, "set term nec_cp6 colour"))
	// Output:
	// &plot.SetTerminalNeccp6SpecListOpt{
	// · SetTerminalNeccp6SpecList: &plot.SetTerminalNeccp6SpecList{
	// · · SetTerminalNeccp6SpecListItem: &plot.SetTerminalNeccp6SpecListItem{
	// · · · Case: 1,
	// · · · Token: example1639.go:1:18: IDENTIFIER "colour",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalNextSpecList() {
	fmt.Println(exampleAST(1836, "set term openstep ident_a"))
	// Output:
	// &plot.SetTerminalNextSpecList{
	// · SetTerminalNextSpecListItem: &plot.SetTerminalNextSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1836.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalNextSpecList_case1() {
	fmt.Println(exampleAST(1837, "set terminal next ident_a ident_b"))
	// Output:
	// &plot.SetTerminalNextSpecList{
	// · SetTerminalNextSpecList: &plot.SetTerminalNextSpecList{
	// · · Case: 1,
	// · · SetTerminalNextSpecListItem: &plot.SetTerminalNextSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1837.go:1:27: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalNextSpecListItem: &plot.SetTerminalNextSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1837.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalNextSpecListItem() {
	fmt.Println(exampleAST(1838, "set term openstep ident_a"))
	// Output:
	// &plot.SetTerminalNextSpecListItem{
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1838.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalNextSpecListItem_case1() {
	fmt.Println(exampleAST(1839, "set terminal next default"))
	// Output:
	// &plot.SetTerminalNextSpecListItem{
	// · Case: 1,
	// · Token: example1839.go:1:19: IDENTIFIER "default",
	// }
}

func ExampleSetTerminalNextSpecListItem_case2() {
	fmt.Println(exampleAST(1840, "set term openstep new"))
	// Output:
	// &plot.SetTerminalNextSpecListItem{
	// · Case: 2,
	// · Token: example1840.go:1:19: IDENTIFIER "new",
	// }
}

func ExampleSetTerminalNextSpecListItem_case3() {
	fmt.Println(exampleAST(1841, "set term openstep old"))
	// Output:
	// &plot.SetTerminalNextSpecListItem{
	// · Case: 3,
	// · Token: example1841.go:1:19: IDENTIFIER "old",
	// }
}

func ExampleSetTerminalNextSpecListItem_case4() {
	fmt.Println(exampleAST(1842, "set terminal next color"))
	// Output:
	// &plot.SetTerminalNextSpecListItem{
	// · Case: 4,
	// · Token: example1842.go:1:19: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalNextSpecListItem_case5() {
	fmt.Println(exampleAST(1843, "set terminal next monochrome"))
	// Output:
	// &plot.SetTerminalNextSpecListItem{
	// · Case: 5,
	// · Token: example1843.go:1:19: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalNextSpecListItem_case6() {
	fmt.Println(exampleAST(1844, "set term openstep solid"))
	// Output:
	// &plot.SetTerminalNextSpecListItem{
	// · Case: 6,
	// · Token: example1844.go:1:19: IDENTIFIER "solid",
	// }
}

func ExampleSetTerminalNextSpecListItem_case7() {
	fmt.Println(exampleAST(1845, "set terminal next dashed"))
	// Output:
	// &plot.SetTerminalNextSpecListItem{
	// · Case: 7,
	// · Token: example1845.go:1:19: IDENTIFIER "dashed",
	// }
}

func ExampleSetTerminalNextSpecListItem_case8() {
	fmt.Println(exampleAST(1846, "set term openstep title ident_a"))
	// Output:
	// &plot.SetTerminalNextSpecListItem{
	// · Case: 8,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1846.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1846.go:1:19: IDENTIFIER "title",
	// }
}

func ExampleSetTerminalNextSpecListOpt() {
	fmt.Println(exampleAST(1847, "set terminal next") == (*SetTerminalNextSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalNextSpecListOpt_case1() {
	fmt.Println(exampleAST(1848, "set terminal next ident_a"))
	// Output:
	// &plot.SetTerminalNextSpecListOpt{
	// · SetTerminalNextSpecList: &plot.SetTerminalNextSpecList{
	// · · SetTerminalNextSpecListItem: &plot.SetTerminalNextSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1848.go:1:19: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPbmSpecList() {
	fmt.Println(exampleAST(1849, "set term pbm ident_a"))
	// Output:
	// &plot.SetTerminalPbmSpecList{
	// · SetTerminalPbmSpecListItem: &plot.SetTerminalPbmSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1849.go:1:14: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPbmSpecList_case1() {
	fmt.Println(exampleAST(1850, "set term pbm ident_a ident_b"))
	// Output:
	// &plot.SetTerminalPbmSpecList{
	// · SetTerminalPbmSpecList: &plot.SetTerminalPbmSpecList{
	// · · Case: 1,
	// · · SetTerminalPbmSpecListItem: &plot.SetTerminalPbmSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1850.go:1:22: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalPbmSpecListItem: &plot.SetTerminalPbmSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1850.go:1:14: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPbmSpecListItem() {
	fmt.Println(exampleAST(1851, "set term pbm ident_a"))
	// Output:
	// &plot.SetTerminalPbmSpecListItem{
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1851.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPbmSpecListItem_case1() {
	fmt.Println(exampleAST(1852, "set term pbm size ident_a"))
	// Output:
	// &plot.SetTerminalPbmSpecListItem{
	// · Case: 1,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1852.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1852.go:1:14: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalPbmSpecListOpt() {
	fmt.Println(exampleAST(1853, "set term pbm") == (*SetTerminalPbmSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalPbmSpecListOpt_case1() {
	fmt.Println(exampleAST(1854, "set term pbm ident_a"))
	// Output:
	// &plot.SetTerminalPbmSpecListOpt{
	// · SetTerminalPbmSpecList: &plot.SetTerminalPbmSpecList{
	// · · SetTerminalPbmSpecListItem: &plot.SetTerminalPbmSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1854.go:1:14: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPdfSpecList() {
	fmt.Println(exampleAST(1855, "set term pdf butt"))
	// Output:
	// &plot.SetTerminalPdfSpecList{
	// · SetTerminalPdfSpecListItem: &plot.SetTerminalPdfSpecListItem{
	// · · Case: 12,
	// · · Token: example1855.go:1:14: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalPdfSpecList_case1() {
	fmt.Println(exampleAST(1856, "set term pdf butt butt"))
	// Output:
	// &plot.SetTerminalPdfSpecList{
	// · SetTerminalPdfSpecList: &plot.SetTerminalPdfSpecList{
	// · · Case: 1,
	// · · SetTerminalPdfSpecListItem: &plot.SetTerminalPdfSpecListItem{
	// · · · Case: 12,
	// · · · Token: example1856.go:1:19: IDENTIFIER "butt",
	// · · },
	// · },
	// · SetTerminalPdfSpecListItem: &plot.SetTerminalPdfSpecListItem{
	// · · Case: 12,
	// · · Token: example1856.go:1:14: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalPdfSpecListItem() {
	fmt.Println(exampleAST(1857, "set term pdf monochrome"))
	// Output:
	// &plot.SetTerminalPdfSpecListItem{
	// · Token: example1857.go:1:14: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalPdfSpecListItem_case01() {
	fmt.Println(exampleAST(1858, "set term pdf color"))
	// Output:
	// &plot.SetTerminalPdfSpecListItem{
	// · Case: 1,
	// · Token: example1858.go:1:14: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalPdfSpecListItem_case02() {
	fmt.Println(exampleAST(1859, "set term pdf colour"))
	// Output:
	// &plot.SetTerminalPdfSpecListItem{
	// · Case: 2,
	// · Token: example1859.go:1:14: IDENTIFIER "colour",
	// }
}

func ExampleSetTerminalPdfSpecListItem_case03() {
	fmt.Println(exampleAST(1860, "set term pdf enhanced"))
	// Output:
	// &plot.SetTerminalPdfSpecListItem{
	// · Case: 3,
	// · Token: example1860.go:1:14: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalPdfSpecListItem_case04() {
	fmt.Println(exampleAST(1861, "set term pdf noenhanced"))
	// Output:
	// &plot.SetTerminalPdfSpecListItem{
	// · Case: 4,
	// · Token: example1861.go:1:14: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTerminalPdfSpecListItem_case05() {
	fmt.Println(exampleAST(1862, "set term pdf fname ident_a"))
	// Output:
	// &plot.SetTerminalPdfSpecListItem{
	// · Case: 5,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1862.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1862.go:1:14: IDENTIFIER "fname",
	// }
}

func ExampleSetTerminalPdfSpecListItem_case06() {
	fmt.Println(exampleAST(1863, "set term pdf fsize ident_a"))
	// Output:
	// &plot.SetTerminalPdfSpecListItem{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1863.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1863.go:1:14: IDENTIFIER "fsize",
	// }
}

func ExampleSetTerminalPdfSpecListItem_case07() {
	fmt.Println(exampleAST(1864, "set term pdf font ident_a"))
	// Output:
	// &plot.SetTerminalPdfSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1864.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1864.go:1:14: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalPdfSpecListItem_case08() {
	fmt.Println(exampleAST(1865, "set term pdf fontscale ident_a"))
	// Output:
	// &plot.SetTerminalPdfSpecListItem{
	// · Case: 8,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1865.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1865.go:1:14: IDENTIFIER "fontscale",
	// }
}

func ExampleSetTerminalPdfSpecListItem_case09() {
	fmt.Println(exampleAST(1866, "set term pdf linewidth ident_a"))
	// Output:
	// &plot.SetTerminalPdfSpecListItem{
	// · Case: 9,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1866.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1866.go:1:14: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalPdfSpecListItem_case10() {
	fmt.Println(exampleAST(1867, "set term pdf lw ident_a"))
	// Output:
	// &plot.SetTerminalPdfSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1867.go:1:17: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1867.go:1:14: IDENTIFIER "lw",
	// }
}

func ExampleSetTerminalPdfSpecListItem_case11() {
	fmt.Println(exampleAST(1868, "set term pdf rounded"))
	// Output:
	// &plot.SetTerminalPdfSpecListItem{
	// · Case: 11,
	// · Token: example1868.go:1:14: IDENTIFIER "rounded",
	// }
}

func ExampleSetTerminalPdfSpecListItem_case12() {
	fmt.Println(exampleAST(1869, "set term pdf butt"))
	// Output:
	// &plot.SetTerminalPdfSpecListItem{
	// · Case: 12,
	// · Token: example1869.go:1:14: IDENTIFIER "butt",
	// }
}

func ExampleSetTerminalPdfSpecListItem_case13() {
	fmt.Println(exampleAST(1870, "set term pdf dl ident_a"))
	// Output:
	// &plot.SetTerminalPdfSpecListItem{
	// · Case: 13,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1870.go:1:17: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1870.go:1:14: IDENTIFIER "dl",
	// }
}

func ExampleSetTerminalPdfSpecListItem_case14() {
	fmt.Println(exampleAST(1871, "set term pdf size ident_a"))
	// Output:
	// &plot.SetTerminalPdfSpecListItem{
	// · Case: 14,
	// · ExpressionUnitList: &plot.ExpressionUnitList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1871.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1871.go:1:14: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalPdfSpecListOpt() {
	fmt.Println(exampleAST(1872, "set term pdf") == (*SetTerminalPdfSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalPdfSpecListOpt_case1() {
	fmt.Println(exampleAST(1873, "set term pdf butt"))
	// Output:
	// &plot.SetTerminalPdfSpecListOpt{
	// · SetTerminalPdfSpecList: &plot.SetTerminalPdfSpecList{
	// · · SetTerminalPdfSpecListItem: &plot.SetTerminalPdfSpecListItem{
	// · · · Case: 12,
	// · · · Token: example1873.go:1:14: IDENTIFIER "butt",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPdfcairoSpecList() {
	fmt.Println(exampleAST(1874, "set term pdfcairo butt"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecList{
	// · SetTerminalPdfcairoSpecListItem: &plot.SetTerminalPdfcairoSpecListItem{
	// · · Case: 8,
	// · · Token: example1874.go:1:19: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalPdfcairoSpecList_case1() {
	fmt.Println(exampleAST(1875, "set term pdfcairo butt butt"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecList{
	// · SetTerminalPdfcairoSpecList: &plot.SetTerminalPdfcairoSpecList{
	// · · Case: 1,
	// · · SetTerminalPdfcairoSpecListItem: &plot.SetTerminalPdfcairoSpecListItem{
	// · · · Case: 8,
	// · · · Token: example1875.go:1:24: IDENTIFIER "butt",
	// · · },
	// · },
	// · SetTerminalPdfcairoSpecListItem: &plot.SetTerminalPdfcairoSpecListItem{
	// · · Case: 8,
	// · · Token: example1875.go:1:19: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalPdfcairoSpecListItem() {
	fmt.Println(exampleAST(1876, "set term pdfcairo enhanced"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecListItem{
	// · Token: example1876.go:1:19: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalPdfcairoSpecListItem_case01() {
	fmt.Println(exampleAST(1877, "set term pdfcairo noenhanced"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecListItem{
	// · Case: 1,
	// · Token: example1877.go:1:19: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTerminalPdfcairoSpecListItem_case02() {
	fmt.Println(exampleAST(1878, "set term pdfcairo mono"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecListItem{
	// · Case: 2,
	// · Token: example1878.go:1:19: IDENTIFIER "mono",
	// }
}

func ExampleSetTerminalPdfcairoSpecListItem_case03() {
	fmt.Println(exampleAST(1879, "set term pdfcairo color"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecListItem{
	// · Case: 3,
	// · Token: example1879.go:1:19: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalPdfcairoSpecListItem_case04() {
	fmt.Println(exampleAST(1880, "set term pdfcairo font ident_a"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1880.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1880.go:1:19: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalPdfcairoSpecListItem_case05() {
	fmt.Println(exampleAST(1881, "set term pdfcairo fontscale ident_a"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecListItem{
	// · Case: 5,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1881.go:1:29: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1881.go:1:19: IDENTIFIER "fontscale",
	// }
}

func ExampleSetTerminalPdfcairoSpecListItem_case06() {
	fmt.Println(exampleAST(1882, "set term pdfcairo linewidth ident_a"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecListItem{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1882.go:1:29: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1882.go:1:19: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalPdfcairoSpecListItem_case07() {
	fmt.Println(exampleAST(1883, "set term pdfcairo rounded"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecListItem{
	// · Case: 7,
	// · Token: example1883.go:1:19: IDENTIFIER "rounded",
	// }
}

func ExampleSetTerminalPdfcairoSpecListItem_case08() {
	fmt.Println(exampleAST(1884, "set term pdfcairo butt"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecListItem{
	// · Case: 8,
	// · Token: example1884.go:1:19: IDENTIFIER "butt",
	// }
}

func ExampleSetTerminalPdfcairoSpecListItem_case09() {
	fmt.Println(exampleAST(1885, "set term pdfcairo square"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecListItem{
	// · Case: 9,
	// · Token: example1885.go:1:19: IDENTIFIER "square",
	// }
}

func ExampleSetTerminalPdfcairoSpecListItem_case10() {
	fmt.Println(exampleAST(1886, "set term pdfcairo dashlength ident_a"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1886.go:1:30: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1886.go:1:19: IDENTIFIER "dashlength",
	// }
}

func ExampleSetTerminalPdfcairoSpecListItem_case11() {
	fmt.Println(exampleAST(1887, "set term pdfcairo background ident_a"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1887.go:1:30: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1887.go:1:19: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalPdfcairoSpecListItem_case12() {
	fmt.Println(exampleAST(1888, "set term pdfcairo size ident_a"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecListItem{
	// · Case: 12,
	// · ExpressionUnitList: &plot.ExpressionUnitList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1888.go:1:24: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1888.go:1:19: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalPdfcairoSpecListOpt() {
	fmt.Println(exampleAST(1889, "set term pdfcairo") == (*SetTerminalPdfcairoSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalPdfcairoSpecListOpt_case1() {
	fmt.Println(exampleAST(1890, "set term pdfcairo butt"))
	// Output:
	// &plot.SetTerminalPdfcairoSpecListOpt{
	// · SetTerminalPdfcairoSpecList: &plot.SetTerminalPdfcairoSpecList{
	// · · SetTerminalPdfcairoSpecListItem: &plot.SetTerminalPdfcairoSpecListItem{
	// · · · Case: 8,
	// · · · Token: example1890.go:1:19: IDENTIFIER "butt",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPmSpecList() {
	fmt.Println(exampleAST(1891, "set term pm ident_a"))
	// Output:
	// &plot.SetTerminalPmSpecList{
	// · SetTerminalPmSpecListItem: &plot.SetTerminalPmSpecListItem{
	// · · Case: 4,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1891.go:1:13: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPmSpecList_case1() {
	fmt.Println(exampleAST(1892, "set term pm ident_a ident_b"))
	// Output:
	// &plot.SetTerminalPmSpecList{
	// · SetTerminalPmSpecList: &plot.SetTerminalPmSpecList{
	// · · Case: 1,
	// · · SetTerminalPmSpecListItem: &plot.SetTerminalPmSpecListItem{
	// · · · Case: 4,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1892.go:1:21: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalPmSpecListItem: &plot.SetTerminalPmSpecListItem{
	// · · Case: 4,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1892.go:1:13: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPmSpecListItem() {
	fmt.Println(exampleAST(1893, "set term pm server"))
	// Output:
	// &plot.SetTerminalPmSpecListItem{
	// · Token: example1893.go:1:13: IDENTIFIER "server",
	// }
}

func ExampleSetTerminalPmSpecListItem_case1() {
	fmt.Println(exampleAST(1894, "set term pm persist"))
	// Output:
	// &plot.SetTerminalPmSpecListItem{
	// · Case: 1,
	// · Token: example1894.go:1:13: IDENTIFIER "persist",
	// }
}

func ExampleSetTerminalPmSpecListItem_case2() {
	fmt.Println(exampleAST(1895, "set term pm widelines"))
	// Output:
	// &plot.SetTerminalPmSpecListItem{
	// · Case: 2,
	// · Token: example1895.go:1:13: IDENTIFIER "widelines",
	// }
}

func ExampleSetTerminalPmSpecListItem_case3() {
	fmt.Println(exampleAST(1896, "set term pm enhanced"))
	// Output:
	// &plot.SetTerminalPmSpecListItem{
	// · Case: 3,
	// · Token: example1896.go:1:13: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalPmSpecListItem_case4() {
	fmt.Println(exampleAST(1897, "set term pm ident_a"))
	// Output:
	// &plot.SetTerminalPmSpecListItem{
	// · Case: 4,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1897.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPmSpecListOpt() {
	fmt.Println(exampleAST(1898, "set term pm") == (*SetTerminalPmSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalPmSpecListOpt_case1() {
	fmt.Println(exampleAST(1899, "set term pm ident_a"))
	// Output:
	// &plot.SetTerminalPmSpecListOpt{
	// · SetTerminalPmSpecList: &plot.SetTerminalPmSpecList{
	// · · SetTerminalPmSpecListItem: &plot.SetTerminalPmSpecListItem{
	// · · · Case: 4,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1899.go:1:13: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPngSpecList() {
	fmt.Println(exampleAST(1900, "set term png butt"))
	// Output:
	// &plot.SetTerminalPngSpecList{
	// · SetTerminalPngSpecListItem: &plot.SetTerminalPngSpecListItem{
	// · · Case: 9,
	// · · Token: example1900.go:1:14: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalPngSpecList_case1() {
	fmt.Println(exampleAST(1901, "set term png butt butt"))
	// Output:
	// &plot.SetTerminalPngSpecList{
	// · SetTerminalPngSpecList: &plot.SetTerminalPngSpecList{
	// · · Case: 1,
	// · · SetTerminalPngSpecListItem: &plot.SetTerminalPngSpecListItem{
	// · · · Case: 9,
	// · · · Token: example1901.go:1:19: IDENTIFIER "butt",
	// · · },
	// · },
	// · SetTerminalPngSpecListItem: &plot.SetTerminalPngSpecListItem{
	// · · Case: 9,
	// · · Token: example1901.go:1:14: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalPngSpecListItem() {
	fmt.Println(exampleAST(1902, "set term png enhanced"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Token: example1902.go:1:14: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalPngSpecListItem_case01() {
	fmt.Println(exampleAST(1903, "set term png noenhanced"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 1,
	// · Token: example1903.go:1:14: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTerminalPngSpecListItem_case02() {
	fmt.Println(exampleAST(1904, "set term png transparent"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 2,
	// · Token: example1904.go:1:14: IDENTIFIER "transparent",
	// }
}

func ExampleSetTerminalPngSpecListItem_case03() {
	fmt.Println(exampleAST(1905, "set term png notransparent"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 3,
	// · Token: example1905.go:1:14: IDENTIFIER "notransparent",
	// }
}

func ExampleSetTerminalPngSpecListItem_case04() {
	fmt.Println(exampleAST(1906, "set term png interlace"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 4,
	// · Token: example1906.go:1:14: IDENTIFIER "interlace",
	// }
}

func ExampleSetTerminalPngSpecListItem_case05() {
	fmt.Println(exampleAST(1907, "set term png nointerlace"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 5,
	// · Token: example1907.go:1:14: IDENTIFIER "nointerlace",
	// }
}

func ExampleSetTerminalPngSpecListItem_case06() {
	fmt.Println(exampleAST(1908, "set term png truecolor"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 6,
	// · Token: example1908.go:1:14: IDENTIFIER "truecolor",
	// }
}

func ExampleSetTerminalPngSpecListItem_case07() {
	fmt.Println(exampleAST(1909, "set term png notruecolor"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 7,
	// · Token: example1909.go:1:14: IDENTIFIER "notruecolor",
	// }
}

func ExampleSetTerminalPngSpecListItem_case08() {
	fmt.Println(exampleAST(1910, "set term png rounded"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 8,
	// · Token: example1910.go:1:14: IDENTIFIER "rounded",
	// }
}

func ExampleSetTerminalPngSpecListItem_case09() {
	fmt.Println(exampleAST(1911, "set term png butt"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 9,
	// · Token: example1911.go:1:14: IDENTIFIER "butt",
	// }
}

func ExampleSetTerminalPngSpecListItem_case10() {
	fmt.Println(exampleAST(1912, "set term png linewidth ident_a"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1912.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1912.go:1:14: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalPngSpecListItem_case11() {
	fmt.Println(exampleAST(1913, "set term png dashlength ident_a"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1913.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1913.go:1:14: IDENTIFIER "dashlength",
	// }
}

func ExampleSetTerminalPngSpecListItem_case12() {
	fmt.Println(exampleAST(1914, "set term png tiny"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 12,
	// · Token: example1914.go:1:14: IDENTIFIER "tiny",
	// }
}

func ExampleSetTerminalPngSpecListItem_case13() {
	fmt.Println(exampleAST(1915, "set term png small"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 13,
	// · Token: example1915.go:1:14: IDENTIFIER "small",
	// }
}

func ExampleSetTerminalPngSpecListItem_case14() {
	fmt.Println(exampleAST(1916, "set term png medium"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 14,
	// · Token: example1916.go:1:14: IDENTIFIER "medium",
	// }
}

func ExampleSetTerminalPngSpecListItem_case15() {
	fmt.Println(exampleAST(1917, "set term png large"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 15,
	// · Token: example1917.go:1:14: IDENTIFIER "large",
	// }
}

func ExampleSetTerminalPngSpecListItem_case16() {
	fmt.Println(exampleAST(1918, "set term png giant"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 16,
	// · Token: example1918.go:1:14: IDENTIFIER "giant",
	// }
}

func ExampleSetTerminalPngSpecListItem_case17() {
	fmt.Println(exampleAST(1919, "set term png font ident_a"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 17,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1919.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1919.go:1:14: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalPngSpecListItem_case18() {
	fmt.Println(exampleAST(1920, "set term png fontscale ident_a"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 18,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1920.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1920.go:1:14: IDENTIFIER "fontscale",
	// }
}

func ExampleSetTerminalPngSpecListItem_case19() {
	fmt.Println(exampleAST(1921, "set term png size ident_a"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 19,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1921.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1921.go:1:14: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalPngSpecListItem_case20() {
	fmt.Println(exampleAST(1922, "set term png crop"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 20,
	// · Token: example1922.go:1:14: IDENTIFIER "crop",
	// }
}

func ExampleSetTerminalPngSpecListItem_case21() {
	fmt.Println(exampleAST(1923, "set term png nocrop"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 21,
	// · Token: example1923.go:1:14: IDENTIFIER "nocrop",
	// }
}

func ExampleSetTerminalPngSpecListItem_case22() {
	fmt.Println(exampleAST(1924, "set term png background ident_a"))
	// Output:
	// &plot.SetTerminalPngSpecListItem{
	// · Case: 22,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1924.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1924.go:1:14: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalPngSpecListOpt() {
	fmt.Println(exampleAST(1925, "set term png") == (*SetTerminalPngSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalPngSpecListOpt_case1() {
	fmt.Println(exampleAST(1926, "set term png butt"))
	// Output:
	// &plot.SetTerminalPngSpecListOpt{
	// · SetTerminalPngSpecList: &plot.SetTerminalPngSpecList{
	// · · SetTerminalPngSpecListItem: &plot.SetTerminalPngSpecListItem{
	// · · · Case: 9,
	// · · · Token: example1926.go:1:14: IDENTIFIER "butt",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPngcairoSpecList() {
	fmt.Println(exampleAST(1927, "set term pngcairo butt"))
	// Output:
	// &plot.SetTerminalPngcairoSpecList{
	// · SetTerminalPngcairoSpecListItem: &plot.SetTerminalPngcairoSpecListItem{
	// · · Case: 13,
	// · · Token: example1927.go:1:19: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalPngcairoSpecList_case1() {
	fmt.Println(exampleAST(1928, "set term pngcairo butt butt"))
	// Output:
	// &plot.SetTerminalPngcairoSpecList{
	// · SetTerminalPngcairoSpecList: &plot.SetTerminalPngcairoSpecList{
	// · · Case: 1,
	// · · SetTerminalPngcairoSpecListItem: &plot.SetTerminalPngcairoSpecListItem{
	// · · · Case: 13,
	// · · · Token: example1928.go:1:24: IDENTIFIER "butt",
	// · · },
	// · },
	// · SetTerminalPngcairoSpecListItem: &plot.SetTerminalPngcairoSpecListItem{
	// · · Case: 13,
	// · · Token: example1928.go:1:19: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalPngcairoSpecListItem() {
	fmt.Println(exampleAST(1929, "set term pngcairo enhanced"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Token: example1929.go:1:19: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case01() {
	fmt.Println(exampleAST(1930, "set term pngcairo noenhanced"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 1,
	// · Token: example1930.go:1:19: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case02() {
	fmt.Println(exampleAST(1931, "set term pngcairo mono"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 2,
	// · Token: example1931.go:1:19: IDENTIFIER "mono",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case03() {
	fmt.Println(exampleAST(1932, "set term pngcairo color"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 3,
	// · Token: example1932.go:1:19: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case04() {
	fmt.Println(exampleAST(1933, "set term pngcairo transparent"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 4,
	// · Token: example1933.go:1:19: IDENTIFIER "transparent",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case05() {
	fmt.Println(exampleAST(1934, "set term pngcairo notransparent"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 5,
	// · Token: example1934.go:1:19: IDENTIFIER "notransparent",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case06() {
	fmt.Println(exampleAST(1935, "set term pngcairo crop"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 6,
	// · Token: example1935.go:1:19: IDENTIFIER "crop",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case07() {
	fmt.Println(exampleAST(1936, "set term pngcairo nocrop"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 7,
	// · Token: example1936.go:1:19: IDENTIFIER "nocrop",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case08() {
	fmt.Println(exampleAST(1937, "set term pngcairo background ident_a"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 8,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1937.go:1:30: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1937.go:1:19: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case09() {
	fmt.Println(exampleAST(1938, "set term pngcairo font ident_a"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 9,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1938.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1938.go:1:19: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case10() {
	fmt.Println(exampleAST(1939, "set term pngcairo fontscale ident_a"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1939.go:1:29: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1939.go:1:19: IDENTIFIER "fontscale",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case11() {
	fmt.Println(exampleAST(1940, "set term pngcairo linewidth ident_a"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1940.go:1:29: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1940.go:1:19: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case12() {
	fmt.Println(exampleAST(1941, "set term pngcairo rounded"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 12,
	// · Token: example1941.go:1:19: IDENTIFIER "rounded",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case13() {
	fmt.Println(exampleAST(1942, "set term pngcairo butt"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 13,
	// · Token: example1942.go:1:19: IDENTIFIER "butt",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case14() {
	fmt.Println(exampleAST(1943, "set term pngcairo square"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 14,
	// · Token: example1943.go:1:19: IDENTIFIER "square",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case15() {
	fmt.Println(exampleAST(1944, "set term pngcairo dashlength ident_a"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1944.go:1:30: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1944.go:1:19: IDENTIFIER "dashlength",
	// }
}

func ExampleSetTerminalPngcairoSpecListItem_case16() {
	fmt.Println(exampleAST(1945, "set term pngcairo size ident_a"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListItem{
	// · Case: 16,
	// · ExpressionUnitList: &plot.ExpressionUnitList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1945.go:1:24: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1945.go:1:19: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalPngcairoSpecListOpt() {
	fmt.Println(exampleAST(1946, "set term pngcairo") == (*SetTerminalPngcairoSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalPngcairoSpecListOpt_case1() {
	fmt.Println(exampleAST(1947, "set term pngcairo butt"))
	// Output:
	// &plot.SetTerminalPngcairoSpecListOpt{
	// · SetTerminalPngcairoSpecList: &plot.SetTerminalPngcairoSpecList{
	// · · SetTerminalPngcairoSpecListItem: &plot.SetTerminalPngcairoSpecListItem{
	// · · · Case: 13,
	// · · · Token: example1947.go:1:19: IDENTIFIER "butt",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPostscriptSpecList() {
	fmt.Println(exampleAST(2147, "set term postscript ident_a"))
	// Output:
	// &plot.SetTerminalPostscriptSpecList{
	// · SetTerminalPostscriptSpecListItem: &plot.SetTerminalPostscriptSpecListItem{
	// · · Case: 39,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2147.go:1:21: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPostscriptSpecList_case1() {
	fmt.Println(exampleAST(2148, "set term postscript ident_a ident_b"))
	// Output:
	// &plot.SetTerminalPostscriptSpecList{
	// · SetTerminalPostscriptSpecList: &plot.SetTerminalPostscriptSpecList{
	// · · Case: 1,
	// · · SetTerminalPostscriptSpecListItem: &plot.SetTerminalPostscriptSpecListItem{
	// · · · Case: 39,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2148.go:1:29: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalPostscriptSpecListItem: &plot.SetTerminalPostscriptSpecListItem{
	// · · Case: 39,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2148.go:1:21: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPostscriptSpecListItem() {
	fmt.Println(exampleAST(2149, "set term postscript default"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Token: example2149.go:1:21: IDENTIFIER "default",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case01() {
	fmt.Println(exampleAST(2150, "set term postscript landscape"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 1,
	// · Token: example2150.go:1:21: IDENTIFIER "landscape",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case02() {
	fmt.Println(exampleAST(2151, "set term postscript portrait"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 2,
	// · Token: example2151.go:1:21: IDENTIFIER "portrait",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case03() {
	fmt.Println(exampleAST(2152, "set term postscript eps"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 3,
	// · Token: example2152.go:1:21: IDENTIFIER "eps",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case04() {
	fmt.Println(exampleAST(2153, "set term postscript enhanced"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 4,
	// · Token: example2153.go:1:21: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case05() {
	fmt.Println(exampleAST(2154, "set term postscript noenhanced"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 5,
	// · Token: example2154.go:1:21: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case06() {
	fmt.Println(exampleAST(2155, "set term postscript defaultplex"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 6,
	// · Token: example2155.go:1:21: IDENTIFIER "defaultplex",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case07() {
	fmt.Println(exampleAST(2156, "set term postscript simplex"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 7,
	// · Token: example2156.go:1:21: IDENTIFIER "simplex",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case08() {
	fmt.Println(exampleAST(2157, "set term postscript duplex"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 8,
	// · Token: example2157.go:1:21: IDENTIFIER "duplex",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case09() {
	fmt.Println(exampleAST(2158, "set term postscript fontfile ident_a"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 9,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2158.go:1:30: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2158.go:1:21: IDENTIFIER "fontfile",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case10() {
	fmt.Println(exampleAST(2159, "set term postscript fontfile add ident_a"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2159.go:1:34: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2159.go:1:21: IDENTIFIER "fontfile",
	// · Token2: example2159.go:1:30: IDENTIFIER "add",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case11() {
	fmt.Println(exampleAST(2160, "set term postscript fontfile delete ident_a"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2160.go:1:37: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2160.go:1:21: IDENTIFIER "fontfile",
	// · Token2: example2160.go:1:30: IDENTIFIER "delete",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case12() {
	fmt.Println(exampleAST(2161, "set term postscript nofontfiles"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 12,
	// · Token: example2161.go:1:21: IDENTIFIER "nofontfiles",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case13() {
	fmt.Println(exampleAST(2162, "set term postscript adobeglyphnames"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 13,
	// · Token: example2162.go:1:21: IDENTIFIER "adobeglyphnames",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case14() {
	fmt.Println(exampleAST(2163, "set term postscript noadobeglyphnames"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 14,
	// · Token: example2163.go:1:21: IDENTIFIER "noadobeglyphnames",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case15() {
	fmt.Println(exampleAST(2164, "set term postscript level1"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 15,
	// · Token: example2164.go:1:21: IDENTIFIER "level1",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case16() {
	fmt.Println(exampleAST(2165, "set term postscript leveldefault"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 16,
	// · Token: example2165.go:1:21: IDENTIFIER "leveldefault",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case17() {
	fmt.Println(exampleAST(2166, "set term postscript level3"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 17,
	// · Token: example2166.go:1:21: IDENTIFIER "level3",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case18() {
	fmt.Println(exampleAST(2167, "set term postscript color"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 18,
	// · Token: example2167.go:1:21: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case19() {
	fmt.Println(exampleAST(2168, "set term postscript colour"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 19,
	// · Token: example2168.go:1:21: IDENTIFIER "colour",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case20() {
	fmt.Println(exampleAST(2169, "set term postscript monochrome"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 20,
	// · Token: example2169.go:1:21: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case21() {
	fmt.Println(exampleAST(2170, "set term postscript background ident_a"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 21,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2170.go:1:32: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2170.go:1:21: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case22() {
	fmt.Println(exampleAST(2171, "set term postscript nobackground"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 22,
	// · Token: example2171.go:1:21: IDENTIFIER "nobackground",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case23() {
	fmt.Println(exampleAST(2172, "set term postscript dashlength ident_a"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 23,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2172.go:1:32: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2172.go:1:21: IDENTIFIER "dashlength",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case24() {
	fmt.Println(exampleAST(2173, "set term postscript dl ident_a"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 24,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2173.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2173.go:1:21: IDENTIFIER "dl",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case25() {
	fmt.Println(exampleAST(2174, "set term postscript linewidth ident_a"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 25,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2174.go:1:31: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2174.go:1:21: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case26() {
	fmt.Println(exampleAST(2175, "set term postscript lw ident_a"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 26,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2175.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2175.go:1:21: IDENTIFIER "lw",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case27() {
	fmt.Println(exampleAST(2176, "set term postscript rounded"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 27,
	// · Token: example2176.go:1:21: IDENTIFIER "rounded",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case28() {
	fmt.Println(exampleAST(2177, "set term postscript butt"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 28,
	// · Token: example2177.go:1:21: IDENTIFIER "butt",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case29() {
	fmt.Println(exampleAST(2178, "set term postscript clip"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 29,
	// · Token: example2178.go:1:21: IDENTIFIER "clip",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case30() {
	fmt.Println(exampleAST(2179, "set term postscript noclip"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 30,
	// · Token: example2179.go:1:21: IDENTIFIER "noclip",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case31() {
	fmt.Println(exampleAST(2180, "set term postscript palfuncparam ident_a"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 31,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2180.go:1:34: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2180.go:1:21: IDENTIFIER "palfuncparam",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case32() {
	fmt.Println(exampleAST(2181, "set term postscript palfuncparam ident_a , ident_b"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 32,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2181.go:1:34: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2181.go:1:44: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2181.go:1:21: IDENTIFIER "palfuncparam",
	// · Token2: example2181.go:1:42: ',' ",",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case33() {
	fmt.Println(exampleAST(2182, "set term postscript size ident_a"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 33,
	// · ExpressionUnitList: &plot.ExpressionUnitList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2182.go:1:26: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2182.go:1:21: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case34() {
	fmt.Println(exampleAST(2183, "set term postscript blacktext"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 34,
	// · Token: example2183.go:1:21: IDENTIFIER "blacktext",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case35() {
	fmt.Println(exampleAST(2184, "set term postscript colortext"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 35,
	// · Token: example2184.go:1:21: IDENTIFIER "colortext",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case36() {
	fmt.Println(exampleAST(2185, "set term postscript colourtext"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 36,
	// · Token: example2185.go:1:21: IDENTIFIER "colourtext",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case37() {
	fmt.Println(exampleAST(2186, "set term postscript font ident_a"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 37,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2186.go:1:26: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2186.go:1:21: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case38() {
	fmt.Println(exampleAST(2187, "set term postscript font ident_a ident_b"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 38,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2187.go:1:26: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2187.go:1:34: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2187.go:1:21: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case39() {
	fmt.Println(exampleAST(2188, "set term postscript ident_a"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 39,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2188.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPostscriptSpecListItem_case40() {
	fmt.Println(exampleAST(2189, "set term postscript fontscale ident_a"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListItem{
	// · Case: 40,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2189.go:1:31: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2189.go:1:21: IDENTIFIER "fontscale",
	// }
}

func ExampleSetTerminalPostscriptSpecListOpt() {
	fmt.Println(exampleAST(2190, "set term postscript") == (*SetTerminalPostscriptSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalPostscriptSpecListOpt_case1() {
	fmt.Println(exampleAST(2191, "set term postscript ident_a"))
	// Output:
	// &plot.SetTerminalPostscriptSpecListOpt{
	// · SetTerminalPostscriptSpecList: &plot.SetTerminalPostscriptSpecList{
	// · · SetTerminalPostscriptSpecListItem: &plot.SetTerminalPostscriptSpecListItem{
	// · · · Case: 39,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2191.go:1:21: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPstexSpecList() {
	fmt.Println(exampleAST(1948, "set term pstex ident_a"))
	// Output:
	// &plot.SetTerminalPstexSpecList{
	// · SetTerminalPstexSpecListItem: &plot.SetTerminalPstexSpecListItem{
	// · · Case: 25,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1948.go:1:16: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPstexSpecList_case1() {
	fmt.Println(exampleAST(1949, "set term pslatex ident_a ident_b"))
	// Output:
	// &plot.SetTerminalPstexSpecList{
	// · SetTerminalPstexSpecList: &plot.SetTerminalPstexSpecList{
	// · · Case: 1,
	// · · SetTerminalPstexSpecListItem: &plot.SetTerminalPstexSpecListItem{
	// · · · Case: 25,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1949.go:1:26: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalPstexSpecListItem: &plot.SetTerminalPstexSpecListItem{
	// · · Case: 25,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1949.go:1:18: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPstexSpecListItem() {
	fmt.Println(exampleAST(1950, "set term pslatex default"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Token: example1950.go:1:18: IDENTIFIER "default",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case01() {
	fmt.Println(exampleAST(1951, "set term pslatex rotate"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 1,
	// · Token: example1951.go:1:18: IDENTIFIER "rotate",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case02() {
	fmt.Println(exampleAST(1952, "set term pslatex norotate"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 2,
	// · Token: example1952.go:1:18: IDENTIFIER "norotate",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case03() {
	fmt.Println(exampleAST(1953, "set term pslatex oldstyle"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 3,
	// · Token: example1953.go:1:18: IDENTIFIER "oldstyle",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case04() {
	fmt.Println(exampleAST(1954, "set term pslatex newstyle"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 4,
	// · Token: example1954.go:1:18: IDENTIFIER "newstyle",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case05() {
	fmt.Println(exampleAST(1955, "set term pslatex auxfile"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 5,
	// · Token: example1955.go:1:18: IDENTIFIER "auxfile",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case06() {
	fmt.Println(exampleAST(1956, "set term pslatex noauxfile"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 6,
	// · Token: example1956.go:1:18: IDENTIFIER "noauxfile",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case07() {
	fmt.Println(exampleAST(1957, "set term pslatex level1"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 7,
	// · Token: example1957.go:1:18: IDENTIFIER "level1",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case08() {
	fmt.Println(exampleAST(1958, "set term pslatex leveldefault"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 8,
	// · Token: example1958.go:1:18: IDENTIFIER "leveldefault",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case09() {
	fmt.Println(exampleAST(1959, "set term pstex level3"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 9,
	// · Token: example1959.go:1:16: IDENTIFIER "level3",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case10() {
	fmt.Println(exampleAST(1960, "set term pslatex color"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 10,
	// · Token: example1960.go:1:18: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case11() {
	fmt.Println(exampleAST(1961, "set term pslatex colour"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 11,
	// · Token: example1961.go:1:18: IDENTIFIER "colour",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case12() {
	fmt.Println(exampleAST(1962, "set term pslatex monochrome"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 12,
	// · Token: example1962.go:1:18: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case13() {
	fmt.Println(exampleAST(1963, "set term pslatex background ident_a"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 13,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1963.go:1:29: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1963.go:1:18: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case14() {
	fmt.Println(exampleAST(1964, "set term pslatex nobackground"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 14,
	// · Token: example1964.go:1:18: IDENTIFIER "nobackground",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case15() {
	fmt.Println(exampleAST(1965, "set term pslatex dashlength ident_a"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1965.go:1:29: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1965.go:1:18: IDENTIFIER "dashlength",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case16() {
	fmt.Println(exampleAST(1966, "set term pstex dl ident_a"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 16,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1966.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1966.go:1:16: IDENTIFIER "dl",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case17() {
	fmt.Println(exampleAST(1967, "set term pslatex linewidth ident_a"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 17,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1967.go:1:28: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1967.go:1:18: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case18() {
	fmt.Println(exampleAST(1968, "set term pslatex lw ident_a"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 18,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1968.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1968.go:1:18: IDENTIFIER "lw",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case19() {
	fmt.Println(exampleAST(1969, "set term pstex rounded"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 19,
	// · Token: example1969.go:1:16: IDENTIFIER "rounded",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case20() {
	fmt.Println(exampleAST(1970, "set term pslatex butt"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 20,
	// · Token: example1970.go:1:18: IDENTIFIER "butt",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case21() {
	fmt.Println(exampleAST(1971, "set term pslatex clip"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 21,
	// · Token: example1971.go:1:18: IDENTIFIER "clip",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case22() {
	fmt.Println(exampleAST(1972, "set term pslatex noclip"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 22,
	// · Token: example1972.go:1:18: IDENTIFIER "noclip",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case23() {
	fmt.Println(exampleAST(1973, "set term pslatex palfuncparam ident_a"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 23,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1973.go:1:31: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1973.go:1:18: IDENTIFIER "palfuncparam",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case24() {
	fmt.Println(exampleAST(1974, "set term pstex size ident_a"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 24,
	// · ExpressionUnitList: &plot.ExpressionUnitList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1974.go:1:21: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1974.go:1:16: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalPstexSpecListItem_case25() {
	fmt.Println(exampleAST(1975, "set term pslatex ident_a"))
	// Output:
	// &plot.SetTerminalPstexSpecListItem{
	// · Case: 25,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1975.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPstexSpecListOpt() {
	fmt.Println(exampleAST(1976, "set term pslatex") == (*SetTerminalPstexSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalPstexSpecListOpt_case1() {
	fmt.Println(exampleAST(1977, "set term pslatex ident_a"))
	// Output:
	// &plot.SetTerminalPstexSpecListOpt{
	// · SetTerminalPstexSpecList: &plot.SetTerminalPstexSpecList{
	// · · SetTerminalPstexSpecListItem: &plot.SetTerminalPstexSpecListItem{
	// · · · Case: 25,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1977.go:1:18: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalPstricksSpecList() {
	fmt.Println(exampleAST(1978, "set term pstricks hacktext"))
	// Output:
	// &plot.SetTerminalPstricksSpecList{
	// · SetTerminalPstricksSpecListItem: &plot.SetTerminalPstricksSpecListItem{
	// · · Token: example1978.go:1:19: IDENTIFIER "hacktext",
	// · },
	// }
}

func ExampleSetTerminalPstricksSpecList_case1() {
	fmt.Println(exampleAST(1979, "set term pstricks hacktext hacktext"))
	// Output:
	// &plot.SetTerminalPstricksSpecList{
	// · SetTerminalPstricksSpecList: &plot.SetTerminalPstricksSpecList{
	// · · Case: 1,
	// · · SetTerminalPstricksSpecListItem: &plot.SetTerminalPstricksSpecListItem{
	// · · · Token: example1979.go:1:28: IDENTIFIER "hacktext",
	// · · },
	// · },
	// · SetTerminalPstricksSpecListItem: &plot.SetTerminalPstricksSpecListItem{
	// · · Token: example1979.go:1:19: IDENTIFIER "hacktext",
	// · },
	// }
}

func ExampleSetTerminalPstricksSpecListItem() {
	fmt.Println(exampleAST(1980, "set term pstricks hacktext"))
	// Output:
	// &plot.SetTerminalPstricksSpecListItem{
	// · Token: example1980.go:1:19: IDENTIFIER "hacktext",
	// }
}

func ExampleSetTerminalPstricksSpecListItem_case1() {
	fmt.Println(exampleAST(1981, "set term pstricks nohacktext"))
	// Output:
	// &plot.SetTerminalPstricksSpecListItem{
	// · Case: 1,
	// · Token: example1981.go:1:19: IDENTIFIER "nohacktext",
	// }
}

func ExampleSetTerminalPstricksSpecListItem_case2() {
	fmt.Println(exampleAST(1982, "set term pstricks unit"))
	// Output:
	// &plot.SetTerminalPstricksSpecListItem{
	// · Case: 2,
	// · Token: example1982.go:1:19: IDENTIFIER "unit",
	// }
}

func ExampleSetTerminalPstricksSpecListItem_case3() {
	fmt.Println(exampleAST(1983, "set term pstricks nounit"))
	// Output:
	// &plot.SetTerminalPstricksSpecListItem{
	// · Case: 3,
	// · Token: example1983.go:1:19: IDENTIFIER "nounit",
	// }
}

func ExampleSetTerminalPstricksSpecListOpt() {
	fmt.Println(exampleAST(1984, "set term pstricks") == (*SetTerminalPstricksSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalPstricksSpecListOpt_case1() {
	fmt.Println(exampleAST(1985, "set term pstricks hacktext"))
	// Output:
	// &plot.SetTerminalPstricksSpecListOpt{
	// · SetTerminalPstricksSpecList: &plot.SetTerminalPstricksSpecList{
	// · · SetTerminalPstricksSpecListItem: &plot.SetTerminalPstricksSpecListItem{
	// · · · Token: example1985.go:1:19: IDENTIFIER "hacktext",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalQtSpecList() {
	fmt.Println(exampleAST(1986, "set term qt ident_a"))
	// Output:
	// &plot.SetTerminalQtSpecList{
	// · SetTerminalQtSpecListItem: &plot.SetTerminalQtSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1986.go:1:13: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalQtSpecList_case1() {
	fmt.Println(exampleAST(1987, "set term qt ident_a ident_b"))
	// Output:
	// &plot.SetTerminalQtSpecList{
	// · SetTerminalQtSpecList: &plot.SetTerminalQtSpecList{
	// · · Case: 1,
	// · · SetTerminalQtSpecListItem: &plot.SetTerminalQtSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1987.go:1:21: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalQtSpecListItem: &plot.SetTerminalQtSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1987.go:1:13: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalQtSpecListItem() {
	fmt.Println(exampleAST(1988, "set term qt ident_a"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1988.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalQtSpecListItem_case01() {
	fmt.Println(exampleAST(1989, "set term qt size ident_a"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · Case: 1,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1989.go:1:18: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1989.go:1:13: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalQtSpecListItem_case02() {
	fmt.Println(exampleAST(1990, "set term qt position ident_a"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · Case: 2,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1990.go:1:22: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1990.go:1:13: IDENTIFIER "position",
	// }
}

func ExampleSetTerminalQtSpecListItem_case03() {
	fmt.Println(exampleAST(1991, "set term qt title ident_a"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1991.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1991.go:1:13: IDENTIFIER "title",
	// }
}

func ExampleSetTerminalQtSpecListItem_case04() {
	fmt.Println(exampleAST(1992, "set term qt font ident_a"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1992.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1992.go:1:13: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalQtSpecListItem_case05() {
	fmt.Println(exampleAST(1993, "set term qt enhanced"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · Case: 5,
	// · Token: example1993.go:1:13: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalQtSpecListItem_case06() {
	fmt.Println(exampleAST(1994, "set term qt noenhanced"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · Case: 6,
	// · Token: example1994.go:1:13: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTerminalQtSpecListItem_case07() {
	fmt.Println(exampleAST(1995, "set term qt dashlength ident_a"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1995.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1995.go:1:13: IDENTIFIER "dashlength",
	// }
}

func ExampleSetTerminalQtSpecListItem_case08() {
	fmt.Println(exampleAST(1996, "set term qt persist"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · Case: 8,
	// · Token: example1996.go:1:13: IDENTIFIER "persist",
	// }
}

func ExampleSetTerminalQtSpecListItem_case09() {
	fmt.Println(exampleAST(1997, "set term qt nopersist"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · Case: 9,
	// · Token: example1997.go:1:13: IDENTIFIER "nopersist",
	// }
}

func ExampleSetTerminalQtSpecListItem_case10() {
	fmt.Println(exampleAST(1998, "set term qt raise"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · Case: 10,
	// · Token: example1998.go:1:13: IDENTIFIER "raise",
	// }
}

func ExampleSetTerminalQtSpecListItem_case11() {
	fmt.Println(exampleAST(1999, "set term qt noraise"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · Case: 11,
	// · Token: example1999.go:1:13: IDENTIFIER "noraise",
	// }
}

func ExampleSetTerminalQtSpecListItem_case12() {
	fmt.Println(exampleAST(2000, "set term qt ctrl"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · Case: 12,
	// · Token: example2000.go:1:13: IDENTIFIER "ctrl",
	// }
}

func ExampleSetTerminalQtSpecListItem_case13() {
	fmt.Println(exampleAST(2001, "set term qt noctrl"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · Case: 13,
	// · Token: example2001.go:1:13: IDENTIFIER "noctrl",
	// }
}

func ExampleSetTerminalQtSpecListItem_case14() {
	fmt.Println(exampleAST(2002, "set term qt close"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · Case: 14,
	// · Token: example2002.go:1:13: IDENTIFIER "close",
	// }
}

func ExampleSetTerminalQtSpecListItem_case15() {
	fmt.Println(exampleAST(2003, "set term qt widget ident_a"))
	// Output:
	// &plot.SetTerminalQtSpecListItem{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2003.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2003.go:1:13: IDENTIFIER "widget",
	// }
}

func ExampleSetTerminalQtSpecListOpt() {
	fmt.Println(exampleAST(2004, "set term qt") == (*SetTerminalQtSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalQtSpecListOpt_case1() {
	fmt.Println(exampleAST(2005, "set term qt ident_a"))
	// Output:
	// &plot.SetTerminalQtSpecListOpt{
	// · SetTerminalQtSpecList: &plot.SetTerminalQtSpecList{
	// · · SetTerminalQtSpecListItem: &plot.SetTerminalQtSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2005.go:1:13: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalSpec() {
	fmt.Println(exampleAST(1401, "set term aifm"))
	// Output:
	// &plot.SetTerminalSpec{
	// · SetTerminalInner: &plot.SetTerminalInner{
	// · · Token: example1401.go:1:10: IDENTIFIER "aifm",
	// · },
	// }
}

func ExampleSetTerminalSpec_case1() {
	fmt.Println(exampleAST(1402, "set term push"))
	// Output:
	// &plot.SetTerminalSpec{
	// · Case: 1,
	// · Token: example1402.go:1:10: IDENTIFIER "push",
	// }
}

func ExampleSetTerminalSpec_case2() {
	fmt.Println(exampleAST(1403, "set term pop"))
	// Output:
	// &plot.SetTerminalSpec{
	// · Case: 2,
	// · Token: example1403.go:1:10: IDENTIFIER "pop",
	// }
}

func ExampleSetTerminalSvgSpecList() {
	fmt.Println(exampleAST(2006, "set term svg butt"))
	// Output:
	// &plot.SetTerminalSvgSpecList{
	// · SetTerminalSvgSpecListItem: &plot.SetTerminalSvgSpecListItem{
	// · · Case: 15,
	// · · Token: example2006.go:1:14: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalSvgSpecList_case1() {
	fmt.Println(exampleAST(2007, "set term svg butt butt"))
	// Output:
	// &plot.SetTerminalSvgSpecList{
	// · SetTerminalSvgSpecList: &plot.SetTerminalSvgSpecList{
	// · · Case: 1,
	// · · SetTerminalSvgSpecListItem: &plot.SetTerminalSvgSpecListItem{
	// · · · Case: 15,
	// · · · Token: example2007.go:1:19: IDENTIFIER "butt",
	// · · },
	// · },
	// · SetTerminalSvgSpecListItem: &plot.SetTerminalSvgSpecListItem{
	// · · Case: 15,
	// · · Token: example2007.go:1:14: IDENTIFIER "butt",
	// · },
	// }
}

func ExampleSetTerminalSvgSpecListItem() {
	fmt.Println(exampleAST(2008, "set term svg portrait"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Token: example2008.go:1:14: IDENTIFIER "portrait",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case01() {
	fmt.Println(exampleAST(2009, "set term svg size ident_a"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 1,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2009.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2009.go:1:14: IDENTIFIER "size",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case02() {
	fmt.Println(exampleAST(2010, "set term svg fixed"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 2,
	// · Token: example2010.go:1:14: IDENTIFIER "fixed",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case03() {
	fmt.Println(exampleAST(2011, "set term svg dynamic"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 3,
	// · Token: example2011.go:1:14: IDENTIFIER "dynamic",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case04() {
	fmt.Println(exampleAST(2012, "set term svg enhanced"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 4,
	// · Token: example2012.go:1:14: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case05() {
	fmt.Println(exampleAST(2013, "set term svg noenhanced"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 5,
	// · Token: example2013.go:1:14: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case06() {
	fmt.Println(exampleAST(2014, "set term svg fname ident_a"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2014.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2014.go:1:14: IDENTIFIER "fname",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case07() {
	fmt.Println(exampleAST(2015, "set term svg fsize ident_a"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2015.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2015.go:1:14: IDENTIFIER "fsize",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case08() {
	fmt.Println(exampleAST(2016, "set term svg mouse"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 8,
	// · Token: example2016.go:1:14: IDENTIFIER "mouse",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case09() {
	fmt.Println(exampleAST(2017, "set term svg standalone"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 9,
	// · Token: example2017.go:1:14: IDENTIFIER "standalone",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case10() {
	fmt.Println(exampleAST(2018, "set term svg jsdir ident_a"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2018.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2018.go:1:14: IDENTIFIER "jsdir",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case11() {
	fmt.Println(exampleAST(2019, "set term svg name ident_a"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2019.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2019.go:1:14: IDENTIFIER "name",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case12() {
	fmt.Println(exampleAST(2020, "set term svg font ident_a"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 12,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2020.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2020.go:1:14: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case13() {
	fmt.Println(exampleAST(2021, "set term svg fontfile ident_a"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 13,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2021.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2021.go:1:14: IDENTIFIER "fontfile",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case14() {
	fmt.Println(exampleAST(2022, "set term svg rounded"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 14,
	// · Token: example2022.go:1:14: IDENTIFIER "rounded",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case15() {
	fmt.Println(exampleAST(2023, "set term svg butt"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 15,
	// · Token: example2023.go:1:14: IDENTIFIER "butt",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case16() {
	fmt.Println(exampleAST(2024, "set term svg square"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 16,
	// · Token: example2024.go:1:14: IDENTIFIER "square",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case17() {
	fmt.Println(exampleAST(2025, "set term svg solid"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 17,
	// · Token: example2025.go:1:14: IDENTIFIER "solid",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case18() {
	fmt.Println(exampleAST(2026, "set term svg dashed"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 18,
	// · Token: example2026.go:1:14: IDENTIFIER "dashed",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case19() {
	fmt.Println(exampleAST(2027, "set term svg linewidth ident_a"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 19,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2027.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2027.go:1:14: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalSvgSpecListItem_case20() {
	fmt.Println(exampleAST(2028, "set term svg background ident_a"))
	// Output:
	// &plot.SetTerminalSvgSpecListItem{
	// · Case: 20,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2028.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2028.go:1:14: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalSvgSpecListOpt() {
	fmt.Println(exampleAST(2029, "set term svg") == (*SetTerminalSvgSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalSvgSpecListOpt_case1() {
	fmt.Println(exampleAST(2030, "set term svg butt"))
	// Output:
	// &plot.SetTerminalSvgSpecListOpt{
	// · SetTerminalSvgSpecList: &plot.SetTerminalSvgSpecList{
	// · · SetTerminalSvgSpecListItem: &plot.SetTerminalSvgSpecListItem{
	// · · · Case: 15,
	// · · · Token: example2030.go:1:14: IDENTIFIER "butt",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalTgifSpecList() {
	fmt.Println(exampleAST(2031, "set term tgif ident_a"))
	// Output:
	// &plot.SetTerminalTgifSpecList{
	// · SetTerminalTgifSpecListItem: &plot.SetTerminalTgifSpecListItem{
	// · · Case: 11,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2031.go:1:15: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalTgifSpecList_case1() {
	fmt.Println(exampleAST(2032, "set term tgif ident_a ident_b"))
	// Output:
	// &plot.SetTerminalTgifSpecList{
	// · SetTerminalTgifSpecList: &plot.SetTerminalTgifSpecList{
	// · · Case: 1,
	// · · SetTerminalTgifSpecListItem: &plot.SetTerminalTgifSpecListItem{
	// · · · Case: 11,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2032.go:1:23: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalTgifSpecListItem: &plot.SetTerminalTgifSpecListItem{
	// · · Case: 11,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2032.go:1:15: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalTgifSpecListItem() {
	fmt.Println(exampleAST(2033, "set term tgif portrait"))
	// Output:
	// &plot.SetTerminalTgifSpecListItem{
	// · Token: example2033.go:1:15: IDENTIFIER "portrait",
	// }
}

func ExampleSetTerminalTgifSpecListItem_case01() {
	fmt.Println(exampleAST(2034, "set term tgif landscape"))
	// Output:
	// &plot.SetTerminalTgifSpecListItem{
	// · Case: 1,
	// · Token: example2034.go:1:15: IDENTIFIER "landscape",
	// }
}

func ExampleSetTerminalTgifSpecListItem_case02() {
	fmt.Println(exampleAST(2035, "set term tgif default"))
	// Output:
	// &plot.SetTerminalTgifSpecListItem{
	// · Case: 2,
	// · Token: example2035.go:1:15: IDENTIFIER "default",
	// }
}

func ExampleSetTerminalTgifSpecListItem_case03() {
	fmt.Println(exampleAST(2036, "set term tgif [ ident_a ]"))
	// Output:
	// &plot.SetTerminalTgifSpecListItem{
	// · Case: 3,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2036.go:1:17: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2036.go:1:15: '[' "[",
	// · Token2: example2036.go:1:25: ']' "]",
	// }
}

func ExampleSetTerminalTgifSpecListItem_case04() {
	fmt.Println(exampleAST(2037, "set term tgif monochrome"))
	// Output:
	// &plot.SetTerminalTgifSpecListItem{
	// · Case: 4,
	// · Token: example2037.go:1:15: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalTgifSpecListItem_case05() {
	fmt.Println(exampleAST(2038, "set term tgif color"))
	// Output:
	// &plot.SetTerminalTgifSpecListItem{
	// · Case: 5,
	// · Token: example2038.go:1:15: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalTgifSpecListItem_case06() {
	fmt.Println(exampleAST(2039, "set term tgif linewdith ident_a"))
	// Output:
	// &plot.SetTerminalTgifSpecListItem{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2039.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2039.go:1:15: IDENTIFIER "linewdith",
	// }
}

func ExampleSetTerminalTgifSpecListItem_case07() {
	fmt.Println(exampleAST(2040, "set term tgif lw ident_a"))
	// Output:
	// &plot.SetTerminalTgifSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2040.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2040.go:1:15: IDENTIFIER "lw",
	// }
}

func ExampleSetTerminalTgifSpecListItem_case08() {
	fmt.Println(exampleAST(2041, "set term tgif solid"))
	// Output:
	// &plot.SetTerminalTgifSpecListItem{
	// · Case: 8,
	// · Token: example2041.go:1:15: IDENTIFIER "solid",
	// }
}

func ExampleSetTerminalTgifSpecListItem_case09() {
	fmt.Println(exampleAST(2042, "set term tgif dashed"))
	// Output:
	// &plot.SetTerminalTgifSpecListItem{
	// · Case: 9,
	// · Token: example2042.go:1:15: IDENTIFIER "dashed",
	// }
}

func ExampleSetTerminalTgifSpecListItem_case10() {
	fmt.Println(exampleAST(2043, "set term tgif font ident_a"))
	// Output:
	// &plot.SetTerminalTgifSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2043.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2043.go:1:15: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalTgifSpecListItem_case11() {
	fmt.Println(exampleAST(2044, "set term tgif ident_a"))
	// Output:
	// &plot.SetTerminalTgifSpecListItem{
	// · Case: 11,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2044.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalTgifSpecListOpt() {
	fmt.Println(exampleAST(2045, "set term tgif") == (*SetTerminalTgifSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalTgifSpecListOpt_case1() {
	fmt.Println(exampleAST(2046, "set term tgif ident_a"))
	// Output:
	// &plot.SetTerminalTgifSpecListOpt{
	// · SetTerminalTgifSpecList: &plot.SetTerminalTgifSpecList{
	// · · SetTerminalTgifSpecListItem: &plot.SetTerminalTgifSpecListItem{
	// · · · Case: 11,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2046.go:1:15: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalTkcanvasSpecList() {
	fmt.Println(exampleAST(2047, "set term tkcanvas interactive"))
	// Output:
	// &plot.SetTerminalTkcanvasSpecList{
	// · SetTerminalTkcanvasSpecListItem: &plot.SetTerminalTkcanvasSpecListItem{
	// · · Case: 1,
	// · · Token: example2047.go:1:19: IDENTIFIER "interactive",
	// · },
	// }
}

func ExampleSetTerminalTkcanvasSpecList_case1() {
	fmt.Println(exampleAST(2048, "set term tkcanvas interactive interactive"))
	// Output:
	// &plot.SetTerminalTkcanvasSpecList{
	// · SetTerminalTkcanvasSpecList: &plot.SetTerminalTkcanvasSpecList{
	// · · Case: 1,
	// · · SetTerminalTkcanvasSpecListItem: &plot.SetTerminalTkcanvasSpecListItem{
	// · · · Case: 1,
	// · · · Token: example2048.go:1:31: IDENTIFIER "interactive",
	// · · },
	// · },
	// · SetTerminalTkcanvasSpecListItem: &plot.SetTerminalTkcanvasSpecListItem{
	// · · Case: 1,
	// · · Token: example2048.go:1:19: IDENTIFIER "interactive",
	// · },
	// }
}

func ExampleSetTerminalTkcanvasSpecListItem() {
	fmt.Println(exampleAST(2049, "set term tkcanvas perltk"))
	// Output:
	// &plot.SetTerminalTkcanvasSpecListItem{
	// · Token: example2049.go:1:19: IDENTIFIER "perltk",
	// }
}

func ExampleSetTerminalTkcanvasSpecListItem_case1() {
	fmt.Println(exampleAST(2050, "set term tkcanvas interactive"))
	// Output:
	// &plot.SetTerminalTkcanvasSpecListItem{
	// · Case: 1,
	// · Token: example2050.go:1:19: IDENTIFIER "interactive",
	// }
}

func ExampleSetTerminalTkcanvasSpecListOpt() {
	fmt.Println(exampleAST(2051, "set term tkcanvas") == (*SetTerminalTkcanvasSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalTkcanvasSpecListOpt_case1() {
	fmt.Println(exampleAST(2052, "set term tkcanvas interactive"))
	// Output:
	// &plot.SetTerminalTkcanvasSpecListOpt{
	// · SetTerminalTkcanvasSpecList: &plot.SetTerminalTkcanvasSpecList{
	// · · SetTerminalTkcanvasSpecListItem: &plot.SetTerminalTkcanvasSpecListItem{
	// · · · Case: 1,
	// · · · Token: example2052.go:1:19: IDENTIFIER "interactive",
	// · · },
	// · },
	// }
}

func ExampleSetTerminalVgaglSpecList() {
	fmt.Println(exampleAST(2053, "set term vgagl ident_a"))
	// Output:
	// &plot.SetTerminalVgaglSpecList{
	// · SetTerminalVgaglSpecListItem: &plot.SetTerminalVgaglSpecListItem{
	// · · Case: 3,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2053.go:1:16: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalVgaglSpecList_case1() {
	fmt.Println(exampleAST(2054, "set term vgagl ident_a ident_b"))
	// Output:
	// &plot.SetTerminalVgaglSpecList{
	// · SetTerminalVgaglSpecList: &plot.SetTerminalVgaglSpecList{
	// · · Case: 1,
	// · · SetTerminalVgaglSpecListItem: &plot.SetTerminalVgaglSpecListItem{
	// · · · Case: 3,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2054.go:1:24: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalVgaglSpecListItem: &plot.SetTerminalVgaglSpecListItem{
	// · · Case: 3,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2054.go:1:16: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalVgaglSpecListItem() {
	fmt.Println(exampleAST(2055, "set term vgagl background ident_a"))
	// Output:
	// &plot.SetTerminalVgaglSpecListItem{
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2055.go:1:27: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2055.go:1:16: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalVgaglSpecListItem_case1() {
	fmt.Println(exampleAST(2056, "set term vgagl uniform"))
	// Output:
	// &plot.SetTerminalVgaglSpecListItem{
	// · Case: 1,
	// · Token: example2056.go:1:16: IDENTIFIER "uniform",
	// }
}

func ExampleSetTerminalVgaglSpecListItem_case2() {
	fmt.Println(exampleAST(2057, "set term vgagl interpolate"))
	// Output:
	// &plot.SetTerminalVgaglSpecListItem{
	// · Case: 2,
	// · Token: example2057.go:1:16: IDENTIFIER "interpolate",
	// }
}

func ExampleSetTerminalVgaglSpecListItem_case3() {
	fmt.Println(exampleAST(2058, "set term vgagl ident_a"))
	// Output:
	// &plot.SetTerminalVgaglSpecListItem{
	// · Case: 3,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2058.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalVgaglSpecListOpt() {
	fmt.Println(exampleAST(2059, "set term vgagl") == (*SetTerminalVgaglSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalVgaglSpecListOpt_case1() {
	fmt.Println(exampleAST(2060, "set term vgagl ident_a"))
	// Output:
	// &plot.SetTerminalVgaglSpecListOpt{
	// · SetTerminalVgaglSpecList: &plot.SetTerminalVgaglSpecList{
	// · · SetTerminalVgaglSpecListItem: &plot.SetTerminalVgaglSpecListItem{
	// · · · Case: 3,
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2060.go:1:16: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalWindowsSpecList() {
	fmt.Println(exampleAST(2061, "set term windows ident_a"))
	// Output:
	// &plot.SetTerminalWindowsSpecList{
	// · SetTerminalWindowsSpecListItem: &plot.SetTerminalWindowsSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2061.go:1:18: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalWindowsSpecList_case1() {
	fmt.Println(exampleAST(2062, "set term windows ident_a ident_b"))
	// Output:
	// &plot.SetTerminalWindowsSpecList{
	// · SetTerminalWindowsSpecList: &plot.SetTerminalWindowsSpecList{
	// · · Case: 1,
	// · · SetTerminalWindowsSpecListItem: &plot.SetTerminalWindowsSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2062.go:1:26: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalWindowsSpecListItem: &plot.SetTerminalWindowsSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2062.go:1:18: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalWindowsSpecListItem() {
	fmt.Println(exampleAST(2063, "set term windows ident_a"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2063.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case01() {
	fmt.Println(exampleAST(2064, "set term windows color"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 1,
	// · Token: example2064.go:1:18: IDENTIFIER "color",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case02() {
	fmt.Println(exampleAST(2065, "set term windows monochrome"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 2,
	// · Token: example2065.go:1:18: IDENTIFIER "monochrome",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case03() {
	fmt.Println(exampleAST(2066, "set term windows solid"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 3,
	// · Token: example2066.go:1:18: IDENTIFIER "solid",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case04() {
	fmt.Println(exampleAST(2067, "set term windows dashed"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 4,
	// · Token: example2067.go:1:18: IDENTIFIER "dashed",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case05() {
	fmt.Println(exampleAST(2068, "set term windows rounded"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 5,
	// · Token: example2068.go:1:18: IDENTIFIER "rounded",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case06() {
	fmt.Println(exampleAST(2069, "set term windows butt"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 6,
	// · Token: example2069.go:1:18: IDENTIFIER "butt",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case07() {
	fmt.Println(exampleAST(2070, "set term windows enhanced"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 7,
	// · Token: example2070.go:1:18: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case08() {
	fmt.Println(exampleAST(2071, "set term windows noenhanced"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 8,
	// · Token: example2071.go:1:18: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case09() {
	fmt.Println(exampleAST(2072, "set term windows font ident_a"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 9,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2072.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2072.go:1:18: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case10() {
	fmt.Println(exampleAST(2073, "set term windows fontscale ident_a"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2073.go:1:28: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2073.go:1:18: IDENTIFIER "fontscale",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case11() {
	fmt.Println(exampleAST(2074, "set term windows linewidth ident_a"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2074.go:1:28: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2074.go:1:18: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case12() {
	fmt.Println(exampleAST(2075, "set term windows background ident_a"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 12,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2075.go:1:29: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2075.go:1:18: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case13() {
	fmt.Println(exampleAST(2076, "set term windows title ident_a"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 13,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2076.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2076.go:1:18: IDENTIFIER "title",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case14() {
	fmt.Println(exampleAST(2077, "set term windows size ident_a , ident_b"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 14,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2077.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2077.go:1:33: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2077.go:1:18: IDENTIFIER "size",
	// · Token2: example2077.go:1:31: ',' ",",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case15() {
	fmt.Println(exampleAST(2078, "set term windows wsize ident_a , ident_b"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2078.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2078.go:1:34: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2078.go:1:18: IDENTIFIER "wsize",
	// · Token2: example2078.go:1:32: ',' ",",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case16() {
	fmt.Println(exampleAST(2079, "set term windows position ident_a , ident_b"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 16,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2079.go:1:27: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2079.go:1:37: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2079.go:1:18: IDENTIFIER "position",
	// · Token2: example2079.go:1:35: ',' ",",
	// }
}

func ExampleSetTerminalWindowsSpecListItem_case17() {
	fmt.Println(exampleAST(2080, "set term windows close"))
	// Output:
	// &plot.SetTerminalWindowsSpecListItem{
	// · Case: 17,
	// · Token: example2080.go:1:18: IDENTIFIER "close",
	// }
}

func ExampleSetTerminalWindowsSpecListOpt() {
	fmt.Println(exampleAST(2081, "set term windows") == (*SetTerminalWindowsSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalWindowsSpecListOpt_case1() {
	fmt.Println(exampleAST(2082, "set term windows ident_a"))
	// Output:
	// &plot.SetTerminalWindowsSpecListOpt{
	// · SetTerminalWindowsSpecList: &plot.SetTerminalWindowsSpecList{
	// · · SetTerminalWindowsSpecListItem: &plot.SetTerminalWindowsSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2082.go:1:18: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalWxtSpecList() {
	fmt.Println(exampleAST(2083, "set term wxt ident_a"))
	// Output:
	// &plot.SetTerminalWxtSpecList{
	// · SetTerminalWxtSpecListItem: &plot.SetTerminalWxtSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2083.go:1:14: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalWxtSpecList_case1() {
	fmt.Println(exampleAST(2084, "set term wxt ident_a ident_b"))
	// Output:
	// &plot.SetTerminalWxtSpecList{
	// · SetTerminalWxtSpecList: &plot.SetTerminalWxtSpecList{
	// · · Case: 1,
	// · · SetTerminalWxtSpecListItem: &plot.SetTerminalWxtSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2084.go:1:22: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalWxtSpecListItem: &plot.SetTerminalWxtSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2084.go:1:14: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalWxtSpecListItem() {
	fmt.Println(exampleAST(2085, "set term wxt ident_a"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2085.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalWxtSpecListItem_case01() {
	fmt.Println(exampleAST(2086, "set term wxt size ident_a , ident_b"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2086.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2086.go:1:29: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2086.go:1:14: IDENTIFIER "size",
	// · Token2: example2086.go:1:27: ',' ",",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case02() {
	fmt.Println(exampleAST(2087, "set term wxt position ident_a , ident_b"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2087.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2087.go:1:33: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2087.go:1:14: IDENTIFIER "position",
	// · Token2: example2087.go:1:31: ',' ",",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case03() {
	fmt.Println(exampleAST(2088, "set term wxt background ident_a"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2088.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2088.go:1:14: IDENTIFIER "background",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case04() {
	fmt.Println(exampleAST(2089, "set term wxt enhanced"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 4,
	// · Token: example2089.go:1:14: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case05() {
	fmt.Println(exampleAST(2090, "set term wxt noenhanced"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 5,
	// · Token: example2090.go:1:14: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case06() {
	fmt.Println(exampleAST(2091, "set term wxt font ident_a"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2091.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2091.go:1:14: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case07() {
	fmt.Println(exampleAST(2092, "set term wxt fontscale ident_a"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2092.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2092.go:1:14: IDENTIFIER "fontscale",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case08() {
	fmt.Println(exampleAST(2093, "set term wxt title ident_a"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 8,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2093.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2093.go:1:14: IDENTIFIER "title",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case09() {
	fmt.Println(exampleAST(2094, "set term wxt linewidth ident_a"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 9,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2094.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2094.go:1:14: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case10() {
	fmt.Println(exampleAST(2095, "set term wxt dashlength ident_a"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 10,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2095.go:1:25: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2095.go:1:14: IDENTIFIER "dashlength",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case11() {
	fmt.Println(exampleAST(2096, "set term wxt persist"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 11,
	// · Token: example2096.go:1:14: IDENTIFIER "persist",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case12() {
	fmt.Println(exampleAST(2097, "set term wxt nopersist"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 12,
	// · Token: example2097.go:1:14: IDENTIFIER "nopersist",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case13() {
	fmt.Println(exampleAST(2098, "set term wxt raise"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 13,
	// · Token: example2098.go:1:14: IDENTIFIER "raise",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case14() {
	fmt.Println(exampleAST(2099, "set term wxt noraise"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 14,
	// · Token: example2099.go:1:14: IDENTIFIER "noraise",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case15() {
	fmt.Println(exampleAST(2100, "set term wxt ctrl"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 15,
	// · Token: example2100.go:1:14: IDENTIFIER "ctrl",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case16() {
	fmt.Println(exampleAST(2101, "set term wxt noctrl"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 16,
	// · Token: example2101.go:1:14: IDENTIFIER "noctrl",
	// }
}

func ExampleSetTerminalWxtSpecListItem_case17() {
	fmt.Println(exampleAST(2102, "set term wxt close"))
	// Output:
	// &plot.SetTerminalWxtSpecListItem{
	// · Case: 17,
	// · Token: example2102.go:1:14: IDENTIFIER "close",
	// }
}

func ExampleSetTerminalWxtSpecListOpt() {
	fmt.Println(exampleAST(2103, "set term wxt") == (*SetTerminalWxtSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalWxtSpecListOpt_case1() {
	fmt.Println(exampleAST(2104, "set term wxt ident_a"))
	// Output:
	// &plot.SetTerminalWxtSpecListOpt{
	// · SetTerminalWxtSpecList: &plot.SetTerminalWxtSpecList{
	// · · SetTerminalWxtSpecListItem: &plot.SetTerminalWxtSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2104.go:1:14: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalX11SpecList() {
	fmt.Println(exampleAST(2105, "set term x11 ident_a"))
	// Output:
	// &plot.SetTerminalX11SpecList{
	// · SetTerminalX11SpecListItem: &plot.SetTerminalX11SpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2105.go:1:14: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalX11SpecList_case1() {
	fmt.Println(exampleAST(2106, "set term x11 ident_a ident_b"))
	// Output:
	// &plot.SetTerminalX11SpecList{
	// · SetTerminalX11SpecList: &plot.SetTerminalX11SpecList{
	// · · Case: 1,
	// · · SetTerminalX11SpecListItem: &plot.SetTerminalX11SpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2106.go:1:22: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTerminalX11SpecListItem: &plot.SetTerminalX11SpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2106.go:1:14: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalX11SpecListItem() {
	fmt.Println(exampleAST(2107, "set term x11 ident_a"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2107.go:1:14: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTerminalX11SpecListItem_case01() {
	fmt.Println(exampleAST(2108, "set term x11 window ident_a"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2108.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2108.go:1:14: IDENTIFIER "window",
	// }
}

func ExampleSetTerminalX11SpecListItem_case02() {
	fmt.Println(exampleAST(2109, "set term x11 enhanced"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 2,
	// · Token: example2109.go:1:14: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTerminalX11SpecListItem_case03() {
	fmt.Println(exampleAST(2110, "set term x11 noenhanced"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 3,
	// · Token: example2110.go:1:14: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTerminalX11SpecListItem_case04() {
	fmt.Println(exampleAST(2111, "set term x11 font ident_a"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 4,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2111.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2111.go:1:14: IDENTIFIER "font",
	// }
}

func ExampleSetTerminalX11SpecListItem_case05() {
	fmt.Println(exampleAST(2112, "set term x11 linewidth ident_a"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 5,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2112.go:1:24: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2112.go:1:14: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTerminalX11SpecListItem_case06() {
	fmt.Println(exampleAST(2113, "set term x11 persist"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 6,
	// · Token: example2113.go:1:14: IDENTIFIER "persist",
	// }
}

func ExampleSetTerminalX11SpecListItem_case07() {
	fmt.Println(exampleAST(2114, "set term x11 nopersist"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 7,
	// · Token: example2114.go:1:14: IDENTIFIER "nopersist",
	// }
}

func ExampleSetTerminalX11SpecListItem_case08() {
	fmt.Println(exampleAST(2115, "set term x11 raise"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 8,
	// · Token: example2115.go:1:14: IDENTIFIER "raise",
	// }
}

func ExampleSetTerminalX11SpecListItem_case09() {
	fmt.Println(exampleAST(2116, "set term x11 noraise"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 9,
	// · Token: example2116.go:1:14: IDENTIFIER "noraise",
	// }
}

func ExampleSetTerminalX11SpecListItem_case10() {
	fmt.Println(exampleAST(2117, "set term x11 ctrlq"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 10,
	// · Token: example2117.go:1:14: IDENTIFIER "ctrlq",
	// }
}

func ExampleSetTerminalX11SpecListItem_case11() {
	fmt.Println(exampleAST(2118, "set term x11 noctrlq"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 11,
	// · Token: example2118.go:1:14: IDENTIFIER "noctrlq",
	// }
}

func ExampleSetTerminalX11SpecListItem_case12() {
	fmt.Println(exampleAST(2119, "set term x11 replotonresize"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 12,
	// · Token: example2119.go:1:14: IDENTIFIER "replotonresize",
	// }
}

func ExampleSetTerminalX11SpecListItem_case13() {
	fmt.Println(exampleAST(2120, "set term x11 noreplotonresize"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 13,
	// · Token: example2120.go:1:14: IDENTIFIER "noreplotonresize",
	// }
}

func ExampleSetTerminalX11SpecListItem_case14() {
	fmt.Println(exampleAST(2121, "set term x11 close"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 14,
	// · Token: example2121.go:1:14: IDENTIFIER "close",
	// }
}

func ExampleSetTerminalX11SpecListItem_case15() {
	fmt.Println(exampleAST(2122, "set term x11 size ident_a , ident_b"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 15,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2122.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2122.go:1:29: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2122.go:1:14: IDENTIFIER "size",
	// · Token2: example2122.go:1:27: ',' ",",
	// }
}

func ExampleSetTerminalX11SpecListItem_case16() {
	fmt.Println(exampleAST(2123, "set term x11 position ident_a , ident_b"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 16,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2123.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2123.go:1:33: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2123.go:1:14: IDENTIFIER "position",
	// · Token2: example2123.go:1:31: ',' ",",
	// }
}

func ExampleSetTerminalX11SpecListItem_case17() {
	fmt.Println(exampleAST(2124, "set term x11 reset"))
	// Output:
	// &plot.SetTerminalX11SpecListItem{
	// · Case: 17,
	// · Token: example2124.go:1:14: IDENTIFIER "reset",
	// }
}

func ExampleSetTerminalX11SpecListOpt() {
	fmt.Println(exampleAST(2125, "set term x11") == (*SetTerminalX11SpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTerminalX11SpecListOpt_case1() {
	fmt.Println(exampleAST(2126, "set term x11 ident_a"))
	// Output:
	// &plot.SetTerminalX11SpecListOpt{
	// · SetTerminalX11SpecList: &plot.SetTerminalX11SpecList{
	// · · SetTerminalX11SpecListItem: &plot.SetTerminalX11SpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2126.go:1:14: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTermoptionSpec() {
	fmt.Println(exampleAST(2228, "set termoption enhanced"))
	// Output:
	// &plot.SetTermoptionSpec{
	// · Token: example2228.go:1:16: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTermoptionSpec_case1() {
	fmt.Println(exampleAST(2229, "set termoption noenhanced"))
	// Output:
	// &plot.SetTermoptionSpec{
	// · Case: 1,
	// · Token: example2229.go:1:16: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTermoptionSpec_case2() {
	fmt.Println(exampleAST(2230, "set termoption font ident_a"))
	// Output:
	// &plot.SetTermoptionSpec{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2230.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2230.go:1:16: IDENTIFIER "font",
	// }
}

func ExampleSetTermoptionSpec_case3() {
	fmt.Println(exampleAST(2231, "set termoption fontscale ident_a"))
	// Output:
	// &plot.SetTermoptionSpec{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2231.go:1:26: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2231.go:1:16: IDENTIFIER "fontscale",
	// }
}

func ExampleSetTermoptionSpec_case4() {
	fmt.Println(exampleAST(2232, "set termoption solid"))
	// Output:
	// &plot.SetTermoptionSpec{
	// · Case: 4,
	// · Token: example2232.go:1:16: IDENTIFIER "solid",
	// }
}

func ExampleSetTermoptionSpec_case5() {
	fmt.Println(exampleAST(2233, "set termoption dash"))
	// Output:
	// &plot.SetTermoptionSpec{
	// · Case: 5,
	// · Token: example2233.go:1:16: IDENTIFIER "dash",
	// }
}

func ExampleSetTermoptionSpec_case6() {
	fmt.Println(exampleAST(2234, "set termoption dashed"))
	// Output:
	// &plot.SetTermoptionSpec{
	// · Case: 6,
	// · Token: example2234.go:1:16: IDENTIFIER "dashed",
	// }
}

func ExampleSetTermoptionSpec_case7() {
	fmt.Println(exampleAST(2235, "set termoption linewidth ident_a"))
	// Output:
	// &plot.SetTermoptionSpec{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2235.go:1:26: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2235.go:1:16: IDENTIFIER "linewidth",
	// }
}

func ExampleSetTermoptionSpec_case8() {
	fmt.Println(exampleAST(2236, "set termoption lw ident_a"))
	// Output:
	// &plot.SetTermoptionSpec{
	// · Case: 8,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2236.go:1:19: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2236.go:1:16: IDENTIFIER "lw",
	// }
}

func ExampleSetTimestampSpecList() {
	fmt.Println(exampleAST(1373, "set timestamp ident_a"))
	// Output:
	// &plot.SetTimestampSpecList{
	// · SetTimestampSpecListItem: &plot.SetTimestampSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1373.go:1:15: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTimestampSpecList_case1() {
	fmt.Println(exampleAST(1374, "set timestamp ident_a ident_b"))
	// Output:
	// &plot.SetTimestampSpecList{
	// · SetTimestampSpecList: &plot.SetTimestampSpecList{
	// · · Case: 1,
	// · · SetTimestampSpecListItem: &plot.SetTimestampSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1374.go:1:23: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTimestampSpecListItem: &plot.SetTimestampSpecListItem{
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1374.go:1:15: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTimestampSpecListItem() {
	fmt.Println(exampleAST(1375, "set timestamp ident_a"))
	// Output:
	// &plot.SetTimestampSpecListItem{
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1375.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTimestampSpecListItem_case1() {
	fmt.Println(exampleAST(1376, "set timestamp top"))
	// Output:
	// &plot.SetTimestampSpecListItem{
	// · Case: 1,
	// · Token: example1376.go:1:15: IDENTIFIER "top",
	// }
}

func ExampleSetTimestampSpecListItem_case2() {
	fmt.Println(exampleAST(1377, "set timestamp bottom"))
	// Output:
	// &plot.SetTimestampSpecListItem{
	// · Case: 2,
	// · Token: example1377.go:1:15: IDENTIFIER "bottom",
	// }
}

func ExampleSetTimestampSpecListItem_case3() {
	fmt.Println(exampleAST(1378, "set timestamp rotate"))
	// Output:
	// &plot.SetTimestampSpecListItem{
	// · Case: 3,
	// · Token: example1378.go:1:15: IDENTIFIER "rotate",
	// }
}

func ExampleSetTimestampSpecListItem_case4() {
	fmt.Println(exampleAST(1379, "set timestamp norotate"))
	// Output:
	// &plot.SetTimestampSpecListItem{
	// · Case: 4,
	// · Token: example1379.go:1:15: IDENTIFIER "norotate",
	// }
}

func ExampleSetTimestampSpecListItem_case5() {
	fmt.Println(exampleAST(1380, "set timestamp offset ident_a"))
	// Output:
	// &plot.SetTimestampSpecListItem{
	// · Case: 5,
	// · ExpressionList: &plot.ExpressionList{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1380.go:1:22: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1380.go:1:15: IDENTIFIER "offset",
	// }
}

func ExampleSetTimestampSpecListItem_case6() {
	fmt.Println(exampleAST(1381, "set timestamp font ident_a"))
	// Output:
	// &plot.SetTimestampSpecListItem{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1381.go:1:20: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1381.go:1:15: IDENTIFIER "font",
	// }
}

func ExampleSetTimestampSpecListItem_case7() {
	fmt.Println(exampleAST(1382, "set timestamp textcolor ident_a"))
	// Output:
	// &plot.SetTimestampSpecListItem{
	// · Case: 7,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1382.go:1:25: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1382.go:1:15: IDENTIFIER "textcolor",
	// }
}

func ExampleSetTimestampSpecListOpt() {
	fmt.Println(exampleAST(1383, "set timestamp") == (*SetTimestampSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetTimestampSpecListOpt_case1() {
	fmt.Println(exampleAST(1384, "set timestamp ident_a"))
	// Output:
	// &plot.SetTimestampSpecListOpt{
	// · SetTimestampSpecList: &plot.SetTimestampSpecList{
	// · · SetTimestampSpecListItem: &plot.SetTimestampSpecListItem{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example1384.go:1:15: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTitleSpecList() {
	fmt.Println(exampleAST(1389, "set title enhanced"))
	// Output:
	// &plot.SetTitleSpecList{
	// · SetTitleSpecListItem: &plot.SetTitleSpecListItem{
	// · · Case: 8,
	// · · Token: example1389.go:1:11: IDENTIFIER "enhanced",
	// · },
	// }
}

func ExampleSetTitleSpecList_case1() {
	fmt.Println(exampleAST(1390, "set title enhanced enhanced"))
	// Output:
	// &plot.SetTitleSpecList{
	// · SetTitleSpecList: &plot.SetTitleSpecList{
	// · · Case: 1,
	// · · SetTitleSpecListItem: &plot.SetTitleSpecListItem{
	// · · · Case: 8,
	// · · · Token: example1390.go:1:20: IDENTIFIER "enhanced",
	// · · },
	// · },
	// · SetTitleSpecListItem: &plot.SetTitleSpecListItem{
	// · · Case: 8,
	// · · Token: example1390.go:1:11: IDENTIFIER "enhanced",
	// · },
	// }
}

func ExampleSetTitleSpecListItem() {
	fmt.Println(exampleAST(1391, "set title offset ident_a"))
	// Output:
	// &plot.SetTitleSpecListItem{
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1391.go:1:18: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1391.go:1:11: IDENTIFIER "offset",
	// }
}

func ExampleSetTitleSpecListItem_case01() {
	fmt.Println(exampleAST(1392, "set title font ident_a"))
	// Output:
	// &plot.SetTitleSpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1392.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1392.go:1:11: IDENTIFIER "font",
	// }
}

func ExampleSetTitleSpecListItem_case02() {
	fmt.Println(exampleAST(1393, "set title textcolor ident_a"))
	// Output:
	// &plot.SetTitleSpecListItem{
	// · Case: 2,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1393.go:1:21: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1393.go:1:11: IDENTIFIER "textcolor",
	// }
}

func ExampleSetTitleSpecListItem_case03() {
	fmt.Println(exampleAST(1394, "set title textcolor lt ident_a"))
	// Output:
	// &plot.SetTitleSpecListItem{
	// · Case: 3,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1394.go:1:24: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1394.go:1:11: IDENTIFIER "textcolor",
	// · Token2: example1394.go:1:21: IDENTIFIER "lt",
	// }
}

func ExampleSetTitleSpecListItem_case04() {
	fmt.Println(exampleAST(1395, "set title tc ident_a"))
	// Output:
	// &plot.SetTitleSpecListItem{
	// · Case: 4,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1395.go:1:14: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1395.go:1:11: IDENTIFIER "tc",
	// }
}

func ExampleSetTitleSpecListItem_case05() {
	fmt.Println(exampleAST(1396, "set title tc lt ident_a"))
	// Output:
	// &plot.SetTitleSpecListItem{
	// · Case: 5,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example1396.go:1:17: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example1396.go:1:11: IDENTIFIER "tc",
	// · Token2: example1396.go:1:14: IDENTIFIER "lt",
	// }
}

func ExampleSetTitleSpecListItem_case06() {
	fmt.Println(exampleAST(1397, "set title textcolor default"))
	// Output:
	// &plot.SetTitleSpecListItem{
	// · Case: 6,
	// · Token: example1397.go:1:11: IDENTIFIER "textcolor",
	// · Token2: example1397.go:1:21: IDENTIFIER "default",
	// }
}

func ExampleSetTitleSpecListItem_case07() {
	fmt.Println(exampleAST(1398, "set title tc default"))
	// Output:
	// &plot.SetTitleSpecListItem{
	// · Case: 7,
	// · Token: example1398.go:1:11: IDENTIFIER "tc",
	// · Token2: example1398.go:1:14: IDENTIFIER "default",
	// }
}

func ExampleSetTitleSpecListItem_case08() {
	fmt.Println(exampleAST(1399, "set title enhanced"))
	// Output:
	// &plot.SetTitleSpecListItem{
	// · Case: 8,
	// · Token: example1399.go:1:11: IDENTIFIER "enhanced",
	// }
}

func ExampleSetTitleSpecListItem_case09() {
	fmt.Println(exampleAST(1400, "set title noenhanced"))
	// Output:
	// &plot.SetTitleSpecListItem{
	// · Case: 9,
	// · Token: example1400.go:1:11: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetTitleSpecOpt() {
	fmt.Println(exampleAST(1385, "set title") == (*SetTitleSpecOpt)(nil))
	// Output:
	// true
}

func ExampleSetTitleSpecOpt_case1() {
	fmt.Println(exampleAST(1386, "set title ident_a"))
	// Output:
	// &plot.SetTitleSpecOpt{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1386.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetTitleSpecOpt_case2() {
	fmt.Println(exampleAST(1387, "set title ident_a enhanced"))
	// Output:
	// &plot.SetTitleSpecOpt{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example1387.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetTitleSpecList: &plot.SetTitleSpecList{
	// · · SetTitleSpecListItem: &plot.SetTitleSpecListItem{
	// · · · Case: 8,
	// · · · Token: example1387.go:1:19: IDENTIFIER "enhanced",
	// · · },
	// · },
	// }
}

func ExampleSetTitleSpecOpt_case3() {
	fmt.Println(exampleAST(1388, "set title enhanced"))
	// Output:
	// &plot.SetTitleSpecOpt{
	// · Case: 3,
	// · SetTitleSpecList: &plot.SetTitleSpecList{
	// · · SetTitleSpecListItem: &plot.SetTitleSpecListItem{
	// · · · Case: 8,
	// · · · Token: example1388.go:1:11: IDENTIFIER "enhanced",
	// · · },
	// · },
	// }
}

func ExampleSetViewSpec() {
	fmt.Println(exampleAST(2282, "set vi 1, 2, 3, 4"))
	// Output:
	// &plot.SetViewSpec{
	// · ExpressionOptList: &plot.ExpressionOptList{
	// · · Case: 1,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 2,
	// · · · · · · Token: example2282.go:1:8: NUM_LIT "1",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · ExpressionOptList: &plot.ExpressionOptList{
	// · · · Case: 3,
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 2,
	// · · · · · · · Token: example2282.go:1:11: NUM_LIT "2",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · · ExpressionOptList: &plot.ExpressionOptList{
	// · · · · Case: 3,
	// · · · · Expression: &plot.Expression{
	// · · · · · Case: 24,
	// · · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · · Operand: &plot.Operand{
	// · · · · · · · · Case: 2,
	// · · · · · · · · Token: example2282.go:1:14: NUM_LIT "3",
	// · · · · · · · },
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · · ExpressionOptList: &plot.ExpressionOptList{
	// · · · · · Case: 3,
	// · · · · · Expression: &plot.Expression{
	// · · · · · · Case: 24,
	// · · · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · · · Operand: &plot.Operand{
	// · · · · · · · · · Case: 2,
	// · · · · · · · · · Token: example2282.go:1:17: NUM_LIT "4",
	// · · · · · · · · },
	// · · · · · · · },
	// · · · · · · },
	// · · · · · },
	// · · · · · Token: example2282.go:1:15: ',' ",",
	// · · · · },
	// · · · · Token: example2282.go:1:12: ',' ",",
	// · · · },
	// · · · Token: example2282.go:1:9: ',' ",",
	// · · },
	// · },
	// }
}

func ExampleSetViewSpec_case1() {
	fmt.Println(exampleAST(2283, "set vi map"))
	// Output:
	// &plot.SetViewSpec{
	// · Case: 1,
	// · Token: example2283.go:1:8: IDENTIFIER "map",
	// }
}

func ExampleSetViewSpec_case2() {
	fmt.Println(exampleAST(2284, "set vi map scale ident_a"))
	// Output:
	// &plot.SetViewSpec{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2284.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2284.go:1:8: IDENTIFIER "map",
	// · Token2: example2284.go:1:12: IDENTIFIER "scale",
	// }
}

func ExampleSetViewSpec_case3() {
	fmt.Println(exampleAST(2285, "set vi equal xx"))
	// Output:
	// &plot.SetViewSpec{
	// · Case: 3,
	// · Token: example2285.go:1:8: IDENTIFIER "equal",
	// · Token2: example2285.go:1:14: IDENTIFIER "xx",
	// }
}

func ExampleSetViewSpec_case4() {
	fmt.Println(exampleAST(2286, "set vi equal xy"))
	// Output:
	// &plot.SetViewSpec{
	// · Case: 4,
	// · Token: example2286.go:1:8: IDENTIFIER "equal",
	// · Token2: example2286.go:1:14: IDENTIFIER "xy",
	// }
}

func ExampleSetViewSpec_case5() {
	fmt.Println(exampleAST(2287, "set vi equal xyz"))
	// Output:
	// &plot.SetViewSpec{
	// · Case: 5,
	// · Token: example2287.go:1:8: IDENTIFIER "equal",
	// · Token2: example2287.go:1:14: IDENTIFIER "xyz",
	// }
}

func ExampleSetViewSpec_case6() {
	fmt.Println(exampleAST(2288, "set view noequal xx"))
	// Output:
	// &plot.SetViewSpec{
	// · Case: 6,
	// · Token: example2288.go:1:10: IDENTIFIER "noequal",
	// · Token2: example2288.go:1:18: IDENTIFIER "xx",
	// }
}

func ExampleSetViewSpec_case7() {
	fmt.Println(exampleAST(2289, "set view noequal xy"))
	// Output:
	// &plot.SetViewSpec{
	// · Case: 7,
	// · Token: example2289.go:1:10: IDENTIFIER "noequal",
	// · Token2: example2289.go:1:18: IDENTIFIER "xy",
	// }
}

func ExampleSetViewSpec_case8() {
	fmt.Println(exampleAST(2290, "set view noequal xyz"))
	// Output:
	// &plot.SetViewSpec{
	// · Case: 8,
	// · Token: example2290.go:1:10: IDENTIFIER "noequal",
	// · Token2: example2290.go:1:18: IDENTIFIER "xyz",
	// }
}

func ExampleSetXLabelSpecList() {
	fmt.Println(exampleAST(2298, "set zlabel enhanced"))
	// Output:
	// &plot.SetXLabelSpecList{
	// · SetXLabelSpecListItem: &plot.SetXLabelSpecListItem{
	// · · Case: 8,
	// · · Token: example2298.go:1:12: IDENTIFIER "enhanced",
	// · },
	// }
}

func ExampleSetXLabelSpecList_case1() {
	fmt.Println(exampleAST(2299, "set zlabel enhanced enhanced"))
	// Output:
	// &plot.SetXLabelSpecList{
	// · SetXLabelSpecList: &plot.SetXLabelSpecList{
	// · · Case: 1,
	// · · SetXLabelSpecListItem: &plot.SetXLabelSpecListItem{
	// · · · Case: 8,
	// · · · Token: example2299.go:1:21: IDENTIFIER "enhanced",
	// · · },
	// · },
	// · SetXLabelSpecListItem: &plot.SetXLabelSpecListItem{
	// · · Case: 8,
	// · · Token: example2299.go:1:12: IDENTIFIER "enhanced",
	// · },
	// }
}

func ExampleSetXLabelSpecListItem() {
	fmt.Println(exampleAST(2300, "set ylabel offset ident_a"))
	// Output:
	// &plot.SetXLabelSpecListItem{
	// · Position: &plot.Position{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2300.go:1:19: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2300.go:1:12: IDENTIFIER "offset",
	// }
}

func ExampleSetXLabelSpecListItem_case01() {
	fmt.Println(exampleAST(2301, "set x2label font ident_a"))
	// Output:
	// &plot.SetXLabelSpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2301.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2301.go:1:13: IDENTIFIER "font",
	// }
}

func ExampleSetXLabelSpecListItem_case02() {
	fmt.Println(exampleAST(2302, "set ylabel tc ident_a"))
	// Output:
	// &plot.SetXLabelSpecListItem{
	// · Case: 2,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2302.go:1:15: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2302.go:1:12: IDENTIFIER "tc",
	// }
}

func ExampleSetXLabelSpecListItem_case03() {
	fmt.Println(exampleAST(2303, "set ylabel tc lt ident_a"))
	// Output:
	// &plot.SetXLabelSpecListItem{
	// · Case: 3,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2303.go:1:18: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2303.go:1:12: IDENTIFIER "tc",
	// · Token2: example2303.go:1:15: IDENTIFIER "lt",
	// }
}

func ExampleSetXLabelSpecListItem_case04() {
	fmt.Println(exampleAST(2304, "set ylabel tc"))
	// Output:
	// &plot.SetXLabelSpecListItem{
	// · Case: 4,
	// · Token: example2304.go:1:12: IDENTIFIER "tc",
	// }
}

func ExampleSetXLabelSpecListItem_case05() {
	fmt.Println(exampleAST(2305, "set ylabel textcolor ident_a"))
	// Output:
	// &plot.SetXLabelSpecListItem{
	// · Case: 5,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2305.go:1:22: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2305.go:1:12: IDENTIFIER "textcolor",
	// }
}

func ExampleSetXLabelSpecListItem_case06() {
	fmt.Println(exampleAST(2306, "set ylabel textcolor lt ident_a"))
	// Output:
	// &plot.SetXLabelSpecListItem{
	// · Case: 6,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2306.go:1:25: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2306.go:1:12: IDENTIFIER "textcolor",
	// · Token2: example2306.go:1:22: IDENTIFIER "lt",
	// }
}

func ExampleSetXLabelSpecListItem_case07() {
	fmt.Println(exampleAST(2307, "set ylabel textcolor"))
	// Output:
	// &plot.SetXLabelSpecListItem{
	// · Case: 7,
	// · Token: example2307.go:1:12: IDENTIFIER "textcolor",
	// }
}

func ExampleSetXLabelSpecListItem_case08() {
	fmt.Println(exampleAST(2308, "set zlabel enhanced"))
	// Output:
	// &plot.SetXLabelSpecListItem{
	// · Case: 8,
	// · Token: example2308.go:1:12: IDENTIFIER "enhanced",
	// }
}

func ExampleSetXLabelSpecListItem_case09() {
	fmt.Println(exampleAST(2309, "set ylabel noenhanced"))
	// Output:
	// &plot.SetXLabelSpecListItem{
	// · Case: 9,
	// · Token: example2309.go:1:12: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetXLabelSpecListItem_case10() {
	fmt.Println(exampleAST(2310, "set x2label rotate"))
	// Output:
	// &plot.SetXLabelSpecListItem{
	// · Case: 10,
	// · Token: example2310.go:1:13: IDENTIFIER "rotate",
	// }
}

func ExampleSetXLabelSpecListItem_case11() {
	fmt.Println(exampleAST(2311, "set x2label rotate by ident_a"))
	// Output:
	// &plot.SetXLabelSpecListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2311.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2311.go:1:13: IDENTIFIER "rotate",
	// · Token2: example2311.go:1:20: IDENTIFIER "by",
	// }
}

func ExampleSetXLabelSpecListItem_case12() {
	fmt.Println(exampleAST(2312, "set x2label rotate parallel"))
	// Output:
	// &plot.SetXLabelSpecListItem{
	// · Case: 12,
	// · Token: example2312.go:1:13: IDENTIFIER "rotate",
	// · Token2: example2312.go:1:20: IDENTIFIER "parallel",
	// }
}

func ExampleSetXLabelSpecListItem_case13() {
	fmt.Println(exampleAST(2313, "set x2label norotate"))
	// Output:
	// &plot.SetXLabelSpecListItem{
	// · Case: 13,
	// · Token: example2313.go:1:13: IDENTIFIER "norotate",
	// }
}

func ExampleSetXLabelSpecOpt() {
	fmt.Println(exampleAST(2294, "set cblabel") == (*SetXLabelSpecOpt)(nil))
	// Output:
	// true
}

func ExampleSetXLabelSpecOpt_case1() {
	fmt.Println(exampleAST(2295, "set x2label ident_a"))
	// Output:
	// &plot.SetXLabelSpecOpt{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2295.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetXLabelSpecOpt_case2() {
	fmt.Println(exampleAST(2296, "set x2label ident_a enhanced"))
	// Output:
	// &plot.SetXLabelSpecOpt{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2296.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetXLabelSpecList: &plot.SetXLabelSpecList{
	// · · SetXLabelSpecListItem: &plot.SetXLabelSpecListItem{
	// · · · Case: 8,
	// · · · Token: example2296.go:1:21: IDENTIFIER "enhanced",
	// · · },
	// · },
	// }
}

func ExampleSetXLabelSpecOpt_case3() {
	fmt.Println(exampleAST(2297, "set zlabel enhanced"))
	// Output:
	// &plot.SetXLabelSpecOpt{
	// · Case: 3,
	// · SetXLabelSpecList: &plot.SetXLabelSpecList{
	// · · SetXLabelSpecListItem: &plot.SetXLabelSpecListItem{
	// · · · Case: 8,
	// · · · Token: example2297.go:1:12: IDENTIFIER "enhanced",
	// · · },
	// · },
	// }
}

func ExampleSetXTicsSpecList() {
	fmt.Println(exampleAST(2237, "set tic ident_a"))
	// Output:
	// &plot.SetXTicsSpecList{
	// · SetXTicsSpecListItem: &plot.SetXTicsSpecListItem{
	// · · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · · Case: 24,
	// · · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · · Token: example2237.go:1:9: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetXTicsSpecList_case1() {
	fmt.Println(exampleAST(2238, "set rtics ident_a ident_b"))
	// Output:
	// &plot.SetXTicsSpecList{
	// · SetXTicsSpecList: &plot.SetXTicsSpecList{
	// · · Case: 1,
	// · · SetXTicsSpecListItem: &plot.SetXTicsSpecListItem{
	// · · · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · · · Case: 24,
	// · · · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · · · Token: example2238.go:1:19: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SetXTicsSpecListItem: &plot.SetXTicsSpecListItem{
	// · · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · · Case: 24,
	// · · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · · Token: example2238.go:1:11: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetXTicsSpecListItem() {
	fmt.Println(exampleAST(2239, "set rtics ident_a"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example2239.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetXTicsSpecListItem_case01() {
	fmt.Println(exampleAST(2240, "set rtics ident_a , ident_b"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2240.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example2240.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2240.go:1:19: ',' ",",
	// }
}

func ExampleSetXTicsSpecListItem_case02() {
	fmt.Println(exampleAST(2241, "set rtics ident_a , ident_b , ident_c"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2241.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2241.go:1:31: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · Case: 24,
	// · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · Token: example2241.go:1:11: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2241.go:1:19: ',' ",",
	// · Token2: example2241.go:1:29: ',' ",",
	// }
}

func ExampleSetXTicsSpecListItem_case03() {
	fmt.Println(exampleAST(2242, "set rtics ( ident_a )"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 3,
	// · TicsLabelList: &plot.TicsLabelList{
	// · · TicsLabelListItem: &plot.TicsLabelListItem{
	// · · · NonStringExpression: &plot.NonStringExpression{
	// · · · · Case: 24,
	// · · · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2242.go:1:13: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2242.go:1:11: '(' "(",
	// · Token2: example2242.go:1:21: ')' ")",
	// }
}

func ExampleSetXTicsSpecListItem_case04() {
	fmt.Println(exampleAST(2243, "set rtics axis"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 4,
	// · Token: example2243.go:1:11: IDENTIFIER "axis",
	// }
}

func ExampleSetXTicsSpecListItem_case05() {
	fmt.Println(exampleAST(2244, "set ytics border"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 5,
	// · Token: example2244.go:1:11: IDENTIFIER "border",
	// }
}

func ExampleSetXTicsSpecListItem_case06() {
	fmt.Println(exampleAST(2245, "set ztics mirror"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 6,
	// · Token: example2245.go:1:11: IDENTIFIER "mirror",
	// }
}

func ExampleSetXTicsSpecListItem_case07() {
	fmt.Println(exampleAST(2246, "set ytics nomirror"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 7,
	// · Token: example2246.go:1:11: IDENTIFIER "nomirror",
	// }
}

func ExampleSetXTicsSpecListItem_case08() {
	fmt.Println(exampleAST(2247, "set ztics in"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 8,
	// · Token: example2247.go:1:11: IDENTIFIER "in",
	// }
}

func ExampleSetXTicsSpecListItem_case09() {
	fmt.Println(exampleAST(2248, "set rtics out"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 9,
	// · Token: example2248.go:1:11: IDENTIFIER "out",
	// }
}

func ExampleSetXTicsSpecListItem_case10() {
	fmt.Println(exampleAST(2249, "set tic scale default"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 10,
	// · Token: example2249.go:1:9: IDENTIFIER "scale",
	// · Token2: example2249.go:1:15: IDENTIFIER "default",
	// }
}

func ExampleSetXTicsSpecListItem_case11() {
	fmt.Println(exampleAST(2250, "set tic scale ident_a"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 11,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2250.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2250.go:1:9: IDENTIFIER "scale",
	// }
}

func ExampleSetXTicsSpecListItem_case12() {
	fmt.Println(exampleAST(2251, "set tic scale ident_a , ident_b"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 12,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2251.go:1:15: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2251.go:1:25: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2251.go:1:9: IDENTIFIER "scale",
	// · Token2: example2251.go:1:23: ',' ",",
	// }
}

func ExampleSetXTicsSpecListItem_case13() {
	fmt.Println(exampleAST(2252, "set rtics rotate"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 13,
	// · Token: example2252.go:1:11: IDENTIFIER "rotate",
	// }
}

func ExampleSetXTicsSpecListItem_case14() {
	fmt.Println(exampleAST(2253, "set rtics rotate by ident_a"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 14,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2253.go:1:21: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2253.go:1:11: IDENTIFIER "rotate",
	// · Token2: example2253.go:1:18: IDENTIFIER "by",
	// }
}

func ExampleSetXTicsSpecListItem_case15() {
	fmt.Println(exampleAST(2254, "set ytics norotate"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 15,
	// · Token: example2254.go:1:11: IDENTIFIER "norotate",
	// }
}

func ExampleSetXTicsSpecListItem_case16() {
	fmt.Println(exampleAST(2255, "set ytics norotate by ident_a"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 16,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2255.go:1:23: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2255.go:1:11: IDENTIFIER "norotate",
	// · Token2: example2255.go:1:20: IDENTIFIER "by",
	// }
}

func ExampleSetXTicsSpecListItem_case17() {
	fmt.Println(exampleAST(2256, "set rtics offset ident_a"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 17,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2256.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2256.go:1:11: IDENTIFIER "offset",
	// }
}

func ExampleSetXTicsSpecListItem_case18() {
	fmt.Println(exampleAST(2257, "set rtics offset ident_a , ident_b"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 18,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2257.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2257.go:1:28: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2257.go:1:11: IDENTIFIER "offset",
	// · Token2: example2257.go:1:26: ',' ",",
	// }
}

func ExampleSetXTicsSpecListItem_case19() {
	fmt.Println(exampleAST(2258, "set rtics nooffset"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 19,
	// · Token: example2258.go:1:11: IDENTIFIER "nooffset",
	// }
}

func ExampleSetXTicsSpecListItem_case20() {
	fmt.Println(exampleAST(2259, "set ytics left"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 20,
	// · Token: example2259.go:1:11: IDENTIFIER "left",
	// }
}

func ExampleSetXTicsSpecListItem_case21() {
	fmt.Println(exampleAST(2260, "set ytics right"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 21,
	// · Token: example2260.go:1:11: IDENTIFIER "right",
	// }
}

func ExampleSetXTicsSpecListItem_case22() {
	fmt.Println(exampleAST(2261, "set ytics center"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 22,
	// · Token: example2261.go:1:11: IDENTIFIER "center",
	// }
}

func ExampleSetXTicsSpecListItem_case23() {
	fmt.Println(exampleAST(2262, "set rtics autojustify"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 23,
	// · Token: example2262.go:1:11: IDENTIFIER "autojustify",
	// }
}

func ExampleSetXTicsSpecListItem_case24() {
	fmt.Println(exampleAST(2263, "set ytics add"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 24,
	// · Token: example2263.go:1:11: IDENTIFIER "add",
	// }
}

func ExampleSetXTicsSpecListItem_case25() {
	fmt.Println(exampleAST(2264, "set ytics add ( ident_a )"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 25,
	// · TicsLabelList: &plot.TicsLabelList{
	// · · TicsLabelListItem: &plot.TicsLabelListItem{
	// · · · NonStringExpression: &plot.NonStringExpression{
	// · · · · Case: 24,
	// · · · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2264.go:1:17: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2264.go:1:11: IDENTIFIER "add",
	// · Token2: example2264.go:1:15: '(' "(",
	// · Token3: example2264.go:1:25: ')' ")",
	// }
}

func ExampleSetXTicsSpecListItem_case26() {
	fmt.Println(exampleAST(2265, "set rtics autofreq"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 26,
	// · Token: example2265.go:1:11: IDENTIFIER "autofreq",
	// }
}

func ExampleSetXTicsSpecListItem_case27() {
	fmt.Println(exampleAST(2266, "set rtics format ident_a"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 27,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2266.go:1:18: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2266.go:1:11: IDENTIFIER "format",
	// }
}

func ExampleSetXTicsSpecListItem_case28() {
	fmt.Println(exampleAST(2267, "set rtics font ident_a"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 28,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2267.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2267.go:1:11: IDENTIFIER "font",
	// }
}

func ExampleSetXTicsSpecListItem_case29() {
	fmt.Println(exampleAST(2268, "set ytics enhanced"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 29,
	// · Token: example2268.go:1:11: IDENTIFIER "enhanced",
	// }
}

func ExampleSetXTicsSpecListItem_case30() {
	fmt.Println(exampleAST(2269, "set ytics noenhanced"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 30,
	// · Token: example2269.go:1:11: IDENTIFIER "noenhanced",
	// }
}

func ExampleSetXTicsSpecListItem_case31() {
	fmt.Println(exampleAST(2270, "set rtics numeric"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 31,
	// · Token: example2270.go:1:11: IDENTIFIER "numeric",
	// }
}

func ExampleSetXTicsSpecListItem_case32() {
	fmt.Println(exampleAST(2271, "set rtics timedate"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 32,
	// · Token: example2271.go:1:11: IDENTIFIER "timedate",
	// }
}

func ExampleSetXTicsSpecListItem_case33() {
	fmt.Println(exampleAST(2272, "set rtics geographic"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 33,
	// · Token: example2272.go:1:11: IDENTIFIER "geographic",
	// }
}

func ExampleSetXTicsSpecListItem_case34() {
	fmt.Println(exampleAST(2273, "set ytics rangelimited"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 34,
	// · Token: example2273.go:1:11: IDENTIFIER "rangelimited",
	// }
}

func ExampleSetXTicsSpecListItem_case35() {
	fmt.Println(exampleAST(2274, "set rtics textcolor"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 35,
	// · Token: example2274.go:1:11: IDENTIFIER "textcolor",
	// }
}

func ExampleSetXTicsSpecListItem_case36() {
	fmt.Println(exampleAST(2275, "set rtics tc"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 36,
	// · Token: example2275.go:1:11: IDENTIFIER "tc",
	// }
}

func ExampleSetXTicsSpecListItem_case37() {
	fmt.Println(exampleAST(2276, "set rtics textcolor ident_a"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 37,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2276.go:1:21: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2276.go:1:11: IDENTIFIER "textcolor",
	// }
}

func ExampleSetXTicsSpecListItem_case38() {
	fmt.Println(exampleAST(2277, "set rtics tc ident_a"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 38,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2277.go:1:14: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2277.go:1:11: IDENTIFIER "tc",
	// }
}

func ExampleSetXTicsSpecListItem_case39() {
	fmt.Println(exampleAST(2278, "set ytics linetype ident_a"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 39,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2278.go:1:20: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2278.go:1:11: IDENTIFIER "linetype",
	// }
}

func ExampleSetXTicsSpecListItem_case40() {
	fmt.Println(exampleAST(2279, "set ytics lt ident_a"))
	// Output:
	// &plot.SetXTicsSpecListItem{
	// · Case: 40,
	// · ColorSpec: &plot.ColorSpec{
	// · · Case: 17,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2279.go:1:14: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2279.go:1:11: IDENTIFIER "lt",
	// }
}

func ExampleSetXTicsSpecListOpt() {
	fmt.Println(exampleAST(2280, "set cbtics") == (*SetXTicsSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetXTicsSpecListOpt_case1() {
	fmt.Println(exampleAST(2281, "set rtics ident_a"))
	// Output:
	// &plot.SetXTicsSpecListOpt{
	// · SetXTicsSpecList: &plot.SetXTicsSpecList{
	// · · SetXTicsSpecListItem: &plot.SetXTicsSpecListItem{
	// · · · NonParenthesizedExpression: &plot.NonParenthesizedExpression{
	// · · · · Case: 24,
	// · · · · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · · · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · · · · Token: example2281.go:1:11: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetXyplaneSpec() {
	fmt.Println(exampleAST(2291, "set xyplane at ident_a"))
	// Output:
	// &plot.SetXyplaneSpec{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2291.go:1:16: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2291.go:1:13: IDENTIFIER "at",
	// }
}

func ExampleSetXyplaneSpec_case1() {
	fmt.Println(exampleAST(2292, "set xyplane relative ident_a"))
	// Output:
	// &plot.SetXyplaneSpec{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2292.go:1:22: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2292.go:1:13: IDENTIFIER "relative",
	// }
}

func ExampleSetXyplaneSpec_case2() {
	fmt.Println(exampleAST(2293, "set xyplane ident_a"))
	// Output:
	// &plot.SetXyplaneSpec{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2293.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSetZeroaxisSpecList() {
	fmt.Println(exampleAST(2314, "set yzeroaxis nocontours"))
	// Output:
	// &plot.SetZeroaxisSpecList{
	// · LineStyleListItem: &plot.LineStyleListItem{
	// · · Case: 15,
	// · · Token: example2314.go:1:15: IDENTIFIER "nocontours",
	// · },
	// }
}

func ExampleSetZeroaxisSpecList_case1() {
	fmt.Println(exampleAST(2315, "set zzeroaxis nocontours nocontours"))
	// Output:
	// &plot.SetZeroaxisSpecList{
	// · LineStyleListItem: &plot.LineStyleListItem{
	// · · Case: 15,
	// · · Token: example2315.go:1:15: IDENTIFIER "nocontours",
	// · },
	// · SetZeroaxisSpecList: &plot.SetZeroaxisSpecList{
	// · · Case: 1,
	// · · LineStyleListItem: &plot.LineStyleListItem{
	// · · · Case: 15,
	// · · · Token: example2315.go:1:26: IDENTIFIER "nocontours",
	// · · },
	// · },
	// }
}

func ExampleSetZeroaxisSpecListOpt() {
	fmt.Println(exampleAST(2316, "set x2zeroaxis") == (*SetZeroaxisSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleSetZeroaxisSpecListOpt_case1() {
	fmt.Println(exampleAST(2317, "set zzeroaxis nocontours"))
	// Output:
	// &plot.SetZeroaxisSpecListOpt{
	// · SetZeroaxisSpecList: &plot.SetZeroaxisSpecList{
	// · · LineStyleListItem: &plot.LineStyleListItem{
	// · · · Case: 15,
	// · · · Token: example2317.go:1:15: IDENTIFIER "nocontours",
	// · · },
	// · },
	// }
}

func ExampleShow() {
	fmt.Println(exampleAST(2318, "show angles"))
	// Output:
	// &plot.Show{
	// · ShowSpec: &plot.ShowSpec{
	// · · Token: example2318.go:1:6: IDENTIFIER "angles",
	// · },
	// · Token: example2318.go:1:1: IDENTIFIER "show",
	// }
}

func ExampleShowDatafileSpecList() {
	fmt.Println(exampleAST(2466, "show datafile binary"))
	// Output:
	// &plot.ShowDatafileSpecList{
	// · ShowDatafileSpecListItem: &plot.ShowDatafileSpecListItem{
	// · · Case: 3,
	// · · Token: example2466.go:1:15: IDENTIFIER "binary",
	// · },
	// }
}

func ExampleShowDatafileSpecList_case1() {
	fmt.Println(exampleAST(2467, "show datafile binary binary"))
	// Output:
	// &plot.ShowDatafileSpecList{
	// · ShowDatafileSpecList: &plot.ShowDatafileSpecList{
	// · · Case: 1,
	// · · ShowDatafileSpecListItem: &plot.ShowDatafileSpecListItem{
	// · · · Case: 3,
	// · · · Token: example2467.go:1:22: IDENTIFIER "binary",
	// · · },
	// · },
	// · ShowDatafileSpecListItem: &plot.ShowDatafileSpecListItem{
	// · · Case: 3,
	// · · Token: example2467.go:1:15: IDENTIFIER "binary",
	// · },
	// }
}

func ExampleShowDatafileSpecListItem() {
	fmt.Println(exampleAST(2468, "show datafile missing"))
	// Output:
	// &plot.ShowDatafileSpecListItem{
	// · Token: example2468.go:1:15: IDENTIFIER "missing",
	// }
}

func ExampleShowDatafileSpecListItem_case1() {
	fmt.Println(exampleAST(2469, "show datafile separator"))
	// Output:
	// &plot.ShowDatafileSpecListItem{
	// · Case: 1,
	// · Token: example2469.go:1:15: IDENTIFIER "separator",
	// }
}

func ExampleShowDatafileSpecListItem_case2() {
	fmt.Println(exampleAST(2470, "show datafile commentschars"))
	// Output:
	// &plot.ShowDatafileSpecListItem{
	// · Case: 2,
	// · Token: example2470.go:1:15: IDENTIFIER "commentschars",
	// }
}

func ExampleShowDatafileSpecListItem_case3() {
	fmt.Println(exampleAST(2471, "show datafile binary"))
	// Output:
	// &plot.ShowDatafileSpecListItem{
	// · Case: 3,
	// · Token: example2471.go:1:15: IDENTIFIER "binary",
	// }
}

func ExampleShowDatafileSpecListItem_case4() {
	fmt.Println(exampleAST(2472, "show datafile datasizes"))
	// Output:
	// &plot.ShowDatafileSpecListItem{
	// · Case: 4,
	// · Token: example2472.go:1:15: IDENTIFIER "datasizes",
	// }
}

func ExampleShowDatafileSpecListItem_case5() {
	fmt.Println(exampleAST(2473, "show datafile filetypes"))
	// Output:
	// &plot.ShowDatafileSpecListItem{
	// · Case: 5,
	// · Token: example2473.go:1:15: IDENTIFIER "filetypes",
	// }
}

func ExampleShowDatafileSpecListOpt() {
	fmt.Println(exampleAST(2474, "show datafile") == (*ShowDatafileSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleShowDatafileSpecListOpt_case1() {
	fmt.Println(exampleAST(2475, "show datafile binary"))
	// Output:
	// &plot.ShowDatafileSpecListOpt{
	// · ShowDatafileSpecList: &plot.ShowDatafileSpecList{
	// · · ShowDatafileSpecListItem: &plot.ShowDatafileSpecListItem{
	// · · · Case: 3,
	// · · · Token: example2475.go:1:15: IDENTIFIER "binary",
	// · · },
	// · },
	// }
}

func ExampleShowSpec() {
	fmt.Println(exampleAST(2319, "show angles"))
	// Output:
	// &plot.ShowSpec{
	// · Token: example2319.go:1:6: IDENTIFIER "angles",
	// }
}

func ExampleShowSpec_case001() {
	fmt.Println(exampleAST(2320, "show arrow"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 1,
	// · Token: example2320.go:1:6: IDENTIFIER "arrow",
	// }
}

func ExampleShowSpec_case002() {
	fmt.Println(exampleAST(2321, "show auto"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 2,
	// · Token: example2321.go:1:6: IDENTIFIER "auto",
	// }
}

func ExampleShowSpec_case003() {
	fmt.Println(exampleAST(2322, "show autoscale"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 3,
	// · Token: example2322.go:1:6: IDENTIFIER "autoscale",
	// }
}

func ExampleShowSpec_case004() {
	fmt.Println(exampleAST(2323, "show bars"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 4,
	// · Token: example2323.go:1:6: IDENTIFIER "bars",
	// }
}

func ExampleShowSpec_case005() {
	fmt.Println(exampleAST(2324, "show bind"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 5,
	// · Token: example2324.go:1:6: IDENTIFIER "bind",
	// }
}

func ExampleShowSpec_case006() {
	fmt.Println(exampleAST(2325, "show bmargin"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 6,
	// · Token: example2325.go:1:6: IDENTIFIER "bmargin",
	// }
}

func ExampleShowSpec_case007() {
	fmt.Println(exampleAST(2326, "show border"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 7,
	// · Token: example2326.go:1:6: IDENTIFIER "border",
	// }
}

func ExampleShowSpec_case008() {
	fmt.Println(exampleAST(2327, "show boxwidth"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 8,
	// · Token: example2327.go:1:6: IDENTIFIER "boxwidth",
	// }
}

func ExampleShowSpec_case009() {
	fmt.Println(exampleAST(2328, "show cbdata"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 9,
	// · Token: example2328.go:1:6: IDENTIFIER "cbdata",
	// }
}

func ExampleShowSpec_case010() {
	fmt.Println(exampleAST(2329, "show cbdtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 10,
	// · Token: example2329.go:1:6: IDENTIFIER "cbdtics",
	// }
}

func ExampleShowSpec_case011() {
	fmt.Println(exampleAST(2330, "show cblabel"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 11,
	// · Token: example2330.go:1:6: IDENTIFIER "cblabel",
	// }
}

func ExampleShowSpec_case012() {
	fmt.Println(exampleAST(2331, "show cbmtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 12,
	// · Token: example2331.go:1:6: IDENTIFIER "cbmtics",
	// }
}

func ExampleShowSpec_case013() {
	fmt.Println(exampleAST(2332, "show cbrange"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 13,
	// · Token: example2332.go:1:6: IDENTIFIER "cbrange",
	// }
}

func ExampleShowSpec_case014() {
	fmt.Println(exampleAST(2333, "show cbtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 14,
	// · Token: example2333.go:1:6: IDENTIFIER "cbtics",
	// }
}

func ExampleShowSpec_case015() {
	fmt.Println(exampleAST(2334, "show clabel"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 15,
	// · Token: example2334.go:1:6: IDENTIFIER "clabel",
	// }
}

func ExampleShowSpec_case016() {
	fmt.Println(exampleAST(2335, "show clip"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 16,
	// · Token: example2335.go:1:6: IDENTIFIER "clip",
	// }
}

func ExampleShowSpec_case017() {
	fmt.Println(exampleAST(2336, "show cntrlabel"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 17,
	// · Token: example2336.go:1:6: IDENTIFIER "cntrlabel",
	// }
}

func ExampleShowSpec_case018() {
	fmt.Println(exampleAST(2337, "show cntrp"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 18,
	// · Token: example2337.go:1:6: IDENTIFIER "cntrp",
	// }
}

func ExampleShowSpec_case019() {
	fmt.Println(exampleAST(2338, "show cntrparam"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 19,
	// · Token: example2338.go:1:6: IDENTIFIER "cntrparam",
	// }
}

func ExampleShowSpec_case020() {
	fmt.Println(exampleAST(2339, "show color"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 20,
	// · Token: example2339.go:1:6: IDENTIFIER "color",
	// }
}

func ExampleShowSpec_case021() {
	fmt.Println(exampleAST(2340, "show colorbox"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 21,
	// · Token: example2340.go:1:6: IDENTIFIER "colorbox",
	// }
}

func ExampleShowSpec_case022() {
	fmt.Println(exampleAST(2341, "show colornames"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 22,
	// · Token: example2341.go:1:6: IDENTIFIER "colornames",
	// }
}

func ExampleShowSpec_case023() {
	fmt.Println(exampleAST(2342, "show colorsequence"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 23,
	// · Token: example2342.go:1:6: IDENTIFIER "colorsequence",
	// }
}

func ExampleShowSpec_case024() {
	fmt.Println(exampleAST(2343, "show contour"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 24,
	// · Token: example2343.go:1:6: IDENTIFIER "contour",
	// }
}

func ExampleShowSpec_case025() {
	fmt.Println(exampleAST(2344, "show dashtype"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 25,
	// · Token: example2344.go:1:6: IDENTIFIER "dashtype",
	// }
}

func ExampleShowSpec_case026() {
	fmt.Println(exampleAST(2345, "show datafile"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 26,
	// · Token: example2345.go:1:6: IDENTIFIER "datafile",
	// }
}

func ExampleShowSpec_case027() {
	fmt.Println(exampleAST(2346, "show decimalsign"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 27,
	// · Token: example2346.go:1:6: IDENTIFIER "decimalsign",
	// }
}

func ExampleShowSpec_case028() {
	fmt.Println(exampleAST(2347, "show dgrid3d"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 28,
	// · Token: example2347.go:1:6: IDENTIFIER "dgrid3d",
	// }
}

func ExampleShowSpec_case029() {
	fmt.Println(exampleAST(2348, "show dummy"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 29,
	// · Token: example2348.go:1:6: IDENTIFIER "dummy",
	// }
}

func ExampleShowSpec_case030() {
	fmt.Println(exampleAST(2349, "show encoding"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 30,
	// · Token: example2349.go:1:6: IDENTIFIER "encoding",
	// }
}

func ExampleShowSpec_case031() {
	fmt.Println(exampleAST(2350, "show fit"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 31,
	// · Token: example2350.go:1:6: IDENTIFIER "fit",
	// }
}

func ExampleShowSpec_case032() {
	fmt.Println(exampleAST(2351, "show fontpath"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 32,
	// · Token: example2351.go:1:6: IDENTIFIER "fontpath",
	// }
}

func ExampleShowSpec_case033() {
	fmt.Println(exampleAST(2352, "show format"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 33,
	// · Token: example2352.go:1:6: IDENTIFIER "format",
	// }
}

func ExampleShowSpec_case034() {
	fmt.Println(exampleAST(2353, "show grid"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 34,
	// · Token: example2353.go:1:6: IDENTIFIER "grid",
	// }
}

func ExampleShowSpec_case035() {
	fmt.Println(exampleAST(2354, "show hidden3d"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 35,
	// · Token: example2354.go:1:6: IDENTIFIER "hidden3d",
	// }
}

func ExampleShowSpec_case036() {
	fmt.Println(exampleAST(2355, "show history"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 36,
	// · Token: example2355.go:1:6: IDENTIFIER "history",
	// }
}

func ExampleShowSpec_case037() {
	fmt.Println(exampleAST(2356, "show iso"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 37,
	// · Token: example2356.go:1:6: IDENTIFIER "iso",
	// }
}

func ExampleShowSpec_case038() {
	fmt.Println(exampleAST(2357, "show isosamples"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 38,
	// · Token: example2357.go:1:6: IDENTIFIER "isosamples",
	// }
}

func ExampleShowSpec_case039() {
	fmt.Println(exampleAST(2358, "show key"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 39,
	// · Token: example2358.go:1:6: IDENTIFIER "key",
	// }
}

func ExampleShowSpec_case040() {
	fmt.Println(exampleAST(2359, "show label"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 40,
	// · Token: example2359.go:1:6: IDENTIFIER "label",
	// }
}

func ExampleShowSpec_case041() {
	fmt.Println(exampleAST(2360, "show linetype"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 41,
	// · Token: example2360.go:1:6: IDENTIFIER "linetype",
	// }
}

func ExampleShowSpec_case042() {
	fmt.Println(exampleAST(2361, "show link"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 42,
	// · Token: example2361.go:1:6: IDENTIFIER "link",
	// }
}

func ExampleShowSpec_case043() {
	fmt.Println(exampleAST(2362, "show lmargin"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 43,
	// · Token: example2362.go:1:6: IDENTIFIER "lmargin",
	// }
}

func ExampleShowSpec_case044() {
	fmt.Println(exampleAST(2363, "show loadpath"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 44,
	// · Token: example2363.go:1:6: IDENTIFIER "loadpath",
	// }
}

func ExampleShowSpec_case045() {
	fmt.Println(exampleAST(2364, "show locale"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 45,
	// · Token: example2364.go:1:6: IDENTIFIER "locale",
	// }
}

func ExampleShowSpec_case046() {
	fmt.Println(exampleAST(2365, "show log"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 46,
	// · Token: example2365.go:1:6: IDENTIFIER "log",
	// }
}

func ExampleShowSpec_case047() {
	fmt.Println(exampleAST(2366, "show logscale"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 47,
	// · Token: example2366.go:1:6: IDENTIFIER "logscale",
	// }
}

func ExampleShowSpec_case048() {
	fmt.Println(exampleAST(2367, "show mapping"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 48,
	// · Token: example2367.go:1:6: IDENTIFIER "mapping",
	// }
}

func ExampleShowSpec_case049() {
	fmt.Println(exampleAST(2368, "show margins"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 49,
	// · Token: example2368.go:1:6: IDENTIFIER "margins",
	// }
}

func ExampleShowSpec_case050() {
	fmt.Println(exampleAST(2369, "show monochrome"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 50,
	// · Token: example2369.go:1:6: IDENTIFIER "monochrome",
	// }
}

func ExampleShowSpec_case051() {
	fmt.Println(exampleAST(2370, "show mouse"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 51,
	// · Token: example2370.go:1:6: IDENTIFIER "mouse",
	// }
}

func ExampleShowSpec_case052() {
	fmt.Println(exampleAST(2371, "show mcbtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 52,
	// · Token: example2371.go:1:6: IDENTIFIER "mcbtics",
	// }
}

func ExampleShowSpec_case053() {
	fmt.Println(exampleAST(2372, "show multiplot"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 53,
	// · Token: example2372.go:1:6: IDENTIFIER "multiplot",
	// }
}

func ExampleShowSpec_case054() {
	fmt.Println(exampleAST(2373, "show mx2tics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 54,
	// · Token: example2373.go:1:6: IDENTIFIER "mx2tics",
	// }
}

func ExampleShowSpec_case055() {
	fmt.Println(exampleAST(2374, "show mxtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 55,
	// · Token: example2374.go:1:6: IDENTIFIER "mxtics",
	// }
}

func ExampleShowSpec_case056() {
	fmt.Println(exampleAST(2375, "show my2tics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 56,
	// · Token: example2375.go:1:6: IDENTIFIER "my2tics",
	// }
}

func ExampleShowSpec_case057() {
	fmt.Println(exampleAST(2376, "show mytics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 57,
	// · Token: example2376.go:1:6: IDENTIFIER "mytics",
	// }
}

func ExampleShowSpec_case058() {
	fmt.Println(exampleAST(2377, "show mztics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 58,
	// · Token: example2377.go:1:6: IDENTIFIER "mztics",
	// }
}

func ExampleShowSpec_case059() {
	fmt.Println(exampleAST(2378, "show object"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 59,
	// · Token: example2378.go:1:6: IDENTIFIER "object",
	// }
}

func ExampleShowSpec_case060() {
	fmt.Println(exampleAST(2379, "show offsets"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 60,
	// · Token: example2379.go:1:6: IDENTIFIER "offsets",
	// }
}

func ExampleShowSpec_case061() {
	fmt.Println(exampleAST(2380, "show origin"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 61,
	// · Token: example2380.go:1:6: IDENTIFIER "origin",
	// }
}

func ExampleShowSpec_case062() {
	fmt.Println(exampleAST(2381, "show output"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 62,
	// · Token: example2381.go:1:6: IDENTIFIER "output",
	// }
}

func ExampleShowSpec_case063() {
	fmt.Println(exampleAST(2382, "show palette"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 63,
	// · Token: example2382.go:1:6: IDENTIFIER "palette",
	// }
}

func ExampleShowSpec_case064() {
	fmt.Println(exampleAST(2383, "show parametric"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 64,
	// · Token: example2383.go:1:6: IDENTIFIER "parametric",
	// }
}

func ExampleShowSpec_case065() {
	fmt.Println(exampleAST(2384, "show paxis"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 65,
	// · Token: example2384.go:1:6: IDENTIFIER "paxis",
	// }
}

func ExampleShowSpec_case066() {
	fmt.Println(exampleAST(2385, "show pm3d"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 66,
	// · Token: example2385.go:1:6: IDENTIFIER "pm3d",
	// }
}

func ExampleShowSpec_case067() {
	fmt.Println(exampleAST(2386, "show pointintervalbox"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 67,
	// · Token: example2386.go:1:6: IDENTIFIER "pointintervalbox",
	// }
}

func ExampleShowSpec_case068() {
	fmt.Println(exampleAST(2387, "show pointsize"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 68,
	// · Token: example2387.go:1:6: IDENTIFIER "pointsize",
	// }
}

func ExampleShowSpec_case069() {
	fmt.Println(exampleAST(2388, "show polar"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 69,
	// · Token: example2388.go:1:6: IDENTIFIER "polar",
	// }
}

func ExampleShowSpec_case070() {
	fmt.Println(exampleAST(2389, "show print"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 70,
	// · Token: example2389.go:1:6: IDENTIFIER "print",
	// }
}

func ExampleShowSpec_case071() {
	fmt.Println(exampleAST(2390, "show psdir"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 71,
	// · Token: example2390.go:1:6: IDENTIFIER "psdir",
	// }
}

func ExampleShowSpec_case072() {
	fmt.Println(exampleAST(2391, "show raxis"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 72,
	// · Token: example2391.go:1:6: IDENTIFIER "raxis",
	// }
}

func ExampleShowSpec_case073() {
	fmt.Println(exampleAST(2392, "show rmargin"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 73,
	// · Token: example2392.go:1:6: IDENTIFIER "rmargin",
	// }
}

func ExampleShowSpec_case074() {
	fmt.Println(exampleAST(2393, "show rrange"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 74,
	// · Token: example2393.go:1:6: IDENTIFIER "rrange",
	// }
}

func ExampleShowSpec_case075() {
	fmt.Println(exampleAST(2394, "show rtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 75,
	// · Token: example2394.go:1:6: IDENTIFIER "rtics",
	// }
}

func ExampleShowSpec_case076() {
	fmt.Println(exampleAST(2395, "show sam"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 76,
	// · Token: example2395.go:1:6: IDENTIFIER "sam",
	// }
}

func ExampleShowSpec_case077() {
	fmt.Println(exampleAST(2396, "show sample"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 77,
	// · Token: example2396.go:1:6: IDENTIFIER "sample",
	// }
}

func ExampleShowSpec_case078() {
	fmt.Println(exampleAST(2397, "show samples"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 78,
	// · Token: example2397.go:1:6: IDENTIFIER "samples",
	// }
}

func ExampleShowSpec_case079() {
	fmt.Println(exampleAST(2398, "show size"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 79,
	// · Token: example2398.go:1:6: IDENTIFIER "size",
	// }
}

func ExampleShowSpec_case080() {
	fmt.Println(exampleAST(2399, "show style arrow"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 80,
	// · Token: example2399.go:1:6: IDENTIFIER "style",
	// · Token2: example2399.go:1:12: IDENTIFIER "arrow",
	// }
}

func ExampleShowSpec_case081() {
	fmt.Println(exampleAST(2400, "show style boxplot"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 81,
	// · Token: example2400.go:1:6: IDENTIFIER "style",
	// · Token2: example2400.go:1:12: IDENTIFIER "boxplot",
	// }
}

func ExampleShowSpec_case082() {
	fmt.Println(exampleAST(2401, "show style circle"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 82,
	// · Token: example2401.go:1:6: IDENTIFIER "style",
	// · Token2: example2401.go:1:12: IDENTIFIER "circle",
	// }
}

func ExampleShowSpec_case083() {
	fmt.Println(exampleAST(2402, "show style ellipse"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 83,
	// · Token: example2402.go:1:6: IDENTIFIER "style",
	// · Token2: example2402.go:1:12: IDENTIFIER "ellipse",
	// }
}

func ExampleShowSpec_case084() {
	fmt.Println(exampleAST(2403, "show style fill"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 84,
	// · Token: example2403.go:1:6: IDENTIFIER "style",
	// · Token2: example2403.go:1:12: IDENTIFIER "fill",
	// }
}

func ExampleShowSpec_case085() {
	fmt.Println(exampleAST(2404, "show style histogram"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 85,
	// · Token: example2404.go:1:6: IDENTIFIER "style",
	// · Token2: example2404.go:1:12: IDENTIFIER "histogram",
	// }
}

func ExampleShowSpec_case086() {
	fmt.Println(exampleAST(2405, "show style line"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 86,
	// · Token: example2405.go:1:6: IDENTIFIER "style",
	// · Token2: example2405.go:1:12: IDENTIFIER "line",
	// }
}

func ExampleShowSpec_case087() {
	fmt.Println(exampleAST(2406, "show style rectangle"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 87,
	// · Token: example2406.go:1:6: IDENTIFIER "style",
	// · Token2: example2406.go:1:12: IDENTIFIER "rectangle",
	// }
}

func ExampleShowSpec_case088() {
	fmt.Println(exampleAST(2407, "show style textbox"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 88,
	// · Token: example2407.go:1:6: IDENTIFIER "style",
	// · Token2: example2407.go:1:12: IDENTIFIER "textbox",
	// }
}

func ExampleShowSpec_case089() {
	fmt.Println(exampleAST(2408, "show surface"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 89,
	// · Token: example2408.go:1:6: IDENTIFIER "surface",
	// }
}

func ExampleShowSpec_case090() {
	fmt.Println(exampleAST(2409, "show table"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 90,
	// · Token: example2409.go:1:6: IDENTIFIER "table",
	// }
}

func ExampleShowSpec_case091() {
	fmt.Println(exampleAST(2410, "show terminal"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 91,
	// · Token: example2410.go:1:6: IDENTIFIER "terminal",
	// }
}

func ExampleShowSpec_case092() {
	fmt.Println(exampleAST(2411, "show termoption"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 92,
	// · Token: example2411.go:1:6: IDENTIFIER "termoption",
	// }
}

func ExampleShowSpec_case093() {
	fmt.Println(exampleAST(2412, "show tics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 93,
	// · Token: example2412.go:1:6: IDENTIFIER "tics",
	// }
}

func ExampleShowSpec_case094() {
	fmt.Println(exampleAST(2413, "show ticslevel"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 94,
	// · Token: example2413.go:1:6: IDENTIFIER "ticslevel",
	// }
}

func ExampleShowSpec_case095() {
	fmt.Println(exampleAST(2414, "show time"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 95,
	// · Token: example2414.go:1:6: IDENTIFIER "time",
	// }
}

func ExampleShowSpec_case096() {
	fmt.Println(exampleAST(2415, "show timefmt"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 96,
	// · Token: example2415.go:1:6: IDENTIFIER "timefmt",
	// }
}

func ExampleShowSpec_case097() {
	fmt.Println(exampleAST(2416, "show timestamp"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 97,
	// · Token: example2416.go:1:6: IDENTIFIER "timestamp",
	// }
}

func ExampleShowSpec_case098() {
	fmt.Println(exampleAST(2417, "show title"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 98,
	// · Token: example2417.go:1:6: IDENTIFIER "title",
	// }
}

func ExampleShowSpec_case099() {
	fmt.Println(exampleAST(2418, "show tmargin"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 99,
	// · Token: example2418.go:1:6: IDENTIFIER "tmargin",
	// }
}

func ExampleShowSpec_case100() {
	fmt.Println(exampleAST(2419, "show trange"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 100,
	// · Token: example2419.go:1:6: IDENTIFIER "trange",
	// }
}

func ExampleShowSpec_case101() {
	fmt.Println(exampleAST(2420, "show urange"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 101,
	// · Token: example2420.go:1:6: IDENTIFIER "urange",
	// }
}

func ExampleShowSpec_case102() {
	fmt.Println(exampleAST(2421, "show var"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 102,
	// · Token: example2421.go:1:6: IDENTIFIER "var",
	// }
}

func ExampleShowSpec_case103() {
	fmt.Println(exampleAST(2422, "show variable ident_a"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 103,
	// · Token: example2422.go:1:6: IDENTIFIER "variable",
	// · Token2: example2422.go:1:15: IDENTIFIER "ident_a",
	// }
}

func ExampleShowSpec_case104() {
	fmt.Println(exampleAST(2423, "show variables"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 104,
	// · Token: example2423.go:1:6: IDENTIFIER "variables",
	// }
}

func ExampleShowSpec_case105() {
	fmt.Println(exampleAST(2424, "show variables all"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 105,
	// · Token: example2424.go:1:6: IDENTIFIER "variables",
	// · Token2: example2424.go:1:16: IDENTIFIER "all",
	// }
}

func ExampleShowSpec_case106() {
	fmt.Println(exampleAST(2425, "show variables ident_a"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 106,
	// · Token: example2425.go:1:6: IDENTIFIER "variables",
	// · Token2: example2425.go:1:16: IDENTIFIER "ident_a",
	// }
}

func ExampleShowSpec_case107() {
	fmt.Println(exampleAST(2426, "show vi"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 107,
	// · Token: example2426.go:1:6: IDENTIFIER "vi",
	// }
}

func ExampleShowSpec_case108() {
	fmt.Println(exampleAST(2427, "show view"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 108,
	// · Token: example2427.go:1:6: IDENTIFIER "view",
	// }
}

func ExampleShowSpec_case109() {
	fmt.Println(exampleAST(2428, "show vrange"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 109,
	// · Token: example2428.go:1:6: IDENTIFIER "vrange",
	// }
}

func ExampleShowSpec_case110() {
	fmt.Println(exampleAST(2429, "show x2data"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 110,
	// · Token: example2429.go:1:6: IDENTIFIER "x2data",
	// }
}

func ExampleShowSpec_case111() {
	fmt.Println(exampleAST(2430, "show x2label"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 111,
	// · Token: example2430.go:1:6: IDENTIFIER "x2label",
	// }
}

func ExampleShowSpec_case112() {
	fmt.Println(exampleAST(2431, "show x2mtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 112,
	// · Token: example2431.go:1:6: IDENTIFIER "x2mtics",
	// }
}

func ExampleShowSpec_case113() {
	fmt.Println(exampleAST(2432, "show x2range"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 113,
	// · Token: example2432.go:1:6: IDENTIFIER "x2range",
	// }
}

func ExampleShowSpec_case114() {
	fmt.Println(exampleAST(2433, "show x2tics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 114,
	// · Token: example2433.go:1:6: IDENTIFIER "x2tics",
	// }
}

func ExampleShowSpec_case115() {
	fmt.Println(exampleAST(2434, "show x2zeroaxis"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 115,
	// · Token: example2434.go:1:6: IDENTIFIER "x2zeroaxis",
	// }
}

func ExampleShowSpec_case116() {
	fmt.Println(exampleAST(2435, "show xdata"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 116,
	// · Token: example2435.go:1:6: IDENTIFIER "xdata",
	// }
}

func ExampleShowSpec_case117() {
	fmt.Println(exampleAST(2436, "show x2dtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 117,
	// · Token: example2436.go:1:6: IDENTIFIER "x2dtics",
	// }
}

func ExampleShowSpec_case118() {
	fmt.Println(exampleAST(2437, "show xdtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 118,
	// · Token: example2437.go:1:6: IDENTIFIER "xdtics",
	// }
}

func ExampleShowSpec_case119() {
	fmt.Println(exampleAST(2438, "show xlabel"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 119,
	// · Token: example2438.go:1:6: IDENTIFIER "xlabel",
	// }
}

func ExampleShowSpec_case120() {
	fmt.Println(exampleAST(2439, "show xmtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 120,
	// · Token: example2439.go:1:6: IDENTIFIER "xmtics",
	// }
}

func ExampleShowSpec_case121() {
	fmt.Println(exampleAST(2440, "show xrange"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 121,
	// · Token: example2440.go:1:6: IDENTIFIER "xrange",
	// }
}

func ExampleShowSpec_case122() {
	fmt.Println(exampleAST(2441, "show xtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 122,
	// · Token: example2441.go:1:6: IDENTIFIER "xtics",
	// }
}

func ExampleShowSpec_case123() {
	fmt.Println(exampleAST(2442, "show xyplane"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 123,
	// · Token: example2442.go:1:6: IDENTIFIER "xyplane",
	// }
}

func ExampleShowSpec_case124() {
	fmt.Println(exampleAST(2443, "show xzeroaxis"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 124,
	// · Token: example2443.go:1:6: IDENTIFIER "xzeroaxis",
	// }
}

func ExampleShowSpec_case125() {
	fmt.Println(exampleAST(2444, "show y2data"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 125,
	// · Token: example2444.go:1:6: IDENTIFIER "y2data",
	// }
}

func ExampleShowSpec_case126() {
	fmt.Println(exampleAST(2445, "show y2mtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 126,
	// · Token: example2445.go:1:6: IDENTIFIER "y2mtics",
	// }
}

func ExampleShowSpec_case127() {
	fmt.Println(exampleAST(2446, "show y2range"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 127,
	// · Token: example2446.go:1:6: IDENTIFIER "y2range",
	// }
}

func ExampleShowSpec_case128() {
	fmt.Println(exampleAST(2447, "show y2tics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 128,
	// · Token: example2447.go:1:6: IDENTIFIER "y2tics",
	// }
}

func ExampleShowSpec_case129() {
	fmt.Println(exampleAST(2448, "show y2zeroaxis"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 129,
	// · Token: example2448.go:1:6: IDENTIFIER "y2zeroaxis",
	// }
}

func ExampleShowSpec_case130() {
	fmt.Println(exampleAST(2449, "show ydata"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 130,
	// · Token: example2449.go:1:6: IDENTIFIER "ydata",
	// }
}

func ExampleShowSpec_case131() {
	fmt.Println(exampleAST(2450, "show y2dtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 131,
	// · Token: example2450.go:1:6: IDENTIFIER "y2dtics",
	// }
}

func ExampleShowSpec_case132() {
	fmt.Println(exampleAST(2451, "show ydtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 132,
	// · Token: example2451.go:1:6: IDENTIFIER "ydtics",
	// }
}

func ExampleShowSpec_case133() {
	fmt.Println(exampleAST(2452, "show ylabel"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 133,
	// · Token: example2452.go:1:6: IDENTIFIER "ylabel",
	// }
}

func ExampleShowSpec_case134() {
	fmt.Println(exampleAST(2453, "show ymtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 134,
	// · Token: example2453.go:1:6: IDENTIFIER "ymtics",
	// }
}

func ExampleShowSpec_case135() {
	fmt.Println(exampleAST(2454, "show yrange"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 135,
	// · Token: example2454.go:1:6: IDENTIFIER "yrange",
	// }
}

func ExampleShowSpec_case136() {
	fmt.Println(exampleAST(2455, "show ytics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 136,
	// · Token: example2455.go:1:6: IDENTIFIER "ytics",
	// }
}

func ExampleShowSpec_case137() {
	fmt.Println(exampleAST(2456, "show yzeroaxis"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 137,
	// · Token: example2456.go:1:6: IDENTIFIER "yzeroaxis",
	// }
}

func ExampleShowSpec_case138() {
	fmt.Println(exampleAST(2457, "show zdata"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 138,
	// · Token: example2457.go:1:6: IDENTIFIER "zdata",
	// }
}

func ExampleShowSpec_case139() {
	fmt.Println(exampleAST(2458, "show zdtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 139,
	// · Token: example2458.go:1:6: IDENTIFIER "zdtics",
	// }
}

func ExampleShowSpec_case140() {
	fmt.Println(exampleAST(2459, "show zero"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 140,
	// · Token: example2459.go:1:6: IDENTIFIER "zero",
	// }
}

func ExampleShowSpec_case141() {
	fmt.Println(exampleAST(2460, "show zeroaxis"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 141,
	// · Token: example2460.go:1:6: IDENTIFIER "zeroaxis",
	// }
}

func ExampleShowSpec_case142() {
	fmt.Println(exampleAST(2461, "show zlabel"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 142,
	// · Token: example2461.go:1:6: IDENTIFIER "zlabel",
	// }
}

func ExampleShowSpec_case143() {
	fmt.Println(exampleAST(2462, "show zmtics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 143,
	// · Token: example2462.go:1:6: IDENTIFIER "zmtics",
	// }
}

func ExampleShowSpec_case144() {
	fmt.Println(exampleAST(2463, "show zrange"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 144,
	// · Token: example2463.go:1:6: IDENTIFIER "zrange",
	// }
}

func ExampleShowSpec_case145() {
	fmt.Println(exampleAST(2464, "show ztics"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 145,
	// · Token: example2464.go:1:6: IDENTIFIER "ztics",
	// }
}

func ExampleShowSpec_case146() {
	fmt.Println(exampleAST(2465, "show zzeroaxis"))
	// Output:
	// &plot.ShowSpec{
	// · Case: 146,
	// · Token: example2465.go:1:6: IDENTIFIER "zzeroaxis",
	// }
}

func ExampleSimpleExpression() {
	fmt.Println(exampleAST(2476, "set tics ( ident_a ident_b != ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2476.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2476.go:1:31: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2476.go:1:28: NOTEQ "!=",
	// }
}

func ExampleSimpleExpression_case01() {
	fmt.Println(exampleAST(2477, "set tics ( ident_a ident_b && ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 1,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2477.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2477.go:1:31: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2477.go:1:28: ANDAND "&&",
	// }
}

func ExampleSimpleExpression_case02() {
	fmt.Println(exampleAST(2478, "set tics ( ident_a ident_b ** ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 2,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2478.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2478.go:1:31: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2478.go:1:28: EXP "**",
	// }
}

func ExampleSimpleExpression_case03() {
	fmt.Println(exampleAST(2479, "set tics ( ident_a ident_b << ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 3,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2479.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2479.go:1:31: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2479.go:1:28: LSH "<<",
	// }
}

func ExampleSimpleExpression_case04() {
	fmt.Println(exampleAST(2480, "set tics ( ident_a ident_b <= ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 4,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2480.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2480.go:1:31: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2480.go:1:28: LEQ "<=",
	// }
}

func ExampleSimpleExpression_case05() {
	fmt.Println(exampleAST(2481, "set tics ( ident_a ident_b == ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 5,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2481.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2481.go:1:31: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2481.go:1:28: EQEQ "==",
	// }
}

func ExampleSimpleExpression_case06() {
	fmt.Println(exampleAST(2482, "set tics ( ident_a ident_b >= ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 6,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2482.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2482.go:1:31: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2482.go:1:28: GEQ ">=",
	// }
}

func ExampleSimpleExpression_case07() {
	fmt.Println(exampleAST(2483, "set tics ( ident_a ident_b >> ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 7,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2483.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2483.go:1:31: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2483.go:1:28: RSH ">>",
	// }
}

func ExampleSimpleExpression_case08() {
	fmt.Println(exampleAST(2484, "set tics ( ident_a ident_b eq ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 8,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2484.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2484.go:1:31: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2484.go:1:28: IDENTIFIER "eq",
	// }
}

func ExampleSimpleExpression_case09() {
	fmt.Println(exampleAST(2485, "set tics ( ident_a ident_b ne ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 9,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2485.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2485.go:1:31: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2485.go:1:28: IDENTIFIER "ne",
	// }
}

func ExampleSimpleExpression_case10() {
	fmt.Println(exampleAST(2486, "set tics ( ident_a ident_b || ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 10,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2486.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2486.go:1:31: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2486.go:1:28: OROR "||",
	// }
}

func ExampleSimpleExpression_case11() {
	fmt.Println(exampleAST(2487, "set tics ( ident_a ident_b % ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 11,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2487.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2487.go:1:30: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2487.go:1:28: '%' "%",
	// }
}

func ExampleSimpleExpression_case12() {
	fmt.Println(exampleAST(2488, "set tics ( ident_a ident_b & ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 12,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2488.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2488.go:1:30: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2488.go:1:28: '&' "&",
	// }
}

func ExampleSimpleExpression_case13() {
	fmt.Println(exampleAST(2489, "set tics ( ident_a ident_b * ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 13,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2489.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2489.go:1:30: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2489.go:1:28: '*' "*",
	// }
}

func ExampleSimpleExpression_case14() {
	fmt.Println(exampleAST(2490, "set tics ( ident_a ident_b + ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 14,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2490.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2490.go:1:30: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2490.go:1:28: '+' "+",
	// }
}

func ExampleSimpleExpression_case15() {
	fmt.Println(exampleAST(2491, "set tics ( ident_a ident_b - ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 15,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2491.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2491.go:1:30: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2491.go:1:28: '-' "-",
	// }
}

func ExampleSimpleExpression_case16() {
	fmt.Println(exampleAST(2492, "set tics ( ident_a ident_b . ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 16,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2492.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2492.go:1:30: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2492.go:1:28: '.' ".",
	// }
}

func ExampleSimpleExpression_case17() {
	fmt.Println(exampleAST(2493, "set tics ( ident_a ident_b / ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 17,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2493.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2493.go:1:30: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2493.go:1:28: '/' "/",
	// }
}

func ExampleSimpleExpression_case18() {
	fmt.Println(exampleAST(2494, "set tics ( ident_a ident_b < ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 18,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2494.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2494.go:1:30: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2494.go:1:28: '<' "<",
	// }
}

func ExampleSimpleExpression_case19() {
	fmt.Println(exampleAST(2495, "set tics ( ident_a ident_b = ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 19,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2495.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2495.go:1:30: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2495.go:1:28: '=' "=",
	// }
}

func ExampleSimpleExpression_case20() {
	fmt.Println(exampleAST(2496, "set tics ( ident_a ident_b > ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 20,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2496.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2496.go:1:30: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2496.go:1:28: '>' ">",
	// }
}

func ExampleSimpleExpression_case21() {
	fmt.Println(exampleAST(2497, "set tics ( ident_a ident_b ? ident_c : ident_d )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 21,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2497.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2497.go:1:30: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression3: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2497.go:1:40: IDENTIFIER "ident_d",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2497.go:1:28: '?' "?",
	// · Token2: example2497.go:1:38: ':' ":",
	// }
}

func ExampleSimpleExpression_case22() {
	fmt.Println(exampleAST(2498, "set tics ( ident_a ident_b ^ ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 22,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2498.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2498.go:1:30: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2498.go:1:28: '^' "^",
	// }
}

func ExampleSimpleExpression_case23() {
	fmt.Println(exampleAST(2499, "set tics ( ident_a ident_b | ident_c )"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 23,
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2499.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2499.go:1:30: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2499.go:1:28: '|' "|",
	// }
}

func ExampleSimpleExpression_case24() {
	fmt.Println(exampleAST(2500, "call ident_a"))
	// Output:
	// &plot.SimpleExpression{
	// · Case: 24,
	// · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · Operand: &plot.Operand{
	// · · · · Case: 1,
	// · · · · Token: example2500.go:1:6: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSimpleExpressionList() {
	fmt.Println(exampleAST(2501, "call ident_a"))
	// Output:
	// &plot.SimpleExpressionList{
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2501.go:1:6: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSimpleExpressionList_case1() {
	fmt.Println(exampleAST(2502, "call ident_a ident_b"))
	// Output:
	// &plot.SimpleExpressionList{
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2502.go:1:6: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpressionList: &plot.SimpleExpressionList{
	// · · Case: 1,
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2502.go:1:14: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSliceArgument() {
	fmt.Println(exampleAST(2505, "bind ident_a [ :") == (*SliceArgument)(nil))
	// Output:
	// true
}

func ExampleSliceArgument_case1() {
	fmt.Println(exampleAST(2506, "bind ident_a [ * :"))
	// Output:
	// &plot.SliceArgument{
	// · Case: 1,
	// · Token: example2506.go:1:16: '*' "*",
	// }
}

func ExampleSliceArgument_case2() {
	fmt.Println(exampleAST(2507, "bind ident_a [ ident_b :"))
	// Output:
	// &plot.SliceArgument{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2507.go:1:16: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleSmoothing() {
	fmt.Println(exampleAST(2508, "plot ident_a sm acsplines"))
	// Output:
	// &plot.Smoothing{
	// · Token: example2508.go:1:17: IDENTIFIER "acsplines",
	// }
}

func ExampleSmoothing_case01() {
	fmt.Println(exampleAST(2509, "plot ident_a sm bandwidth"))
	// Output:
	// &plot.Smoothing{
	// · Case: 1,
	// · Token: example2509.go:1:17: IDENTIFIER "bandwidth",
	// }
}

func ExampleSmoothing_case02() {
	fmt.Println(exampleAST(2510, "plot ident_a sm bezier"))
	// Output:
	// &plot.Smoothing{
	// · Case: 2,
	// · Token: example2510.go:1:17: IDENTIFIER "bezier",
	// }
}

func ExampleSmoothing_case03() {
	fmt.Println(exampleAST(2511, "plot ident_a sm cnormal"))
	// Output:
	// &plot.Smoothing{
	// · Case: 3,
	// · Token: example2511.go:1:17: IDENTIFIER "cnormal",
	// }
}

func ExampleSmoothing_case04() {
	fmt.Println(exampleAST(2512, "plot ident_a smooth csplines"))
	// Output:
	// &plot.Smoothing{
	// · Case: 4,
	// · Token: example2512.go:1:21: IDENTIFIER "csplines",
	// }
}

func ExampleSmoothing_case05() {
	fmt.Println(exampleAST(2513, "plot ident_a sm cumulative"))
	// Output:
	// &plot.Smoothing{
	// · Case: 5,
	// · Token: example2513.go:1:17: IDENTIFIER "cumulative",
	// }
}

func ExampleSmoothing_case06() {
	fmt.Println(exampleAST(2514, "plot ident_a smooth frequency"))
	// Output:
	// &plot.Smoothing{
	// · Case: 6,
	// · Token: example2514.go:1:21: IDENTIFIER "frequency",
	// }
}

func ExampleSmoothing_case07() {
	fmt.Println(exampleAST(2515, "plot ident_a sm kdensity"))
	// Output:
	// &plot.Smoothing{
	// · Case: 7,
	// · Token: example2515.go:1:17: IDENTIFIER "kdensity",
	// }
}

func ExampleSmoothing_case08() {
	fmt.Println(exampleAST(2516, "plot ident_a smooth mcsplines"))
	// Output:
	// &plot.Smoothing{
	// · Case: 8,
	// · Token: example2516.go:1:21: IDENTIFIER "mcsplines",
	// }
}

func ExampleSmoothing_case09() {
	fmt.Println(exampleAST(2517, "plot ident_a smooth sbezier"))
	// Output:
	// &plot.Smoothing{
	// · Case: 9,
	// · Token: example2517.go:1:21: IDENTIFIER "sbezier",
	// }
}

func ExampleSmoothing_case10() {
	fmt.Println(exampleAST(2518, "plot ident_a smooth unique"))
	// Output:
	// &plot.Smoothing{
	// · Case: 10,
	// · Token: example2518.go:1:21: IDENTIFIER "unique",
	// }
}

func ExampleSmoothing_case11() {
	fmt.Println(exampleAST(2519, "plot ident_a sm unwrap"))
	// Output:
	// &plot.Smoothing{
	// · Case: 11,
	// · Token: example2519.go:1:17: IDENTIFIER "unwrap",
	// }
}

func ExampleSplot() {
	fmt.Println(exampleAST(2520, "splot ident_a"))
	// Output:
	// &plot.Splot{
	// · PlotElementList: &plot.PlotElementList{
	// · · PlotElementListItem: &plot.PlotElementListItem{
	// · · · Case: 1,
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2520.go:1:7: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2520.go:1:1: IDENTIFIER "splot",
	// }
}

func ExampleStatement() {
	fmt.Println(exampleAST(2521, "") == (*Statement)(nil))
	// Output:
	// true
}

func ExampleStatement_case01() {
	fmt.Println(exampleAST(2522, "bind ident_a ident_b"))
	// Output:
	// &plot.Statement{
	// · Bind: &plot.Bind{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2522.go:1:6: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2522.go:1:14: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2522.go:1:1: IDENTIFIER "bind",
	// · },
	// · Case: 1,
	// }
}

func ExampleStatement_case02() {
	fmt.Println(exampleAST(2523, "clear"))
	// Output:
	// &plot.Statement{
	// · Case: 2,
	// · Clear: &plot.Clear{
	// · · Token: example2523.go:1:1: IDENTIFIER "clear",
	// · },
	// }
}

func ExampleStatement_case03() {
	fmt.Println(exampleAST(2524, "eval ident_a"))
	// Output:
	// &plot.Statement{
	// · Case: 3,
	// · Eval: &plot.Eval{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2524.go:1:6: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2524.go:1:1: IDENTIFIER "eval",
	// · },
	// }
}

func ExampleStatement_case04() {
	fmt.Println(exampleAST(2525, "fit ident_a ident_b via ident_c"))
	// Output:
	// &plot.Statement{
	// · Case: 4,
	// · Fit: &plot.Fit{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2525.go:1:5: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · ExpressionList: &plot.ExpressionList{
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2525.go:1:25: IDENTIFIER "ident_c",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · SimpleExpression: &plot.SimpleExpression{
	// · · · Case: 24,
	// · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2525.go:1:13: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2525.go:1:1: IDENTIFIER "fit",
	// · · Token2: example2525.go:1:21: IDENTIFIER "via",
	// · },
	// }
}

func ExampleStatement_case05() {
	fmt.Println(exampleAST(2526, "import ident_a ( ident_b ) from ident_c"))
	// Output:
	// &plot.Statement{
	// · Case: 5,
	// · Import: &plot.Import{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2526.go:1:33: IDENTIFIER "ident_c",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · IdentifierList: &plot.IdentifierList{
	// · · · Token: example2526.go:1:18: IDENTIFIER "ident_b",
	// · · },
	// · · Token: example2526.go:1:1: IDENTIFIER "import",
	// · · Token2: example2526.go:1:8: IDENTIFIER "ident_a",
	// · · Token3: example2526.go:1:16: '(' "(",
	// · · Token4: example2526.go:1:26: ')' ")",
	// · · Token5: example2526.go:1:28: IDENTIFIER "from",
	// · },
	// }
}

func ExampleStatement_case06() {
	fmt.Println(exampleAST(2527, "lower"))
	// Output:
	// &plot.Statement{
	// · Case: 6,
	// · Lower: &plot.Lower{
	// · · Token: example2527.go:1:1: IDENTIFIER "lower",
	// · },
	// }
}

func ExampleStatement_case07() {
	fmt.Println(exampleAST(2528, "call ident_a"))
	// Output:
	// &plot.Statement{
	// · Call: &plot.Call{
	// · · SimpleExpressionList: &plot.SimpleExpressionList{
	// · · · SimpleExpression: &plot.SimpleExpression{
	// · · · · Case: 24,
	// · · · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2528.go:1:6: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2528.go:1:1: IDENTIFIER "call",
	// · },
	// · Case: 7,
	// }
}

func ExampleStatement_case08() {
	fmt.Println(exampleAST(2529, "cd ident_a"))
	// Output:
	// &plot.Statement{
	// · Case: 8,
	// · Cd: &plot.Cd{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2529.go:1:4: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2529.go:1:1: IDENTIFIER "cd",
	// · },
	// }
}

func ExampleStatement_case09() {
	fmt.Println(exampleAST(2530, "do for [ ident_a : * ] { }"))
	// Output:
	// &plot.Statement{
	// · Case: 9,
	// · Do: &plot.Do{
	// · · IterationSpecifier: &plot.IterationSpecifier{
	// · · · Case: 2,
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2530.go:1:10: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · · Token: example2530.go:1:4: IDENTIFIER "for",
	// · · · Token2: example2530.go:1:8: '[' "[",
	// · · · Token3: example2530.go:1:18: ':' ":",
	// · · · Token4: example2530.go:1:20: '*' "*",
	// · · · Token5: example2530.go:1:22: ']' "]",
	// · · },
	// · · Token: example2530.go:1:1: IDENTIFIER "do",
	// · · Token2: example2530.go:1:24: '{' "{",
	// · · Token3: example2530.go:1:26: '}' "}",
	// · },
	// }
}

func ExampleStatement_case10() {
	fmt.Println(exampleAST(2531, "else"))
	// Output:
	// &plot.Statement{
	// · Case: 10,
	// · Else: &plot.Else{
	// · · Token: example2531.go:1:1: IDENTIFIER "else",
	// · },
	// }
}

func ExampleStatement_case11() {
	fmt.Println(exampleAST(2532, "exit"))
	// Output:
	// &plot.Statement{
	// · Case: 11,
	// · Exit: &plot.Exit{
	// · · Token: example2532.go:1:1: IDENTIFIER "exit",
	// · },
	// }
}

func ExampleStatement_case12() {
	fmt.Println(exampleAST(2533, "ident_a ( ident_b ) = ident_c"))
	// Output:
	// &plot.Statement{
	// · Case: 12,
	// · FunctionDefinition: &plot.FunctionDefinition{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2533.go:1:23: IDENTIFIER "ident_c",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · IdentifierList: &plot.IdentifierList{
	// · · · Token: example2533.go:1:11: IDENTIFIER "ident_b",
	// · · },
	// · · Token: example2533.go:1:1: IDENTIFIER "ident_a",
	// · · Token2: example2533.go:1:9: '(' "(",
	// · · Token3: example2533.go:1:19: ')' ")",
	// · · Token4: example2533.go:1:21: '=' "=",
	// · },
	// }
}

func ExampleStatement_case13() {
	fmt.Println(exampleAST(2534, "if ( ident_a )"))
	// Output:
	// &plot.Statement{
	// · Case: 13,
	// · If: &plot.If{
	// · · Case: 2,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2534.go:1:6: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2534.go:1:1: IDENTIFIER "if",
	// · · Token2: example2534.go:1:4: '(' "(",
	// · · Token3: example2534.go:1:14: ')' ")",
	// · },
	// }
}

func ExampleStatement_case14() {
	fmt.Println(exampleAST(2535, "load ident_a"))
	// Output:
	// &plot.Statement{
	// · Case: 14,
	// · Load: &plot.Load{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2535.go:1:6: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2535.go:1:1: IDENTIFIER "load",
	// · },
	// }
}

func ExampleStatement_case15() {
	fmt.Println(exampleAST(2536, "$data << EOD\n1 2 3\nEOD\n"))
	// Output:
	// &plot.Statement{
	// · Case: 15,
	// · NamedDataBlock: &plot.NamedDataBlock{
	// · · Data: []uint8{ // len 6
	// · · · 0: 49,
	// · · · 1: 32,
	// · · · 2: 50,
	// · · · 3: 32,
	// · · · 4: 51,
	// · · · 5: 10,
	// · · },
	// · · Token: example2536.go:1:1: IDENTIFIER "$data",
	// · · Token2: example2536.go:1:7: LSH "<<",
	// · · Token3: example2536.go:1:10: IDENTIFIER "EOD",
	// · },
	// }
}

func ExampleStatement_case16() {
	fmt.Println(exampleAST(2537, "pause ident_a"))
	// Output:
	// &plot.Statement{
	// · Case: 16,
	// · Pause: &plot.Pause{
	// · · Case: 3,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2537.go:1:7: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2537.go:1:1: IDENTIFIER "pause",
	// · },
	// }
}

func ExampleStatement_case17() {
	fmt.Println(exampleAST(2538, "plot ident_a"))
	// Output:
	// &plot.Statement{
	// · Case: 17,
	// · Plot: &plot.Plot{
	// · · PlotElementList: &plot.PlotElementList{
	// · · · PlotElementListItem: &plot.PlotElementListItem{
	// · · · · Case: 1,
	// · · · · Expression: &plot.Expression{
	// · · · · · Case: 24,
	// · · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · · Operand: &plot.Operand{
	// · · · · · · · · Case: 1,
	// · · · · · · · · Token: example2538.go:1:6: IDENTIFIER "ident_a",
	// · · · · · · · },
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2538.go:1:1: IDENTIFIER "plot",
	// · },
	// }
}

func ExampleStatement_case18() {
	fmt.Println(exampleAST(2539, "print ident_a"))
	// Output:
	// &plot.Statement{
	// · Case: 18,
	// · Print: &plot.Print{
	// · · ExpressionList: &plot.ExpressionList{
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2539.go:1:7: IDENTIFIER "ident_a",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2539.go:1:1: IDENTIFIER "print",
	// · },
	// }
}

func ExampleStatement_case19() {
	fmt.Println(exampleAST(2540, "rep"))
	// Output:
	// &plot.Statement{
	// · Case: 19,
	// · Replot: &plot.Replot{
	// · · Token: example2540.go:1:1: IDENTIFIER "rep",
	// · },
	// }
}

func ExampleStatement_case20() {
	fmt.Println(exampleAST(2541, "reread"))
	// Output:
	// &plot.Statement{
	// · Case: 20,
	// · Reread: &plot.Reread{
	// · · Token: example2541.go:1:1: IDENTIFIER "reread",
	// · },
	// }
}

func ExampleStatement_case21() {
	fmt.Println(exampleAST(2542, "reset"))
	// Output:
	// &plot.Statement{
	// · Case: 21,
	// · Reset: &plot.Reset{
	// · · Token: example2542.go:1:1: IDENTIFIER "reset",
	// · },
	// }
}

func ExampleStatement_case22() {
	fmt.Println(exampleAST(2543, "set auto"))
	// Output:
	// &plot.Statement{
	// · Case: 22,
	// · Set: &plot.Set{
	// · · SetSpec: &plot.SetSpec{
	// · · · Case: 3,
	// · · · Token: example2543.go:1:5: IDENTIFIER "auto",
	// · · },
	// · · Token: example2543.go:1:1: IDENTIFIER "set",
	// · },
	// }
}

func ExampleStatement_case23() {
	fmt.Println(exampleAST(2544, "show angles"))
	// Output:
	// &plot.Statement{
	// · Case: 23,
	// · Show: &plot.Show{
	// · · ShowSpec: &plot.ShowSpec{
	// · · · Token: example2544.go:1:6: IDENTIFIER "angles",
	// · · },
	// · · Token: example2544.go:1:1: IDENTIFIER "show",
	// · },
	// }
}

func ExampleStatement_case24() {
	fmt.Println(exampleAST(2545, "splot ident_a"))
	// Output:
	// &plot.Statement{
	// · Case: 24,
	// · Splot: &plot.Splot{
	// · · PlotElementList: &plot.PlotElementList{
	// · · · PlotElementListItem: &plot.PlotElementListItem{
	// · · · · Case: 1,
	// · · · · Expression: &plot.Expression{
	// · · · · · Case: 24,
	// · · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · · Operand: &plot.Operand{
	// · · · · · · · · Case: 1,
	// · · · · · · · · Token: example2545.go:1:7: IDENTIFIER "ident_a",
	// · · · · · · · },
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2545.go:1:1: IDENTIFIER "splot",
	// · },
	// }
}

func ExampleStatement_case25() {
	fmt.Println(exampleAST(2546, "stats ident_a"))
	// Output:
	// &plot.Statement{
	// · Case: 25,
	// · Stats: &plot.Stats{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2546.go:1:7: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2546.go:1:1: IDENTIFIER "stats",
	// · },
	// }
}

func ExampleStatement_case26() {
	fmt.Println(exampleAST(2547, "test palette"))
	// Output:
	// &plot.Statement{
	// · Case: 26,
	// · Test: &plot.Test{
	// · · Token: example2547.go:1:1: IDENTIFIER "test",
	// · · Token2: example2547.go:1:6: IDENTIFIER "palette",
	// · },
	// }
}

func ExampleStatement_case27() {
	fmt.Println(exampleAST(2548, "undefine ident_a"))
	// Output:
	// &plot.Statement{
	// · Case: 27,
	// · Undefine: &plot.Undefine{
	// · · Token: example2548.go:1:1: IDENTIFIER "undefine",
	// · · UndefineList: &plot.UndefineList{
	// · · · UndefineListItem: &plot.UndefineListItem{
	// · · · · Token: example2548.go:1:10: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleStatement_case28() {
	fmt.Println(exampleAST(2549, "unset angles"))
	// Output:
	// &plot.Statement{
	// · Case: 28,
	// · Unset: &plot.Unset{
	// · · Token: example2549.go:1:1: IDENTIFIER "unset",
	// · · UnsetSpec: &plot.UnsetSpec{
	// · · · Token: example2549.go:1:7: IDENTIFIER "angles",
	// · · },
	// · },
	// }
}

func ExampleStatement_case29() {
	fmt.Println(exampleAST(2550, "update ident_a"))
	// Output:
	// &plot.Statement{
	// · Case: 29,
	// · Update: &plot.Update{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2550.go:1:8: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2550.go:1:1: IDENTIFIER "update",
	// · },
	// }
}

func ExampleStatement_case30() {
	fmt.Println(exampleAST(2551, "ident_a = ident_b"))
	// Output:
	// &plot.Statement{
	// · Case: 30,
	// · VariableDefinition: &plot.VariableDefinition{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2551.go:1:11: IDENTIFIER "ident_b",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2551.go:1:1: IDENTIFIER "ident_a",
	// · · Token2: example2551.go:1:9: '=' "=",
	// · },
	// }
}

func ExampleStatement_case31() {
	fmt.Println(exampleAST(2552, "while ( ident_a ) { }"))
	// Output:
	// &plot.Statement{
	// · Case: 31,
	// · While: &plot.While{
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2552.go:1:9: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2552.go:1:1: IDENTIFIER "while",
	// · · Token2: example2552.go:1:7: '(' "(",
	// · · Token3: example2552.go:1:17: ')' ")",
	// · · Token4: example2552.go:1:19: '{' "{",
	// · · Token5: example2552.go:1:21: '}' "}",
	// · },
	// }
}

func ExampleStatementList() {
	fmt.Println(exampleAST(2554, "foo=bar"))
	// Output:
	// &plot.StatementList{
	// · Statement: &plot.Statement{
	// · · Case: 30,
	// · · VariableDefinition: &plot.VariableDefinition{
	// · · · Expression: &plot.Expression{
	// · · · · Case: 24,
	// · · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · · Operand: &plot.Operand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2554.go:1:5: IDENTIFIER "bar",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · · Token: example2554.go:1:1: IDENTIFIER "foo",
	// · · · Token2: example2554.go:1:4: '=' "=",
	// · · },
	// · },
	// }
}

func ExampleStatementList_case1() {
	fmt.Println(exampleAST(2555, ";"))
	// Output:
	// &plot.StatementList{
	// · StatementList: &plot.StatementList{
	// · · Case: 1,
	// · · StatementSeparator: &plot.StatementSeparator{
	// · · · Token: example2555.go:1:1: ';' ";",
	// · · },
	// · },
	// }
}

func ExampleStatementSeparator() {
	fmt.Println(exampleAST(2556, ";"))
	// Output:
	// &plot.StatementSeparator{
	// · Token: example2556.go:1:1: ';' ";",
	// }
}

func ExampleStatementSeparator_case1() {
	fmt.Println(exampleAST(2557, "foo=bar\nbaz=qux"))
	// Output:
	// &plot.StatementSeparator{
	// · Case: 1,
	// · Token: example2557.go:1:8: '\n' "\n",
	// }
}

func ExampleStats() {
	fmt.Println(exampleAST(2586, "stats ident_a"))
	// Output:
	// &plot.Stats{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2586.go:1:7: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2586.go:1:1: IDENTIFIER "stats",
	// }
}

func ExampleStatsSpecList() {
	fmt.Println(exampleAST(2587, "stats ident_a matrix"))
	// Output:
	// &plot.StatsSpecList{
	// · StatsSpecListItem: &plot.StatsSpecListItem{
	// · · Token: example2587.go:1:15: IDENTIFIER "matrix",
	// · },
	// }
}

func ExampleStatsSpecList_case1() {
	fmt.Println(exampleAST(2588, "stats ident_a matrix matrix"))
	// Output:
	// &plot.StatsSpecList{
	// · StatsSpecList: &plot.StatsSpecList{
	// · · Case: 1,
	// · · StatsSpecListItem: &plot.StatsSpecListItem{
	// · · · Token: example2588.go:1:22: IDENTIFIER "matrix",
	// · · },
	// · },
	// · StatsSpecListItem: &plot.StatsSpecListItem{
	// · · Token: example2588.go:1:15: IDENTIFIER "matrix",
	// · },
	// }
}

func ExampleStatsSpecListItem() {
	fmt.Println(exampleAST(2589, "stats ident_a matrix"))
	// Output:
	// &plot.StatsSpecListItem{
	// · Token: example2589.go:1:15: IDENTIFIER "matrix",
	// }
}

func ExampleStatsSpecListItem_case1() {
	fmt.Println(exampleAST(2590, "stats ident_a using ident_b"))
	// Output:
	// &plot.StatsSpecListItem{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2590.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2590.go:1:15: IDENTIFIER "using",
	// }
}

func ExampleStatsSpecListItem_case2() {
	fmt.Println(exampleAST(2591, "stats ident_a using ident_b : ident_c"))
	// Output:
	// &plot.StatsSpecListItem{
	// · Case: 2,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2591.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Expression2: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2591.go:1:31: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2591.go:1:15: IDENTIFIER "using",
	// · Token2: example2591.go:1:29: ':' ":",
	// }
}

func ExampleStatsSpecListItem_case3() {
	fmt.Println(exampleAST(2592, "stats ident_a name ident_b"))
	// Output:
	// &plot.StatsSpecListItem{
	// · Case: 3,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2592.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2592.go:1:15: IDENTIFIER "name",
	// }
}

func ExampleStatsSpecListItem_case4() {
	fmt.Println(exampleAST(2593, "stats ident_a output"))
	// Output:
	// &plot.StatsSpecListItem{
	// · Case: 4,
	// · Token: example2593.go:1:15: IDENTIFIER "output",
	// }
}

func ExampleStatsSpecListItem_case5() {
	fmt.Println(exampleAST(2594, "stats ident_a nooutput"))
	// Output:
	// &plot.StatsSpecListItem{
	// · Case: 5,
	// · Token: example2594.go:1:15: IDENTIFIER "nooutput",
	// }
}

func ExampleStatsSpecListItem_case6() {
	fmt.Println(exampleAST(2595, "stats ident_a index ident_b"))
	// Output:
	// &plot.StatsSpecListItem{
	// · Case: 6,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2595.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2595.go:1:15: IDENTIFIER "index",
	// }
}

func ExampleStatsSpecListItem_case7() {
	fmt.Println(exampleAST(2596, "stats ident_a prefix ident_b"))
	// Output:
	// &plot.StatsSpecListItem{
	// · Case: 7,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2596.go:1:22: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2596.go:1:15: IDENTIFIER "prefix",
	// }
}

func ExampleStatsSpecListOpt() {
	fmt.Println(exampleAST(2597, "stats ident_a") == (*StatsSpecListOpt)(nil))
	// Output:
	// true
}

func ExampleStatsSpecListOpt_case1() {
	fmt.Println(exampleAST(2598, "stats ident_a matrix"))
	// Output:
	// &plot.StatsSpecListOpt{
	// · StatsSpecList: &plot.StatsSpecList{
	// · · StatsSpecListItem: &plot.StatsSpecListItem{
	// · · · Token: example2598.go:1:15: IDENTIFIER "matrix",
	// · · },
	// · },
	// }
}

func ExampleTest() {
	fmt.Println(exampleAST(2599, "test palette"))
	// Output:
	// &plot.Test{
	// · Token: example2599.go:1:1: IDENTIFIER "test",
	// · Token2: example2599.go:1:6: IDENTIFIER "palette",
	// }
}

func ExampleTest_case1() {
	fmt.Println(exampleAST(2600, "test terminal"))
	// Output:
	// &plot.Test{
	// · Case: 1,
	// · Token: example2600.go:1:1: IDENTIFIER "test",
	// · Token2: example2600.go:1:6: IDENTIFIER "terminal",
	// }
}

func ExampleTicsLabelList() {
	fmt.Println(exampleAST(2558, "set rtics ( ident_a )"))
	// Output:
	// &plot.TicsLabelList{
	// · TicsLabelListItem: &plot.TicsLabelListItem{
	// · · NonStringExpression: &plot.NonStringExpression{
	// · · · Case: 24,
	// · · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2558.go:1:13: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTicsLabelList_case1() {
	fmt.Println(exampleAST(2559, "set rtics ( ident_a , ident_b )"))
	// Output:
	// &plot.TicsLabelList{
	// · TicsLabelList: &plot.TicsLabelList{
	// · · Case: 1,
	// · · TicsLabelListItem: &plot.TicsLabelListItem{
	// · · · NonStringExpression: &plot.NonStringExpression{
	// · · · · Case: 24,
	// · · · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · · · Case: 1,
	// · · · · · · · Token: example2559.go:1:23: IDENTIFIER "ident_b",
	// · · · · · · },
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2559.go:1:21: ',' ",",
	// · },
	// · TicsLabelListItem: &plot.TicsLabelListItem{
	// · · NonStringExpression: &plot.NonStringExpression{
	// · · · Case: 24,
	// · · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2559.go:1:13: IDENTIFIER "ident_a",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTicsLabelListItem() {
	fmt.Println(exampleAST(2560, "set rtics ( ident_a )"))
	// Output:
	// &plot.TicsLabelListItem{
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example2560.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTicsLabelListItem_case1() {
	fmt.Println(exampleAST(2561, "set rtics ( ident_a ident_b )"))
	// Output:
	// &plot.TicsLabelListItem{
	// · Case: 1,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example2561.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2561.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTicsLabelListItem_case2() {
	fmt.Println(exampleAST(2562, "set rtics ( ident_a ident_b ident_c )"))
	// Output:
	// &plot.TicsLabelListItem{
	// · Case: 2,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example2562.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2562.go:1:21: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression2: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2562.go:1:29: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleTicsLabelListItem_case3() {
	fmt.Println(exampleAST(2563, "set rtics ( 'a' ident_b )"))
	// Output:
	// &plot.TicsLabelListItem{
	// · Case: 3,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example2563.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2563.go:1:13: STRING_LIT "a",
	// }
}

func ExampleTicsLabelListItem_case4() {
	fmt.Println(exampleAST(2564, "set rtics ( 'a' ident_b ident_c )"))
	// Output:
	// &plot.TicsLabelListItem{
	// · Case: 4,
	// · NonStringExpression: &plot.NonStringExpression{
	// · · Case: 24,
	// · · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · · Case: 1,
	// · · · · · Token: example2564.go:1:17: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2564.go:1:25: IDENTIFIER "ident_c",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2564.go:1:13: STRING_LIT "a",
	// }
}

func ExampleUnaryExpression() {
	fmt.Println(exampleAST(2565, "bind ident_a"))
	// Output:
	// &plot.UnaryExpression{
	// · PrimaryExpression: &plot.PrimaryExpression{
	// · · Operand: &plot.Operand{
	// · · · Case: 1,
	// · · · Token: example2565.go:1:6: IDENTIFIER "ident_a",
	// · · },
	// · },
	// }
}

func ExampleUnaryExpression_case1() {
	fmt.Println(exampleAST(2566, "load ! ident_a"))
	// Output:
	// &plot.UnaryExpression{
	// · Case: 1,
	// · Token: example2566.go:1:6: '!' "!",
	// · UnaryExpression: &plot.UnaryExpression{
	// · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · Operand: &plot.Operand{
	// · · · · Case: 1,
	// · · · · Token: example2566.go:1:8: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryExpression_case2() {
	fmt.Println(exampleAST(2567, "load + ident_a"))
	// Output:
	// &plot.UnaryExpression{
	// · Case: 2,
	// · Token: example2567.go:1:6: '+' "+",
	// · UnaryExpression: &plot.UnaryExpression{
	// · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · Operand: &plot.Operand{
	// · · · · Case: 1,
	// · · · · Token: example2567.go:1:8: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryExpression_case3() {
	fmt.Println(exampleAST(2568, "load - ident_a"))
	// Output:
	// &plot.UnaryExpression{
	// · Case: 3,
	// · Token: example2568.go:1:6: '-' "-",
	// · UnaryExpression: &plot.UnaryExpression{
	// · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · Operand: &plot.Operand{
	// · · · · Case: 1,
	// · · · · Token: example2568.go:1:8: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryExpression_case4() {
	fmt.Println(exampleAST(2569, "load ~ ident_a"))
	// Output:
	// &plot.UnaryExpression{
	// · Case: 4,
	// · Token: example2569.go:1:6: '~' "~",
	// · UnaryExpression: &plot.UnaryExpression{
	// · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · Operand: &plot.Operand{
	// · · · · Case: 1,
	// · · · · Token: example2569.go:1:8: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryExpression_case5() {
	fmt.Println(exampleAST(2570, "pause ident_a !"))
	// Output:
	// &plot.UnaryExpression{
	// · Case: 5,
	// · Token: example2570.go:1:15: '!' "!",
	// · UnaryExpression: &plot.UnaryExpression{
	// · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · Operand: &plot.Operand{
	// · · · · Case: 1,
	// · · · · Token: example2570.go:1:7: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryNonParenthesizedExpression() {
	fmt.Println(exampleAST(2571, "set ztics ident_a"))
	// Output:
	// &plot.UnaryNonParenthesizedExpression{
	// · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · Token: example2571.go:1:11: IDENTIFIER "ident_a",
	// · · },
	// · },
	// }
}

func ExampleUnaryNonParenthesizedExpression_case1() {
	fmt.Println(exampleAST(2572, "set ztics ! ident_a"))
	// Output:
	// &plot.UnaryNonParenthesizedExpression{
	// · Case: 1,
	// · Token: example2572.go:1:11: '!' "!",
	// · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · Token: example2572.go:1:13: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryNonParenthesizedExpression_case2() {
	fmt.Println(exampleAST(2573, "set ztics + ident_a"))
	// Output:
	// &plot.UnaryNonParenthesizedExpression{
	// · Case: 2,
	// · Token: example2573.go:1:11: '+' "+",
	// · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · Token: example2573.go:1:13: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryNonParenthesizedExpression_case3() {
	fmt.Println(exampleAST(2574, "set ztics - ident_a"))
	// Output:
	// &plot.UnaryNonParenthesizedExpression{
	// · Case: 3,
	// · Token: example2574.go:1:11: '-' "-",
	// · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · Token: example2574.go:1:13: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryNonParenthesizedExpression_case4() {
	fmt.Println(exampleAST(2575, "set ztics ~ ident_a"))
	// Output:
	// &plot.UnaryNonParenthesizedExpression{
	// · Case: 4,
	// · Token: example2575.go:1:11: '~' "~",
	// · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · Token: example2575.go:1:13: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryNonParenthesizedExpression_case5() {
	fmt.Println(exampleAST(2576, "set cbtics ident_a !"))
	// Output:
	// &plot.UnaryNonParenthesizedExpression{
	// · Case: 5,
	// · Token: example2576.go:1:20: '!' "!",
	// · UnaryNonParenthesizedExpression: &plot.UnaryNonParenthesizedExpression{
	// · · PrimaryNonParenthesizedExpression: &plot.PrimaryNonParenthesizedExpression{
	// · · · NonParenthesizedOperand: &plot.NonParenthesizedOperand{
	// · · · · Token: example2576.go:1:12: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryNonStringExpression() {
	fmt.Println(exampleAST(2577, "set rtics ( ident_a !"))
	// Output:
	// &plot.UnaryNonStringExpression{
	// · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · NonStringOperand: &plot.NonStringOperand{
	// · · · Case: 1,
	// · · · Token: example2577.go:1:13: IDENTIFIER "ident_a",
	// · · },
	// · },
	// }
}

func ExampleUnaryNonStringExpression_case1() {
	fmt.Println(exampleAST(2578, "set rtics ( ! ident_a !"))
	// Output:
	// &plot.UnaryNonStringExpression{
	// · Case: 1,
	// · Token: example2578.go:1:13: '!' "!",
	// · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · Case: 1,
	// · · · · Token: example2578.go:1:15: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryNonStringExpression_case2() {
	fmt.Println(exampleAST(2579, "set rtics ( + ident_a !"))
	// Output:
	// &plot.UnaryNonStringExpression{
	// · Case: 2,
	// · Token: example2579.go:1:13: '+' "+",
	// · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · Case: 1,
	// · · · · Token: example2579.go:1:15: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryNonStringExpression_case3() {
	fmt.Println(exampleAST(2580, "set rtics ( - ident_a !"))
	// Output:
	// &plot.UnaryNonStringExpression{
	// · Case: 3,
	// · Token: example2580.go:1:13: '-' "-",
	// · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · Case: 1,
	// · · · · Token: example2580.go:1:15: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnaryNonStringExpression_case4() {
	fmt.Println(exampleAST(2581, "set rtics ( ~ ident_a !"))
	// Output:
	// &plot.UnaryNonStringExpression{
	// · Case: 4,
	// · Token: example2581.go:1:13: '~' "~",
	// · UnaryNonStringExpression: &plot.UnaryNonStringExpression{
	// · · PrimaryNonStringExpression: &plot.PrimaryNonStringExpression{
	// · · · NonStringOperand: &plot.NonStringOperand{
	// · · · · Case: 1,
	// · · · · Token: example2581.go:1:15: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnarySimpleExpression() {
	fmt.Println(exampleAST(2582, "call ident_a"))
	// Output:
	// &plot.UnarySimpleExpression{
	// · PrimaryExpression: &plot.PrimaryExpression{
	// · · Operand: &plot.Operand{
	// · · · Case: 1,
	// · · · Token: example2582.go:1:6: IDENTIFIER "ident_a",
	// · · },
	// · },
	// }
}

func ExampleUnarySimpleExpression_case1() {
	fmt.Println(exampleAST(2583, "set tics ( 'foo' 1+!x 2+!y )"))
	// Output:
	// &plot.UnarySimpleExpression{
	// · Case: 1,
	// · Token: example2583.go:1:25: '!' "!",
	// · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · Operand: &plot.Operand{
	// · · · · Case: 1,
	// · · · · Token: example2583.go:1:26: IDENTIFIER "y",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnarySimpleExpression_case2() {
	fmt.Println(exampleAST(2584, "call ~ ident_a"))
	// Output:
	// &plot.UnarySimpleExpression{
	// · Case: 2,
	// · Token: example2584.go:1:6: '~' "~",
	// · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · Operand: &plot.Operand{
	// · · · · Case: 1,
	// · · · · Token: example2584.go:1:8: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUnarySimpleExpression_case3() {
	fmt.Println(exampleAST(2585, "call ident_a !"))
	// Output:
	// &plot.UnarySimpleExpression{
	// · Case: 3,
	// · Token: example2585.go:1:14: '!' "!",
	// · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · Operand: &plot.Operand{
	// · · · · Case: 1,
	// · · · · Token: example2585.go:1:6: IDENTIFIER "ident_a",
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUndefine() {
	fmt.Println(exampleAST(2601, "undefine ident_a"))
	// Output:
	// &plot.Undefine{
	// · Token: example2601.go:1:1: IDENTIFIER "undefine",
	// · UndefineList: &plot.UndefineList{
	// · · UndefineListItem: &plot.UndefineListItem{
	// · · · Token: example2601.go:1:10: IDENTIFIER "ident_a",
	// · · },
	// · },
	// }
}

func ExampleUndefineList() {
	fmt.Println(exampleAST(2602, "undefine ident_a"))
	// Output:
	// &plot.UndefineList{
	// · UndefineListItem: &plot.UndefineListItem{
	// · · Token: example2602.go:1:10: IDENTIFIER "ident_a",
	// · },
	// }
}

func ExampleUndefineList_case1() {
	fmt.Println(exampleAST(2603, "undefine ident_a ident_b"))
	// Output:
	// &plot.UndefineList{
	// · UndefineList: &plot.UndefineList{
	// · · Case: 1,
	// · · UndefineListItem: &plot.UndefineListItem{
	// · · · Token: example2603.go:1:18: IDENTIFIER "ident_b",
	// · · },
	// · },
	// · UndefineListItem: &plot.UndefineListItem{
	// · · Token: example2603.go:1:10: IDENTIFIER "ident_a",
	// · },
	// }
}

func ExampleUndefineListItem() {
	fmt.Println(exampleAST(2604, "undefine ident_a"))
	// Output:
	// &plot.UndefineListItem{
	// · Token: example2604.go:1:10: IDENTIFIER "ident_a",
	// }
}

func ExampleUndefineListItem_case1() {
	fmt.Println(exampleAST(2605, "undefine ident_a *"))
	// Output:
	// &plot.UndefineListItem{
	// · Case: 1,
	// · Token: example2605.go:1:10: IDENTIFIER "ident_a",
	// · Token2: example2605.go:1:18: '*' "*",
	// }
}

func ExampleUnit() {
	fmt.Println(exampleAST(2606, "set term pstex size ident_a cm"))
	// Output:
	// &plot.Unit{
	// · Token: example2606.go:1:29: IDENTIFIER "cm",
	// }
}

func ExampleUnit_case1() {
	fmt.Println(exampleAST(2607, "set term pstex size ident_a mm"))
	// Output:
	// &plot.Unit{
	// · Case: 1,
	// · Token: example2607.go:1:29: IDENTIFIER "mm",
	// }
}

func ExampleUnit_case2() {
	fmt.Println(exampleAST(2608, "set term pstex size ident_a in"))
	// Output:
	// &plot.Unit{
	// · Case: 2,
	// · Token: example2608.go:1:29: IDENTIFIER "in",
	// }
}

func ExampleUnit_case3() {
	fmt.Println(exampleAST(2609, "set term pstex size ident_a inch"))
	// Output:
	// &plot.Unit{
	// · Case: 3,
	// · Token: example2609.go:1:29: IDENTIFIER "inch",
	// }
}

func ExampleUnit_case4() {
	fmt.Println(exampleAST(2610, "set term pstex size ident_a pt"))
	// Output:
	// &plot.Unit{
	// · Case: 4,
	// · Token: example2610.go:1:29: IDENTIFIER "pt",
	// }
}

func ExampleUnit_case5() {
	fmt.Println(exampleAST(2611, "set term pstex size ident_a pc"))
	// Output:
	// &plot.Unit{
	// · Case: 5,
	// · Token: example2611.go:1:29: IDENTIFIER "pc",
	// }
}

func ExampleUnit_case6() {
	fmt.Println(exampleAST(2612, "set term pstex size ident_a bp"))
	// Output:
	// &plot.Unit{
	// · Case: 6,
	// · Token: example2612.go:1:29: IDENTIFIER "bp",
	// }
}

func ExampleUnit_case7() {
	fmt.Println(exampleAST(2613, "set term pstex size ident_a dd"))
	// Output:
	// &plot.Unit{
	// · Case: 7,
	// · Token: example2613.go:1:29: IDENTIFIER "dd",
	// }
}

func ExampleUnit_case8() {
	fmt.Println(exampleAST(2614, "set term pstex size ident_a cc"))
	// Output:
	// &plot.Unit{
	// · Case: 8,
	// · Token: example2614.go:1:29: IDENTIFIER "cc",
	// }
}

func ExampleUnitsOpt() {
	fmt.Println(exampleAST(2615, "plot ident_a w ellipses") == (*UnitsOpt)(nil))
	// Output:
	// true
}

func ExampleUnitsOpt_case1() {
	fmt.Println(exampleAST(2616, "plot ident_a w ellipses units xx"))
	// Output:
	// &plot.UnitsOpt{
	// · Case: 1,
	// · Token: example2616.go:1:25: IDENTIFIER "units",
	// · Token2: example2616.go:1:31: IDENTIFIER "xx",
	// }
}

func ExampleUnitsOpt_case2() {
	fmt.Println(exampleAST(2617, "plot ident_a w ellipses units xy"))
	// Output:
	// &plot.UnitsOpt{
	// · Case: 2,
	// · Token: example2617.go:1:25: IDENTIFIER "units",
	// · Token2: example2617.go:1:31: IDENTIFIER "xy",
	// }
}

func ExampleUnitsOpt_case3() {
	fmt.Println(exampleAST(2618, "plot ident_a w ellipses units yy"))
	// Output:
	// &plot.UnitsOpt{
	// · Case: 3,
	// · Token: example2618.go:1:25: IDENTIFIER "units",
	// · Token2: example2618.go:1:31: IDENTIFIER "yy",
	// }
}

func ExampleUnset() {
	fmt.Println(exampleAST(2619, "unset angles"))
	// Output:
	// &plot.Unset{
	// · Token: example2619.go:1:1: IDENTIFIER "unset",
	// · UnsetSpec: &plot.UnsetSpec{
	// · · Token: example2619.go:1:7: IDENTIFIER "angles",
	// · },
	// }
}

func ExampleUnsetLogscaleList() {
	fmt.Println(exampleAST(2755, "unset logscale cb"))
	// Output:
	// &plot.UnsetLogscaleList{
	// · SetLogscaleAxesListItem: &plot.SetLogscaleAxesListItem{
	// · · Case: 5,
	// · · Token: example2755.go:1:16: IDENTIFIER "cb",
	// · },
	// }
}

func ExampleUnsetLogscaleList_case1() {
	fmt.Println(exampleAST(2756, "unset logscale cb cb"))
	// Output:
	// &plot.UnsetLogscaleList{
	// · SetLogscaleAxesListItem: &plot.SetLogscaleAxesListItem{
	// · · Case: 5,
	// · · Token: example2756.go:1:16: IDENTIFIER "cb",
	// · },
	// · UnsetLogscaleList: &plot.UnsetLogscaleList{
	// · · Case: 1,
	// · · SetLogscaleAxesListItem: &plot.SetLogscaleAxesListItem{
	// · · · Case: 5,
	// · · · Token: example2756.go:1:19: IDENTIFIER "cb",
	// · · },
	// · },
	// }
}

func ExampleUnsetLogscaleListOpt() {
	fmt.Println(exampleAST(2757, "unset log") == (*UnsetLogscaleListOpt)(nil))
	// Output:
	// true
}

func ExampleUnsetLogscaleListOpt_case1() {
	fmt.Println(exampleAST(2758, "unset logscale cb"))
	// Output:
	// &plot.UnsetLogscaleListOpt{
	// · UnsetLogscaleList: &plot.UnsetLogscaleList{
	// · · SetLogscaleAxesListItem: &plot.SetLogscaleAxesListItem{
	// · · · Case: 5,
	// · · · Token: example2758.go:1:16: IDENTIFIER "cb",
	// · · },
	// · },
	// }
}

func ExampleUnsetSpec() {
	fmt.Println(exampleAST(2620, "unset angles"))
	// Output:
	// &plot.UnsetSpec{
	// · Token: example2620.go:1:7: IDENTIFIER "angles",
	// }
}

func ExampleUnsetSpec_case001() {
	fmt.Println(exampleAST(2621, "unset arrow"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 1,
	// · Token: example2621.go:1:7: IDENTIFIER "arrow",
	// }
}

func ExampleUnsetSpec_case002() {
	fmt.Println(exampleAST(2622, "unset auto"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 2,
	// · Token: example2622.go:1:7: IDENTIFIER "auto",
	// }
}

func ExampleUnsetSpec_case003() {
	fmt.Println(exampleAST(2623, "unset autoscale"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 3,
	// · Token: example2623.go:1:7: IDENTIFIER "autoscale",
	// }
}

func ExampleUnsetSpec_case004() {
	fmt.Println(exampleAST(2624, "unset bars"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 4,
	// · Token: example2624.go:1:7: IDENTIFIER "bars",
	// }
}

func ExampleUnsetSpec_case005() {
	fmt.Println(exampleAST(2625, "unset bind"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 5,
	// · Token: example2625.go:1:7: IDENTIFIER "bind",
	// }
}

func ExampleUnsetSpec_case006() {
	fmt.Println(exampleAST(2626, "unset bmargin"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 6,
	// · Token: example2626.go:1:7: IDENTIFIER "bmargin",
	// }
}

func ExampleUnsetSpec_case007() {
	fmt.Println(exampleAST(2627, "unset border"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 7,
	// · Token: example2627.go:1:7: IDENTIFIER "border",
	// }
}

func ExampleUnsetSpec_case008() {
	fmt.Println(exampleAST(2628, "unset boxwidth"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 8,
	// · Token: example2628.go:1:7: IDENTIFIER "boxwidth",
	// }
}

func ExampleUnsetSpec_case009() {
	fmt.Println(exampleAST(2629, "unset cbdata"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 9,
	// · Token: example2629.go:1:7: IDENTIFIER "cbdata",
	// }
}

func ExampleUnsetSpec_case010() {
	fmt.Println(exampleAST(2630, "unset cbdtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 10,
	// · Token: example2630.go:1:7: IDENTIFIER "cbdtics",
	// }
}

func ExampleUnsetSpec_case011() {
	fmt.Println(exampleAST(2631, "unset cblabel"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 11,
	// · Token: example2631.go:1:7: IDENTIFIER "cblabel",
	// }
}

func ExampleUnsetSpec_case012() {
	fmt.Println(exampleAST(2632, "unset cbmtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 12,
	// · Token: example2632.go:1:7: IDENTIFIER "cbmtics",
	// }
}

func ExampleUnsetSpec_case013() {
	fmt.Println(exampleAST(2633, "unset cbrange"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 13,
	// · Token: example2633.go:1:7: IDENTIFIER "cbrange",
	// }
}

func ExampleUnsetSpec_case014() {
	fmt.Println(exampleAST(2634, "unset cbtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 14,
	// · Token: example2634.go:1:7: IDENTIFIER "cbtics",
	// }
}

func ExampleUnsetSpec_case015() {
	fmt.Println(exampleAST(2635, "unset clabel"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 15,
	// · Token: example2635.go:1:7: IDENTIFIER "clabel",
	// }
}

func ExampleUnsetSpec_case016() {
	fmt.Println(exampleAST(2636, "unset clip"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 16,
	// · Token: example2636.go:1:7: IDENTIFIER "clip",
	// }
}

func ExampleUnsetSpec_case017() {
	fmt.Println(exampleAST(2637, "unset cntrlabel"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 17,
	// · Token: example2637.go:1:7: IDENTIFIER "cntrlabel",
	// }
}

func ExampleUnsetSpec_case018() {
	fmt.Println(exampleAST(2638, "unset cntrp"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 18,
	// · Token: example2638.go:1:7: IDENTIFIER "cntrp",
	// }
}

func ExampleUnsetSpec_case019() {
	fmt.Println(exampleAST(2639, "unset cntrparam"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 19,
	// · Token: example2639.go:1:7: IDENTIFIER "cntrparam",
	// }
}

func ExampleUnsetSpec_case020() {
	fmt.Println(exampleAST(2640, "unset color"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 20,
	// · Token: example2640.go:1:7: IDENTIFIER "color",
	// }
}

func ExampleUnsetSpec_case021() {
	fmt.Println(exampleAST(2641, "unset colorbox"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 21,
	// · Token: example2641.go:1:7: IDENTIFIER "colorbox",
	// }
}

func ExampleUnsetSpec_case022() {
	fmt.Println(exampleAST(2642, "unset colornames"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 22,
	// · Token: example2642.go:1:7: IDENTIFIER "colornames",
	// }
}

func ExampleUnsetSpec_case023() {
	fmt.Println(exampleAST(2643, "unset colorsequence"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 23,
	// · Token: example2643.go:1:7: IDENTIFIER "colorsequence",
	// }
}

func ExampleUnsetSpec_case024() {
	fmt.Println(exampleAST(2644, "unset contour"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 24,
	// · Token: example2644.go:1:7: IDENTIFIER "contour",
	// }
}

func ExampleUnsetSpec_case025() {
	fmt.Println(exampleAST(2645, "unset dashtype"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 25,
	// · Token: example2645.go:1:7: IDENTIFIER "dashtype",
	// }
}

func ExampleUnsetSpec_case026() {
	fmt.Println(exampleAST(2646, "unset datafile"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 26,
	// · Token: example2646.go:1:7: IDENTIFIER "datafile",
	// }
}

func ExampleUnsetSpec_case027() {
	fmt.Println(exampleAST(2647, "unset decimalsign"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 27,
	// · Token: example2647.go:1:7: IDENTIFIER "decimalsign",
	// }
}

func ExampleUnsetSpec_case028() {
	fmt.Println(exampleAST(2648, "unset dgrid3d"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 28,
	// · Token: example2648.go:1:7: IDENTIFIER "dgrid3d",
	// }
}

func ExampleUnsetSpec_case029() {
	fmt.Println(exampleAST(2649, "unset dummy"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 29,
	// · Token: example2649.go:1:7: IDENTIFIER "dummy",
	// }
}

func ExampleUnsetSpec_case030() {
	fmt.Println(exampleAST(2650, "unset encoding"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 30,
	// · Token: example2650.go:1:7: IDENTIFIER "encoding",
	// }
}

func ExampleUnsetSpec_case031() {
	fmt.Println(exampleAST(2651, "unset fit"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 31,
	// · Token: example2651.go:1:7: IDENTIFIER "fit",
	// }
}

func ExampleUnsetSpec_case032() {
	fmt.Println(exampleAST(2652, "unset fontpath"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 32,
	// · Token: example2652.go:1:7: IDENTIFIER "fontpath",
	// }
}

func ExampleUnsetSpec_case033() {
	fmt.Println(exampleAST(2653, "unset format"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 33,
	// · Token: example2653.go:1:7: IDENTIFIER "format",
	// }
}

func ExampleUnsetSpec_case034() {
	fmt.Println(exampleAST(2654, "unset grid"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 34,
	// · Token: example2654.go:1:7: IDENTIFIER "grid",
	// }
}

func ExampleUnsetSpec_case035() {
	fmt.Println(exampleAST(2655, "unset hidden3d"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 35,
	// · Token: example2655.go:1:7: IDENTIFIER "hidden3d",
	// }
}

func ExampleUnsetSpec_case036() {
	fmt.Println(exampleAST(2656, "unset history"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 36,
	// · Token: example2656.go:1:7: IDENTIFIER "history",
	// }
}

func ExampleUnsetSpec_case037() {
	fmt.Println(exampleAST(2657, "unset iso"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 37,
	// · Token: example2657.go:1:7: IDENTIFIER "iso",
	// }
}

func ExampleUnsetSpec_case038() {
	fmt.Println(exampleAST(2658, "unset isosamples"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 38,
	// · Token: example2658.go:1:7: IDENTIFIER "isosamples",
	// }
}

func ExampleUnsetSpec_case039() {
	fmt.Println(exampleAST(2659, "unset key"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 39,
	// · Token: example2659.go:1:7: IDENTIFIER "key",
	// }
}

func ExampleUnsetSpec_case040() {
	fmt.Println(exampleAST(2660, "unset label"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 40,
	// · Token: example2660.go:1:7: IDENTIFIER "label",
	// }
}

func ExampleUnsetSpec_case041() {
	fmt.Println(exampleAST(2661, "unset label ident_a"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 41,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2661.go:1:13: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2661.go:1:7: IDENTIFIER "label",
	// }
}

func ExampleUnsetSpec_case042() {
	fmt.Println(exampleAST(2662, "unset linetype"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 42,
	// · Token: example2662.go:1:7: IDENTIFIER "linetype",
	// }
}

func ExampleUnsetSpec_case043() {
	fmt.Println(exampleAST(2663, "unset link"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 43,
	// · Token: example2663.go:1:7: IDENTIFIER "link",
	// }
}

func ExampleUnsetSpec_case044() {
	fmt.Println(exampleAST(2664, "unset lmargin"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 44,
	// · Token: example2664.go:1:7: IDENTIFIER "lmargin",
	// }
}

func ExampleUnsetSpec_case045() {
	fmt.Println(exampleAST(2665, "unset loadpath"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 45,
	// · Token: example2665.go:1:7: IDENTIFIER "loadpath",
	// }
}

func ExampleUnsetSpec_case046() {
	fmt.Println(exampleAST(2666, "unset locale"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 46,
	// · Token: example2666.go:1:7: IDENTIFIER "locale",
	// }
}

func ExampleUnsetSpec_case047() {
	fmt.Println(exampleAST(2667, "unset log"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 47,
	// · Token: example2667.go:1:7: IDENTIFIER "log",
	// }
}

func ExampleUnsetSpec_case048() {
	fmt.Println(exampleAST(2668, "unset logscale"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 48,
	// · Token: example2668.go:1:7: IDENTIFIER "logscale",
	// }
}

func ExampleUnsetSpec_case049() {
	fmt.Println(exampleAST(2669, "unset mapping"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 49,
	// · Token: example2669.go:1:7: IDENTIFIER "mapping",
	// }
}

func ExampleUnsetSpec_case050() {
	fmt.Println(exampleAST(2670, "unset margins"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 50,
	// · Token: example2670.go:1:7: IDENTIFIER "margins",
	// }
}

func ExampleUnsetSpec_case051() {
	fmt.Println(exampleAST(2671, "unset monochrome"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 51,
	// · Token: example2671.go:1:7: IDENTIFIER "monochrome",
	// }
}

func ExampleUnsetSpec_case052() {
	fmt.Println(exampleAST(2672, "unset mouse"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 52,
	// · Token: example2672.go:1:7: IDENTIFIER "mouse",
	// }
}

func ExampleUnsetSpec_case053() {
	fmt.Println(exampleAST(2673, "unset mcbtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 53,
	// · Token: example2673.go:1:7: IDENTIFIER "mcbtics",
	// }
}

func ExampleUnsetSpec_case054() {
	fmt.Println(exampleAST(2674, "unset multiplot"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 54,
	// · Token: example2674.go:1:7: IDENTIFIER "multiplot",
	// }
}

func ExampleUnsetSpec_case055() {
	fmt.Println(exampleAST(2675, "unset mx2tics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 55,
	// · Token: example2675.go:1:7: IDENTIFIER "mx2tics",
	// }
}

func ExampleUnsetSpec_case056() {
	fmt.Println(exampleAST(2676, "unset mxtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 56,
	// · Token: example2676.go:1:7: IDENTIFIER "mxtics",
	// }
}

func ExampleUnsetSpec_case057() {
	fmt.Println(exampleAST(2677, "unset my2tics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 57,
	// · Token: example2677.go:1:7: IDENTIFIER "my2tics",
	// }
}

func ExampleUnsetSpec_case058() {
	fmt.Println(exampleAST(2678, "unset mytics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 58,
	// · Token: example2678.go:1:7: IDENTIFIER "mytics",
	// }
}

func ExampleUnsetSpec_case059() {
	fmt.Println(exampleAST(2679, "unset mztics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 59,
	// · Token: example2679.go:1:7: IDENTIFIER "mztics",
	// }
}

func ExampleUnsetSpec_case060() {
	fmt.Println(exampleAST(2680, "unset object"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 60,
	// · Token: example2680.go:1:7: IDENTIFIER "object",
	// }
}

func ExampleUnsetSpec_case061() {
	fmt.Println(exampleAST(2681, "unset offsets"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 61,
	// · Token: example2681.go:1:7: IDENTIFIER "offsets",
	// }
}

func ExampleUnsetSpec_case062() {
	fmt.Println(exampleAST(2682, "unset origin"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 62,
	// · Token: example2682.go:1:7: IDENTIFIER "origin",
	// }
}

func ExampleUnsetSpec_case063() {
	fmt.Println(exampleAST(2683, "unset output"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 63,
	// · Token: example2683.go:1:7: IDENTIFIER "output",
	// }
}

func ExampleUnsetSpec_case064() {
	fmt.Println(exampleAST(2684, "unset palette"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 64,
	// · Token: example2684.go:1:7: IDENTIFIER "palette",
	// }
}

func ExampleUnsetSpec_case065() {
	fmt.Println(exampleAST(2685, "unset parametric"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 65,
	// · Token: example2685.go:1:7: IDENTIFIER "parametric",
	// }
}

func ExampleUnsetSpec_case066() {
	fmt.Println(exampleAST(2686, "unset paxis"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 66,
	// · Token: example2686.go:1:7: IDENTIFIER "paxis",
	// }
}

func ExampleUnsetSpec_case067() {
	fmt.Println(exampleAST(2687, "unset pm3d"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 67,
	// · Token: example2687.go:1:7: IDENTIFIER "pm3d",
	// }
}

func ExampleUnsetSpec_case068() {
	fmt.Println(exampleAST(2688, "unset pointintervalbox"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 68,
	// · Token: example2688.go:1:7: IDENTIFIER "pointintervalbox",
	// }
}

func ExampleUnsetSpec_case069() {
	fmt.Println(exampleAST(2689, "unset pointsize"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 69,
	// · Token: example2689.go:1:7: IDENTIFIER "pointsize",
	// }
}

func ExampleUnsetSpec_case070() {
	fmt.Println(exampleAST(2690, "unset polar"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 70,
	// · Token: example2690.go:1:7: IDENTIFIER "polar",
	// }
}

func ExampleUnsetSpec_case071() {
	fmt.Println(exampleAST(2691, "unset print"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 71,
	// · Token: example2691.go:1:7: IDENTIFIER "print",
	// }
}

func ExampleUnsetSpec_case072() {
	fmt.Println(exampleAST(2692, "unset psdir"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 72,
	// · Token: example2692.go:1:7: IDENTIFIER "psdir",
	// }
}

func ExampleUnsetSpec_case073() {
	fmt.Println(exampleAST(2693, "unset raxis"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 73,
	// · Token: example2693.go:1:7: IDENTIFIER "raxis",
	// }
}

func ExampleUnsetSpec_case074() {
	fmt.Println(exampleAST(2694, "unset rmargin"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 74,
	// · Token: example2694.go:1:7: IDENTIFIER "rmargin",
	// }
}

func ExampleUnsetSpec_case075() {
	fmt.Println(exampleAST(2695, "unset rrange"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 75,
	// · Token: example2695.go:1:7: IDENTIFIER "rrange",
	// }
}

func ExampleUnsetSpec_case076() {
	fmt.Println(exampleAST(2696, "unset rtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 76,
	// · Token: example2696.go:1:7: IDENTIFIER "rtics",
	// }
}

func ExampleUnsetSpec_case077() {
	fmt.Println(exampleAST(2697, "unset sam"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 77,
	// · Token: example2697.go:1:7: IDENTIFIER "sam",
	// }
}

func ExampleUnsetSpec_case078() {
	fmt.Println(exampleAST(2698, "unset sample"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 78,
	// · Token: example2698.go:1:7: IDENTIFIER "sample",
	// }
}

func ExampleUnsetSpec_case079() {
	fmt.Println(exampleAST(2699, "unset samples"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 79,
	// · Token: example2699.go:1:7: IDENTIFIER "samples",
	// }
}

func ExampleUnsetSpec_case080() {
	fmt.Println(exampleAST(2700, "unset size"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 80,
	// · Token: example2700.go:1:7: IDENTIFIER "size",
	// }
}

func ExampleUnsetSpec_case081() {
	fmt.Println(exampleAST(2701, "unset style"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 81,
	// · Token: example2701.go:1:7: IDENTIFIER "style",
	// }
}

func ExampleUnsetSpec_case082() {
	fmt.Println(exampleAST(2702, "unset surface"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 82,
	// · Token: example2702.go:1:7: IDENTIFIER "surface",
	// }
}

func ExampleUnsetSpec_case083() {
	fmt.Println(exampleAST(2703, "unset table"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 83,
	// · Token: example2703.go:1:7: IDENTIFIER "table",
	// }
}

func ExampleUnsetSpec_case084() {
	fmt.Println(exampleAST(2704, "unset terminal"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 84,
	// · Token: example2704.go:1:7: IDENTIFIER "terminal",
	// }
}

func ExampleUnsetSpec_case085() {
	fmt.Println(exampleAST(2705, "unset termoption"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 85,
	// · Token: example2705.go:1:7: IDENTIFIER "termoption",
	// }
}

func ExampleUnsetSpec_case086() {
	fmt.Println(exampleAST(2706, "unset tics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 86,
	// · Token: example2706.go:1:7: IDENTIFIER "tics",
	// }
}

func ExampleUnsetSpec_case087() {
	fmt.Println(exampleAST(2707, "unset ticslevel"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 87,
	// · Token: example2707.go:1:7: IDENTIFIER "ticslevel",
	// }
}

func ExampleUnsetSpec_case088() {
	fmt.Println(exampleAST(2708, "unset time"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 88,
	// · Token: example2708.go:1:7: IDENTIFIER "time",
	// }
}

func ExampleUnsetSpec_case089() {
	fmt.Println(exampleAST(2709, "unset timefmt"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 89,
	// · Token: example2709.go:1:7: IDENTIFIER "timefmt",
	// }
}

func ExampleUnsetSpec_case090() {
	fmt.Println(exampleAST(2710, "unset timestamp"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 90,
	// · Token: example2710.go:1:7: IDENTIFIER "timestamp",
	// }
}

func ExampleUnsetSpec_case091() {
	fmt.Println(exampleAST(2711, "unset title"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 91,
	// · Token: example2711.go:1:7: IDENTIFIER "title",
	// }
}

func ExampleUnsetSpec_case092() {
	fmt.Println(exampleAST(2712, "unset tmargin"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 92,
	// · Token: example2712.go:1:7: IDENTIFIER "tmargin",
	// }
}

func ExampleUnsetSpec_case093() {
	fmt.Println(exampleAST(2713, "unset trange"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 93,
	// · Token: example2713.go:1:7: IDENTIFIER "trange",
	// }
}

func ExampleUnsetSpec_case094() {
	fmt.Println(exampleAST(2714, "unset urange"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 94,
	// · Token: example2714.go:1:7: IDENTIFIER "urange",
	// }
}

func ExampleUnsetSpec_case095() {
	fmt.Println(exampleAST(2715, "unset vi"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 95,
	// · Token: example2715.go:1:7: IDENTIFIER "vi",
	// }
}

func ExampleUnsetSpec_case096() {
	fmt.Println(exampleAST(2716, "unset view"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 96,
	// · Token: example2716.go:1:7: IDENTIFIER "view",
	// }
}

func ExampleUnsetSpec_case097() {
	fmt.Println(exampleAST(2717, "unset vrange"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 97,
	// · Token: example2717.go:1:7: IDENTIFIER "vrange",
	// }
}

func ExampleUnsetSpec_case098() {
	fmt.Println(exampleAST(2718, "unset x2data"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 98,
	// · Token: example2718.go:1:7: IDENTIFIER "x2data",
	// }
}

func ExampleUnsetSpec_case099() {
	fmt.Println(exampleAST(2719, "unset x2label"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 99,
	// · Token: example2719.go:1:7: IDENTIFIER "x2label",
	// }
}

func ExampleUnsetSpec_case100() {
	fmt.Println(exampleAST(2720, "unset x2mtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 100,
	// · Token: example2720.go:1:7: IDENTIFIER "x2mtics",
	// }
}

func ExampleUnsetSpec_case101() {
	fmt.Println(exampleAST(2721, "unset x2range"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 101,
	// · Token: example2721.go:1:7: IDENTIFIER "x2range",
	// }
}

func ExampleUnsetSpec_case102() {
	fmt.Println(exampleAST(2722, "unset x2tics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 102,
	// · Token: example2722.go:1:7: IDENTIFIER "x2tics",
	// }
}

func ExampleUnsetSpec_case103() {
	fmt.Println(exampleAST(2723, "unset x2zeroaxis"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 103,
	// · Token: example2723.go:1:7: IDENTIFIER "x2zeroaxis",
	// }
}

func ExampleUnsetSpec_case104() {
	fmt.Println(exampleAST(2724, "unset xdata"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 104,
	// · Token: example2724.go:1:7: IDENTIFIER "xdata",
	// }
}

func ExampleUnsetSpec_case105() {
	fmt.Println(exampleAST(2725, "unset x2dtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 105,
	// · Token: example2725.go:1:7: IDENTIFIER "x2dtics",
	// }
}

func ExampleUnsetSpec_case106() {
	fmt.Println(exampleAST(2726, "unset xdtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 106,
	// · Token: example2726.go:1:7: IDENTIFIER "xdtics",
	// }
}

func ExampleUnsetSpec_case107() {
	fmt.Println(exampleAST(2727, "unset xlabel"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 107,
	// · Token: example2727.go:1:7: IDENTIFIER "xlabel",
	// }
}

func ExampleUnsetSpec_case108() {
	fmt.Println(exampleAST(2728, "unset xmtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 108,
	// · Token: example2728.go:1:7: IDENTIFIER "xmtics",
	// }
}

func ExampleUnsetSpec_case109() {
	fmt.Println(exampleAST(2729, "unset xrange"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 109,
	// · Token: example2729.go:1:7: IDENTIFIER "xrange",
	// }
}

func ExampleUnsetSpec_case110() {
	fmt.Println(exampleAST(2730, "unset xtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 110,
	// · Token: example2730.go:1:7: IDENTIFIER "xtics",
	// }
}

func ExampleUnsetSpec_case111() {
	fmt.Println(exampleAST(2731, "unset xyplane"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 111,
	// · Token: example2731.go:1:7: IDENTIFIER "xyplane",
	// }
}

func ExampleUnsetSpec_case112() {
	fmt.Println(exampleAST(2732, "unset xzeroaxis"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 112,
	// · Token: example2732.go:1:7: IDENTIFIER "xzeroaxis",
	// }
}

func ExampleUnsetSpec_case113() {
	fmt.Println(exampleAST(2733, "unset y2data"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 113,
	// · Token: example2733.go:1:7: IDENTIFIER "y2data",
	// }
}

func ExampleUnsetSpec_case114() {
	fmt.Println(exampleAST(2734, "unset y2mtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 114,
	// · Token: example2734.go:1:7: IDENTIFIER "y2mtics",
	// }
}

func ExampleUnsetSpec_case115() {
	fmt.Println(exampleAST(2735, "unset y2range"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 115,
	// · Token: example2735.go:1:7: IDENTIFIER "y2range",
	// }
}

func ExampleUnsetSpec_case116() {
	fmt.Println(exampleAST(2736, "unset y2tics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 116,
	// · Token: example2736.go:1:7: IDENTIFIER "y2tics",
	// }
}

func ExampleUnsetSpec_case117() {
	fmt.Println(exampleAST(2737, "unset y2zeroaxis"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 117,
	// · Token: example2737.go:1:7: IDENTIFIER "y2zeroaxis",
	// }
}

func ExampleUnsetSpec_case118() {
	fmt.Println(exampleAST(2738, "unset ydata"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 118,
	// · Token: example2738.go:1:7: IDENTIFIER "ydata",
	// }
}

func ExampleUnsetSpec_case119() {
	fmt.Println(exampleAST(2739, "unset y2dtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 119,
	// · Token: example2739.go:1:7: IDENTIFIER "y2dtics",
	// }
}

func ExampleUnsetSpec_case120() {
	fmt.Println(exampleAST(2740, "unset ydtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 120,
	// · Token: example2740.go:1:7: IDENTIFIER "ydtics",
	// }
}

func ExampleUnsetSpec_case121() {
	fmt.Println(exampleAST(2741, "unset ylabel"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 121,
	// · Token: example2741.go:1:7: IDENTIFIER "ylabel",
	// }
}

func ExampleUnsetSpec_case122() {
	fmt.Println(exampleAST(2742, "unset ymtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 122,
	// · Token: example2742.go:1:7: IDENTIFIER "ymtics",
	// }
}

func ExampleUnsetSpec_case123() {
	fmt.Println(exampleAST(2743, "unset yrange"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 123,
	// · Token: example2743.go:1:7: IDENTIFIER "yrange",
	// }
}

func ExampleUnsetSpec_case124() {
	fmt.Println(exampleAST(2744, "unset ytics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 124,
	// · Token: example2744.go:1:7: IDENTIFIER "ytics",
	// }
}

func ExampleUnsetSpec_case125() {
	fmt.Println(exampleAST(2745, "unset yzeroaxis"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 125,
	// · Token: example2745.go:1:7: IDENTIFIER "yzeroaxis",
	// }
}

func ExampleUnsetSpec_case126() {
	fmt.Println(exampleAST(2746, "unset zdata"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 126,
	// · Token: example2746.go:1:7: IDENTIFIER "zdata",
	// }
}

func ExampleUnsetSpec_case127() {
	fmt.Println(exampleAST(2747, "unset zdtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 127,
	// · Token: example2747.go:1:7: IDENTIFIER "zdtics",
	// }
}

func ExampleUnsetSpec_case128() {
	fmt.Println(exampleAST(2748, "unset zero"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 128,
	// · Token: example2748.go:1:7: IDENTIFIER "zero",
	// }
}

func ExampleUnsetSpec_case129() {
	fmt.Println(exampleAST(2749, "unset zeroaxis"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 129,
	// · Token: example2749.go:1:7: IDENTIFIER "zeroaxis",
	// }
}

func ExampleUnsetSpec_case130() {
	fmt.Println(exampleAST(2750, "unset zlabel"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 130,
	// · Token: example2750.go:1:7: IDENTIFIER "zlabel",
	// }
}

func ExampleUnsetSpec_case131() {
	fmt.Println(exampleAST(2751, "unset zmtics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 131,
	// · Token: example2751.go:1:7: IDENTIFIER "zmtics",
	// }
}

func ExampleUnsetSpec_case132() {
	fmt.Println(exampleAST(2752, "unset zrange"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 132,
	// · Token: example2752.go:1:7: IDENTIFIER "zrange",
	// }
}

func ExampleUnsetSpec_case133() {
	fmt.Println(exampleAST(2753, "unset ztics"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 133,
	// · Token: example2753.go:1:7: IDENTIFIER "ztics",
	// }
}

func ExampleUnsetSpec_case134() {
	fmt.Println(exampleAST(2754, "unset zzeroaxis"))
	// Output:
	// &plot.UnsetSpec{
	// · Case: 134,
	// · Token: example2754.go:1:7: IDENTIFIER "zzeroaxis",
	// }
}

func ExampleUpdate() {
	fmt.Println(exampleAST(2759, "update ident_a"))
	// Output:
	// &plot.Update{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2759.go:1:8: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2759.go:1:1: IDENTIFIER "update",
	// }
}

func ExampleUpdate_case1() {
	fmt.Println(exampleAST(2760, "update ident_a ident_b"))
	// Output:
	// &plot.Update{
	// · Case: 1,
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2760.go:1:8: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · SimpleExpression: &plot.SimpleExpression{
	// · · Case: 24,
	// · · UnarySimpleExpression: &plot.UnarySimpleExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2760.go:1:16: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2760.go:1:1: IDENTIFIER "update",
	// }
}

func ExampleUsingList() {
	fmt.Println(exampleAST(2761, "plot ident_a u ident_b"))
	// Output:
	// &plot.UsingList{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2761.go:1:16: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// }
}

func ExampleUsingList_case1() {
	fmt.Println(exampleAST(2762, "plot ident_a using ident_b : ident_c"))
	// Output:
	// &plot.UsingList{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2762.go:1:20: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · UsingList: &plot.UsingList{
	// · · Case: 1,
	// · · Expression: &plot.Expression{
	// · · · Case: 24,
	// · · · UnaryExpression: &plot.UnaryExpression{
	// · · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · · Operand: &plot.Operand{
	// · · · · · · Case: 1,
	// · · · · · · Token: example2762.go:1:30: IDENTIFIER "ident_c",
	// · · · · · },
	// · · · · },
	// · · · },
	// · · },
	// · · Token: example2762.go:1:28: ':' ":",
	// · },
	// }
}

func ExampleVariableDefinition() {
	fmt.Println(exampleAST(2763, "ident_a = ident_b"))
	// Output:
	// &plot.VariableDefinition{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2763.go:1:11: IDENTIFIER "ident_b",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2763.go:1:1: IDENTIFIER "ident_a",
	// · Token2: example2763.go:1:9: '=' "=",
	// }
}

func ExampleWhile() {
	fmt.Println(exampleAST(2765, "while ( ident_a ) { }"))
	// Output:
	// &plot.While{
	// · Expression: &plot.Expression{
	// · · Case: 24,
	// · · UnaryExpression: &plot.UnaryExpression{
	// · · · PrimaryExpression: &plot.PrimaryExpression{
	// · · · · Operand: &plot.Operand{
	// · · · · · Case: 1,
	// · · · · · Token: example2765.go:1:9: IDENTIFIER "ident_a",
	// · · · · },
	// · · · },
	// · · },
	// · },
	// · Token: example2765.go:1:1: IDENTIFIER "while",
	// · Token2: example2765.go:1:7: '(' "(",
	// · Token3: example2765.go:1:17: ')' ")",
	// · Token4: example2765.go:1:19: '{' "{",
	// · Token5: example2765.go:1:21: '}' "}",
	// }
}
